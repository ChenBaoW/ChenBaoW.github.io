<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C常见知识点</title>
    <url>/2024/04/01/C%E5%B8%B8%E8%A7%81%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<h1 id="1-内存方面"><a href="#1-内存方面" class="headerlink" title="1.内存方面"></a>1.内存方面</h1><h2 id="1-1-堆与栈的区别？"><a href="#1-1-堆与栈的区别？" class="headerlink" title="1.1 堆与栈的区别？"></a>1.1 <strong>堆与栈的区别？</strong></h2><p>（1）栈的空间是系统自动分配和回收，堆的空间是用户手动分配回收（malloc，calloc，realloc，free）</p>
<p>（2）栈的空间较小，堆的空间较大</p>
<p>（3）栈的地址空间往地址向下增长，堆的地址空间是由低地址到高地址</p>
<p>（4）栈的存储效率更高</p>
<h2 id="1-2-字节对齐的理解"><a href="#1-2-字节对齐的理解" class="headerlink" title="1.2 字节对齐的理解"></a>1.2 字节对齐的理解</h2><h3 id="1-2-1-什么是字节对齐？"><a href="#1-2-1-什么是字节对齐？" class="headerlink" title="1.2.1 什么是字节对齐？"></a>1.2.1 什么是字节对齐？</h3><p>字节对齐主要是针对结构体而言的，通常编译器会自动对其成员变量进行对齐，以提高数据存取的效率；</p>
<h3 id="1-2-2-字节对齐的两种方式"><a href="#1-2-2-字节对齐的两种方式" class="headerlink" title="1.2.2 字节对齐的两种方式"></a>1.2.2 字节对齐的两种方式</h3><p>默认对齐方式、指定对齐方式；</p>
<p>默认对齐方式内存分配满足以下三个条件：</p>
<ol>
<li>结构体第一个成员的地址和结构体的首地址相同；</li>
<li>结构体每个成员地址相对于结构体首地址的偏移量（offset）是该成员大小的整数倍，如果不是则编译器会在成员之间添加填充字节；</li>
<li>结构体总的大小要是其成员中最大size的整数倍，如果不是编译器会在其末尾添加填充字节。如char是1字节，short是2字节，int是4字节…</li>
</ol>
<p>指定对齐方式使用以下方式声明：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注：通过#pragma pack(n)改变C编译器的字节对齐方式</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> pack(4)         <span class="comment">//安装4字节的对齐方式</span></span></span><br></pre></td></tr></table></figure>
<p>指定对齐方式内存分配满足以下几个条件：</p>
<ol>
<li>结构体第一个成员的地址和结构体的首地址相同</li>
<li>结构体每个成员的地址偏移需要满足：N大于等于该成员的大小，那么该成员的地址偏移需满足默认对齐方式（地址偏移是其成员大小的整数倍）；Ｎ小于该成员的大小，那么该成员的地址偏移是N的整数倍。</li>
<li>结构体总的大小需要时N的整数倍，如果不是需要在结构体的末尾进行填充。</li>
<li>如果N大于结构体成员中最大成员的大小，则N不起作用，仍然按照默认方式对齐。</li>
</ol>
<p>注：在使用#pragma pack设定对齐方式一定要是2的整数幂，也就是（1，2，4，8，16，…），不然不起作用的，仍然按照默认方式对齐。</p>
<h2 id="1-3-内存泄漏和内存溢出是什么？"><a href="#1-3-内存泄漏和内存溢出是什么？" class="headerlink" title="1.3 内存泄漏和内存溢出是什么？"></a>1.3 内存泄漏和内存溢出是什么？</h2><p>（1）<strong>内存溢出：指程序申请内存时，没有足够的内存供申请者使用。</strong>或者说，给了你一块存储int类型数据的存储空间，但是你却存储long类型的数据，那么结果就是内存不够用，此时就会报错Out Of Memory,即所谓的内存溢出。</p>
<p>（2）<strong>内存泄漏：是指程序在申请内存后，无法释放已申请的内存空间。</strong>一次内存泄漏似乎不会有大的影响，但内存泄漏堆积后的后果就是内存溢出。</p>
<h2 id="1-4-全局变量和局部变量在内存中有什么不同"><a href="#1-4-全局变量和局部变量在内存中有什么不同" class="headerlink" title="1.4 全局变量和局部变量在内存中有什么不同?"></a>1.4 <strong>全局变量和局部变量在内存中有什么不同?</strong></h2><p>（1）<strong>全局变量</strong>保存在内存的全局存储区中， <strong>占用静态的存储单元</strong> ；</p>
<p>（2）<strong>局部变量</strong>保存在<strong>栈</strong>中，只有在所在函数被调用时才动态地为变量分配存储单元。</p>
<h2 id="1-5-描述内存分配方式以及它们的区别"><a href="#1-5-描述内存分配方式以及它们的区别" class="headerlink" title="1.5 描述内存分配方式以及它们的区别"></a>1.5 描述内存分配方式以及它们的区别</h2><p>（1）<strong>从静态存储区域分配</strong>。内存在程序编译的时候就已经分配好，这块内存在程序的整个运行期间都存在。例如全局变量，static 变量。<br>（2）<strong>在栈上创建</strong>。在执行函数时，函数内局部变量的存储单元都可以在栈上创建，函数执行结束时这些存储单元自动被释放。栈内存分配运算内置于处理器的指令集。<br>（3）<strong>从堆上分配，亦称动态内存分配</strong>。程序在运行的时候用 malloc 或 new 申请任意多少的内存，程序员自己负责在何时用 free 或 delete 释放内存。动态内存的生存期由程序员决定，使用非常灵活，但问题也最多。</p>
<h1 id="2-存放位置（文件，变量的生命周期）"><a href="#2-存放位置（文件，变量的生命周期）" class="headerlink" title="2.存放位置（文件，变量的生命周期）"></a>2.存放位置（文件，变量的生命周期）</h1><h2 id="2-1-局部变量和全局变量可以重名吗？"><a href="#2-1-局部变量和全局变量可以重名吗？" class="headerlink" title="2.1 局部变量和全局变量可以重名吗？"></a>2.1 局部变量和全局变量可以重名吗？</h2><p>（1）<strong>能，局部变量会屏蔽全局变量。</strong>C++中要用全局变量，需要使用 “::”(域解析符) 。C语言中局部变量可以与全局变量同名，在函数内引用这个变量时，会用到同名的局部变量，而不会用到全局变量。</p>
<p>（2）对于有些编译器而言，在同一个函数内可以定义多个同名的局部变量，比如在两个循环体内都定义一个同名的局部变量，而那个局部变量的作用域就在那个循环体内。</p>
<h2 id="2-2-const关键字"><a href="#2-2-const关键字" class="headerlink" title="2.2 const关键字"></a>2.2 const关键字</h2><h3 id="2-2-1-修饰变量"><a href="#2-2-1-修饰变量" class="headerlink" title="2.2.1 修饰变量"></a>2.2.1 修饰变量</h3><p>const的 常规用法，在变量初次定义时赋初，并用关键字const修饰，<strong>使变量只可访问，不能重新赋值修改变量。</strong></p>
<h3 id="2-2-2-修饰指针"><a href="#2-2-2-修饰指针" class="headerlink" title="2.2.2 修饰指针"></a>2.2.2 修饰指针</h3><p>（1） <strong>限制指针变量修饰</strong> ：指针变量指向的位置不能被修改。定义时，被 const 修饰的指针变量指针只能在定义时初始化，不能定义之后重新指向新的数据。</p>
<p>（2） <strong>限制指针变量指向的数据修饰【指针的解引用】</strong> ：修饰的指针变量指向的变量的值不能被修改，但是该指针可以指向其它空间。</p>
<p>（3） <strong>同时限制指针变量和指针变量指向的变量的值修饰</strong> ：指针变量指向的位置不能被修改，并且指针变量指向变量的值也不能被修改。</p>
<p>（4） <strong>修饰函数形参【指针】</strong> ：函数形参可以利用const关键字进行限制，来防止在函数内部修改指针指向的数据。</p>
<h2 id="2-3-static关键字"><a href="#2-3-static关键字" class="headerlink" title="2.3 static关键字"></a>2.3 static关键字</h2><p>（1）在函数体，一个被声明为静态的变量在这一函数被调用过程中维持其值不变。<br>（2）在模块内（但在函数体外），一个被声明为静态的变量可以被模块内所用函数访问，但不能被模块外其它函数访问。它是一个本地的全局变量。<br>（3） 在模块内，一个被声明为静态的函数只可被这一模块内的其它函数调用。那就是，这个函数被限制在声明它的模块的本地范围内使用。</p>
<h2 id="2-4-volatile关键字的作用？"><a href="#2-4-volatile关键字的作用？" class="headerlink" title="2.4 volatile关键字的作用？"></a>2.4 volatile关键字的作用？</h2><p>（1）裸机编程时，某变量是指向寄存器中某一特定地址， <strong>添加volatile的变量不进行优化处理</strong> ；</p>
<p>（2）某函数与中断函数共享全局变量时，加上volatile，让编译器不要省略该变量的访问；</p>
<p>（3）多线程中修饰共享全局变量，让编译器不要省略该变量的访问。</p>
<h2 id="2-5-内存布局中有哪些段？"><a href="#2-5-内存布局中有哪些段？" class="headerlink" title="2.5 内存布局中有哪些段？"></a>2.5 <strong>内存布局中有哪些段？</strong></h2><p>文本段(.text)、数据段(.data)、.bss段、堆(heap)、栈(stack)</p>
<p><img src="/2024/04/01/C%E5%B8%B8%E8%A7%81%E7%9F%A5%E8%AF%86%E7%82%B9/image/1698070866412.png" alt="1698070866412"></p>
<h2 id="2-6-程序的内存分配"><a href="#2-6-程序的内存分配" class="headerlink" title="2.6 程序的内存分配"></a>2.6 程序的内存分配</h2><p>一个由 c/C++编译的程序占用的内存分为以下几个部分</p>
<ol>
<li><strong>栈区（stack）</strong> —由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。</li>
<li><strong>堆区（heap）</strong>一般由程序员分配释放，若程序员不释放，程序结束时可能由 OS 回收。注意它与数据结构中的堆是两回事，分配方式倒是类似于链表，呵呵。</li>
<li><strong>全局区（静态区）（static）</strong> —全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在一块区域，未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。程序结束后由系统释放。</li>
<li><strong>文字常量区</strong> —常量字符串就是放在这里的。程序结束后由系统释放。</li>
<li><strong>程序代码区</strong> —存放函数体的二进制代码</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">例子程序</span><br><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>; <span class="comment">//全局初始化区</span></span><br><span class="line"><span class="type">char</span> *p1; <span class="comment">//全局未初始化区:bss区</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> b ; <span class="comment">//栈</span></span><br><span class="line">	<span class="type">char</span> s[] = <span class="string">&quot;abc&quot;</span>; <span class="comment">//栈</span></span><br><span class="line">	<span class="type">char</span> *p2; <span class="comment">//栈</span></span><br><span class="line">	<span class="type">char</span> *p3 = <span class="string">&quot;123456&quot;</span>; <span class="comment">//123456\\0 在常量区，p3 在栈上。</span></span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> c = <span class="number">0</span>; <span class="comment">//全局（静态）初始化区</span></span><br><span class="line">	p1 = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">10</span>);</span><br><span class="line">	p2 = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">20</span>); <span class="comment">//分配得来得 10 和 20 字节的区域就在堆区。</span></span><br><span class="line">	<span class="built_in">strcpy</span>(p1,<span class="string">&quot;123456&quot;</span>); <span class="comment">//123456\\0 放在常量区，编译器可能会将它与 p3 所向&quot;123456&quot;优化成一个地方。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-7-“引用”与指针的区别"><a href="#2-7-“引用”与指针的区别" class="headerlink" title="2.7 “引用”与指针的区别"></a>2.7 “引用”与指针的区别</h2><p>（1）引用必须被初始化，指针不必。<br>（2）引用初始化以后不能被改变，指针可以改变所指的对象。<br>（3）不存在指向空值的引用，但是存在指向空值的指针。<br>指针通过某个指针变量指向一个对象后，对它所指向的变量间接操作。程序中使用指针，程序的可读性差；而引用本身就是目标变量的别名，对引用的操作就是对目标变量的操作。</p>
<h1 id="3-宏定义"><a href="#3-宏定义" class="headerlink" title="3.宏定义"></a>3.宏定义</h1><h2 id="3-1-h-头文件中的-ifndef-define-endif-的作用"><a href="#3-1-h-头文件中的-ifndef-define-endif-的作用" class="headerlink" title="3.1 .h 头文件中的 ifndef/define/endif 的作用"></a>3.1 .h 头文件中的 ifndef/define/endif 的作用</h2><p>防止该头文件被重复引用。</p>
<h2 id="3-2-include-与-include-“file-h”的区别"><a href="#3-2-include-与-include-“file-h”的区别" class="headerlink" title="3.2 #include 与 #include “file.h”的区别"></a>3.2 #include<file.h> 与 #include “file.h”的区别</file.h></h2><p>前者是从 Standard Library 的路径寻找和引用 file.h，而后者是从当前工作路径搜寻并引用 file.h。</p>
<h2 id="3-3-什么是预编译-何时需要预编译"><a href="#3-3-什么是预编译-何时需要预编译" class="headerlink" title="3.3 什么是预编译,何时需要预编译?"></a>3.3 什么是预编译,何时需要预编译?</h2><p> <strong>预编译又称为预处理,是做些代码文本的替换工作</strong> 。处理#开头的指令,比如拷贝#include 包含的文件代码，#define 宏定义的替换,条件编译等，就是为编译做的预备工作的阶段，主要处理#开始的预编译指令，预编译指令指示了在程序正式编译前就由编译器进行的操作，可以放在程序中的任何位置。</p>
<p>c编译系统在对程序进行通常的编译之前，先进行预处理。c 提供的预处理功能主要有以下三种：</p>
<ol>
<li>宏定义</li>
<li>文件包含</li>
<li>条件编译<ol>
<li>总是使用不经常改动的大型代码体。</li>
<li>程序由多个模块组成，所有模块都使用一组标准的包含文件和相同的编译选项。在这种情况下，可以将所有包含文件预编译为一个预编译头。</li>
</ol>
</li>
</ol>
<h2 id="3-4-论述含参数的宏与函数的优缺点"><a href="#3-4-论述含参数的宏与函数的优缺点" class="headerlink" title="3.4 论述含参数的宏与函数的优缺点"></a>3.4 论述含参数的宏与函数的优缺点</h2><div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>带参宏</th>
<th>函数</th>
</tr>
</thead>
<tbody>
<tr>
<td>处理时间</td>
<td>编译时</td>
<td>程序运行时</td>
</tr>
<tr>
<td>参数类型</td>
<td>没有参数类型问题</td>
<td>定义实参、形参类型</td>
</tr>
<tr>
<td>处理过程</td>
<td>不分配内存</td>
<td>分配内存</td>
</tr>
<tr>
<td>程序长度</td>
<td>变长</td>
<td>不变</td>
</tr>
<tr>
<td>运行速度</td>
<td>不占运行时间</td>
<td>调用和返回占用时间</td>
</tr>
</tbody>
</table>
</div>
<h1 id="4-语法"><a href="#4-语法" class="headerlink" title="4.语法"></a>4.语法</h1><h2 id="4-1-结构与联合有和区别？"><a href="#4-1-结构与联合有和区别？" class="headerlink" title="4.1 结构与联合有和区别？"></a>4.1 结构与联合有和区别？</h2><p>(1) 结构和联合都是由多个不同的数据类型成员组成, 但在任何同一时刻, 联合中只存放了一个被选<br>中的成员（所有成员共用一块地址空间）, 而结构的所有成员都存在（不同成员的存放地址不同）。</p>
<p>(2) 对于联合的不同成员赋值, 将会对其它成员重写, 原来成员的值就不存在了, 而对于结构的不同成<br>员赋值是互不影响的。</p>
<h2 id="4-2-简述数组与指针的区别"><a href="#4-2-简述数组与指针的区别" class="headerlink" title="4.2 简述数组与指针的区别"></a>4.2 简述数组与指针的区别</h2><h3 id="数组要么在静态存储区被创建（如全局数组），要么在栈上被创建。指针可以随时指向任意类型的内存块。"><a href="#数组要么在静态存储区被创建（如全局数组），要么在栈上被创建。指针可以随时指向任意类型的内存块。" class="headerlink" title="数组要么在静态存储区被创建（如全局数组），要么在栈上被创建。指针可以随时指向任意类型的内存块。"></a>数组要么在静态存储区被创建（如全局数组），要么在栈上被创建。指针可以随时指向任意类型的内存块。</h3><p>(1) <strong>修改内容上的差别</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> a[] = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">a[<span class="number">0</span>] = <span class="string">&#x27;X&#x27;</span>;</span><br><span class="line"><span class="type">char</span> *p = <span class="string">&#x27;world&#x27;</span>; <span class="comment">// 注意 p 指向常量字符串</span></span><br><span class="line">p[<span class="number">0</span>] = <span class="string">&#x27;X&#x27;</span>; <span class="comment">// 编译器不能发现该错误，运行时错误</span></span><br></pre></td></tr></table></figure>
<p>(2) <strong>用运算符 sizeof 可以计算出数组的容量（字节数）。</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sizeof</span>(p);</span><br></pre></td></tr></table></figure>
<p><strong>p 为指针得到的是一个 指针变量的字节数，而不是 p 所指的内存容量</strong>。C++/C 语言没有办法知道指针所指的内存容量，除非在申请内存时记住它。注意当数组作为函数的参数进行传递时，该数组自动退化为同类型的指针。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> a[] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="type">char</span> *p = a;</span><br><span class="line">cout&lt;&lt; <span class="built_in">sizeof</span>(a) &lt;&lt; endl; <span class="comment">// 12 字节</span></span><br><span class="line">cout&lt;&lt; <span class="built_in">sizeof</span>(p) &lt;&lt; endl; <span class="comment">// 4 字节</span></span><br></pre></td></tr></table></figure>
<p>计算数组和指针的内存容量</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Func</span><span class="params">(<span class="type">char</span> a[<span class="number">100</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt; <span class="built_in">sizeof</span>(a) &lt;&lt; endl; <span class="comment">// 4 字节而不是 100 字节</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
</search>
