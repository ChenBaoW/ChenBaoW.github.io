<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C常见知识点</title>
    <url>/2024/04/01/C%E5%B8%B8%E8%A7%81%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<h1 id="1-内存方面"><a href="#1-内存方面" class="headerlink" title="1.内存方面"></a>1.内存方面</h1><h2 id="1-1-堆与栈的区别？"><a href="#1-1-堆与栈的区别？" class="headerlink" title="1.1 堆与栈的区别？"></a>1.1 <strong>堆与栈的区别？</strong></h2><p>（1）栈的空间是系统自动分配和回收，堆的空间是用户手动分配回收（malloc，calloc，realloc，free）</p>
<p>（2）栈的空间较小，堆的空间较大</p>
<p>（3）栈的地址空间往地址向下增长，堆的地址空间是由低地址到高地址</p>
<p>（4）栈的存储效率更高</p>
<h2 id="1-2-字节对齐的理解"><a href="#1-2-字节对齐的理解" class="headerlink" title="1.2 字节对齐的理解"></a>1.2 字节对齐的理解</h2><h3 id="1-2-1-什么是字节对齐？"><a href="#1-2-1-什么是字节对齐？" class="headerlink" title="1.2.1 什么是字节对齐？"></a>1.2.1 什么是字节对齐？</h3><p>字节对齐主要是针对结构体而言的，通常编译器会自动对其成员变量进行对齐，以提高数据存取的效率；</p>
<h3 id="1-2-2-字节对齐的两种方式"><a href="#1-2-2-字节对齐的两种方式" class="headerlink" title="1.2.2 字节对齐的两种方式"></a>1.2.2 字节对齐的两种方式</h3><p>默认对齐方式、指定对齐方式；</p>
<p>默认对齐方式内存分配满足以下三个条件：</p>
<ol>
<li>结构体第一个成员的地址和结构体的首地址相同；</li>
<li>结构体每个成员地址相对于结构体首地址的偏移量（offset）是该成员大小的整数倍，如果不是则编译器会在成员之间添加填充字节；</li>
<li>结构体总的大小要是其成员中最大size的整数倍，如果不是编译器会在其末尾添加填充字节。如char是1字节，short是2字节，int是4字节…</li>
</ol>
<p>指定对齐方式使用以下方式声明：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注：通过#pragma pack(n)改变C编译器的字节对齐方式</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> pack(4)         <span class="comment">//安装4字节的对齐方式</span></span></span><br></pre></td></tr></table></figure>
<p>指定对齐方式内存分配满足以下几个条件：</p>
<ol>
<li>结构体第一个成员的地址和结构体的首地址相同</li>
<li>结构体每个成员的地址偏移需要满足：N大于等于该成员的大小，那么该成员的地址偏移需满足默认对齐方式（地址偏移是其成员大小的整数倍）；Ｎ小于该成员的大小，那么该成员的地址偏移是N的整数倍。</li>
<li>结构体总的大小需要时N的整数倍，如果不是需要在结构体的末尾进行填充。</li>
<li>如果N大于结构体成员中最大成员的大小，则N不起作用，仍然按照默认方式对齐。</li>
</ol>
<p>注：在使用#pragma pack设定对齐方式一定要是2的整数幂，也就是（1，2，4，8，16，…），不然不起作用的，仍然按照默认方式对齐。</p>
<h2 id="1-3-内存泄漏和内存溢出是什么？"><a href="#1-3-内存泄漏和内存溢出是什么？" class="headerlink" title="1.3 内存泄漏和内存溢出是什么？"></a>1.3 内存泄漏和内存溢出是什么？</h2><p>（1）<strong>内存溢出：指程序申请内存时，没有足够的内存供申请者使用。</strong>或者说，给了你一块存储int类型数据的存储空间，但是你却存储long类型的数据，那么结果就是内存不够用，此时就会报错Out Of Memory,即所谓的内存溢出。</p>
<p>（2）<strong>内存泄漏：是指程序在申请内存后，无法释放已申请的内存空间。</strong>一次内存泄漏似乎不会有大的影响，但内存泄漏堆积后的后果就是内存溢出。</p>
<h2 id="1-4-全局变量和局部变量在内存中有什么不同"><a href="#1-4-全局变量和局部变量在内存中有什么不同" class="headerlink" title="1.4 全局变量和局部变量在内存中有什么不同?"></a>1.4 <strong>全局变量和局部变量在内存中有什么不同?</strong></h2><p>（1）<strong>全局变量</strong>保存在内存的全局存储区中， <strong>占用静态的存储单元</strong> ；</p>
<p>（2）<strong>局部变量</strong>保存在<strong>栈</strong>中，只有在所在函数被调用时才动态地为变量分配存储单元。</p>
<h2 id="1-5-描述内存分配方式以及它们的区别"><a href="#1-5-描述内存分配方式以及它们的区别" class="headerlink" title="1.5 描述内存分配方式以及它们的区别"></a>1.5 描述内存分配方式以及它们的区别</h2><p>（1）<strong>从静态存储区域分配</strong>。内存在程序编译的时候就已经分配好，这块内存在程序的整个运行期间都存在。例如全局变量，static 变量。<br>（2）<strong>在栈上创建</strong>。在执行函数时，函数内局部变量的存储单元都可以在栈上创建，函数执行结束时这些存储单元自动被释放。栈内存分配运算内置于处理器的指令集。<br>（3）<strong>从堆上分配，亦称动态内存分配</strong>。程序在运行的时候用 malloc 或 new 申请任意多少的内存，程序员自己负责在何时用 free 或 delete 释放内存。动态内存的生存期由程序员决定，使用非常灵活，但问题也最多。</p>
<h1 id="2-存放位置（文件，变量的生命周期）"><a href="#2-存放位置（文件，变量的生命周期）" class="headerlink" title="2.存放位置（文件，变量的生命周期）"></a>2.存放位置（文件，变量的生命周期）</h1><h2 id="2-1-局部变量和全局变量可以重名吗？"><a href="#2-1-局部变量和全局变量可以重名吗？" class="headerlink" title="2.1 局部变量和全局变量可以重名吗？"></a>2.1 局部变量和全局变量可以重名吗？</h2><p>（1）<strong>能，局部变量会屏蔽全局变量。</strong>C++中要用全局变量，需要使用 “::”(域解析符) 。C语言中局部变量可以与全局变量同名，在函数内引用这个变量时，会用到同名的局部变量，而不会用到全局变量。</p>
<p>（2）对于有些编译器而言，在同一个函数内可以定义多个同名的局部变量，比如在两个循环体内都定义一个同名的局部变量，而那个局部变量的作用域就在那个循环体内。</p>
<h2 id="2-2-const关键字"><a href="#2-2-const关键字" class="headerlink" title="2.2 const关键字"></a>2.2 const关键字</h2><h3 id="2-2-1-修饰变量"><a href="#2-2-1-修饰变量" class="headerlink" title="2.2.1 修饰变量"></a>2.2.1 修饰变量</h3><p>const的 常规用法，在变量初次定义时赋初，并用关键字const修饰，<strong>使变量只可访问，不能重新赋值修改变量。</strong></p>
<h3 id="2-2-2-修饰指针"><a href="#2-2-2-修饰指针" class="headerlink" title="2.2.2 修饰指针"></a>2.2.2 修饰指针</h3><p>（1） <strong>限制指针变量修饰</strong> ：指针变量指向的位置不能被修改。定义时，被 const 修饰的指针变量指针只能在定义时初始化，不能定义之后重新指向新的数据。</p>
<p>（2） <strong>限制指针变量指向的数据修饰【指针的解引用】</strong> ：修饰的指针变量指向的变量的值不能被修改，但是该指针可以指向其它空间。</p>
<p>（3） <strong>同时限制指针变量和指针变量指向的变量的值修饰</strong> ：指针变量指向的位置不能被修改，并且指针变量指向变量的值也不能被修改。</p>
<p>（4） <strong>修饰函数形参【指针】</strong> ：函数形参可以利用const关键字进行限制，来防止在函数内部修改指针指向的数据。</p>
<h2 id="2-3-static关键字"><a href="#2-3-static关键字" class="headerlink" title="2.3 static关键字"></a>2.3 static关键字</h2><p>（1）在函数体，一个被声明为静态的变量在这一函数被调用过程中维持其值不变。<br>（2）在模块内（但在函数体外），一个被声明为静态的变量可以被模块内所用函数访问，但不能被模块外其它函数访问。它是一个本地的全局变量。<br>（3） 在模块内，一个被声明为静态的函数只可被这一模块内的其它函数调用。那就是，这个函数被限制在声明它的模块的本地范围内使用。</p>
<h2 id="2-4-volatile关键字的作用？"><a href="#2-4-volatile关键字的作用？" class="headerlink" title="2.4 volatile关键字的作用？"></a>2.4 volatile关键字的作用？</h2><p>（1）裸机编程时，某变量是指向寄存器中某一特定地址， <strong>添加volatile的变量不进行优化处理</strong> ；</p>
<p>（2）某函数与中断函数共享全局变量时，加上volatile，让编译器不要省略该变量的访问；</p>
<p>（3）多线程中修饰共享全局变量，让编译器不要省略该变量的访问。</p>
<h2 id="2-5-内存布局中有哪些段？"><a href="#2-5-内存布局中有哪些段？" class="headerlink" title="2.5 内存布局中有哪些段？"></a>2.5 <strong>内存布局中有哪些段？</strong></h2><p>文本段(.text)、数据段(.data)、.bss段、堆(heap)、栈(stack)</p>
<p><img src="/2024/04/01/C%E5%B8%B8%E8%A7%81%E7%9F%A5%E8%AF%86%E7%82%B9/image/1698070866412.png" alt="1698070866412"></p>
<h2 id="2-6-程序的内存分配"><a href="#2-6-程序的内存分配" class="headerlink" title="2.6 程序的内存分配"></a>2.6 程序的内存分配</h2><p>一个由 c/C++编译的程序占用的内存分为以下几个部分</p>
<ol>
<li><strong>栈区（stack）</strong> —由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。</li>
<li><strong>堆区（heap）</strong>一般由程序员分配释放，若程序员不释放，程序结束时可能由 OS 回收。注意它与数据结构中的堆是两回事，分配方式倒是类似于链表，呵呵。</li>
<li><strong>全局区（静态区）（static）</strong> —全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在一块区域，未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。程序结束后由系统释放。</li>
<li><strong>文字常量区</strong> —常量字符串就是放在这里的。程序结束后由系统释放。</li>
<li><strong>程序代码区</strong> —存放函数体的二进制代码</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">例子程序</span><br><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>; <span class="comment">//全局初始化区</span></span><br><span class="line"><span class="type">char</span> *p1; <span class="comment">//全局未初始化区:bss区</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> b ; <span class="comment">//栈</span></span><br><span class="line">	<span class="type">char</span> s[] = <span class="string">&quot;abc&quot;</span>; <span class="comment">//栈</span></span><br><span class="line">	<span class="type">char</span> *p2; <span class="comment">//栈</span></span><br><span class="line">	<span class="type">char</span> *p3 = <span class="string">&quot;123456&quot;</span>; <span class="comment">//123456\\0 在常量区，p3 在栈上。</span></span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> c = <span class="number">0</span>; <span class="comment">//全局（静态）初始化区</span></span><br><span class="line">	p1 = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">10</span>);</span><br><span class="line">	p2 = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">20</span>); <span class="comment">//分配得来得 10 和 20 字节的区域就在堆区。</span></span><br><span class="line">	<span class="built_in">strcpy</span>(p1,<span class="string">&quot;123456&quot;</span>); <span class="comment">//123456\\0 放在常量区，编译器可能会将它与 p3 所向&quot;123456&quot;优化成一个地方。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-7-“引用”与指针的区别"><a href="#2-7-“引用”与指针的区别" class="headerlink" title="2.7 “引用”与指针的区别"></a>2.7 “引用”与指针的区别</h2><p>（1）引用必须被初始化，指针不必。<br>（2）引用初始化以后不能被改变，指针可以改变所指的对象。<br>（3）不存在指向空值的引用，但是存在指向空值的指针。<br>指针通过某个指针变量指向一个对象后，对它所指向的变量间接操作。程序中使用指针，程序的可读性差；而引用本身就是目标变量的别名，对引用的操作就是对目标变量的操作。</p>
<h1 id="3-宏定义"><a href="#3-宏定义" class="headerlink" title="3.宏定义"></a>3.宏定义</h1><h2 id="3-1-h-头文件中的-ifndef-define-endif-的作用"><a href="#3-1-h-头文件中的-ifndef-define-endif-的作用" class="headerlink" title="3.1 .h 头文件中的 ifndef/define/endif 的作用"></a>3.1 .h 头文件中的 ifndef/define/endif 的作用</h2><p>防止该头文件被重复引用。</p>
<h2 id="3-2-include-与-include-“file-h”的区别"><a href="#3-2-include-与-include-“file-h”的区别" class="headerlink" title="3.2 #include 与 #include “file.h”的区别"></a>3.2 #include<file.h> 与 #include “file.h”的区别</file.h></h2><p>前者是从 Standard Library 的路径寻找和引用 file.h，而后者是从当前工作路径搜寻并引用 file.h。</p>
<h2 id="3-3-什么是预编译-何时需要预编译"><a href="#3-3-什么是预编译-何时需要预编译" class="headerlink" title="3.3 什么是预编译,何时需要预编译?"></a>3.3 什么是预编译,何时需要预编译?</h2><p> <strong>预编译又称为预处理,是做些代码文本的替换工作</strong> 。处理#开头的指令,比如拷贝#include 包含的文件代码，#define 宏定义的替换,条件编译等，就是为编译做的预备工作的阶段，主要处理#开始的预编译指令，预编译指令指示了在程序正式编译前就由编译器进行的操作，可以放在程序中的任何位置。</p>
<p>c编译系统在对程序进行通常的编译之前，先进行预处理。c 提供的预处理功能主要有以下三种：</p>
<ol>
<li>宏定义</li>
<li>文件包含</li>
<li>条件编译<ol>
<li>总是使用不经常改动的大型代码体。</li>
<li>程序由多个模块组成，所有模块都使用一组标准的包含文件和相同的编译选项。在这种情况下，可以将所有包含文件预编译为一个预编译头。</li>
</ol>
</li>
</ol>
<h2 id="3-4-论述含参数的宏与函数的优缺点"><a href="#3-4-论述含参数的宏与函数的优缺点" class="headerlink" title="3.4 论述含参数的宏与函数的优缺点"></a>3.4 论述含参数的宏与函数的优缺点</h2><div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>带参宏</th>
<th>函数</th>
</tr>
</thead>
<tbody>
<tr>
<td>处理时间</td>
<td>编译时</td>
<td>程序运行时</td>
</tr>
<tr>
<td>参数类型</td>
<td>没有参数类型问题</td>
<td>定义实参、形参类型</td>
</tr>
<tr>
<td>处理过程</td>
<td>不分配内存</td>
<td>分配内存</td>
</tr>
<tr>
<td>程序长度</td>
<td>变长</td>
<td>不变</td>
</tr>
<tr>
<td>运行速度</td>
<td>不占运行时间</td>
<td>调用和返回占用时间</td>
</tr>
</tbody>
</table>
</div>
<h1 id="4-语法"><a href="#4-语法" class="headerlink" title="4.语法"></a>4.语法</h1><h2 id="4-1-结构与联合有和区别？"><a href="#4-1-结构与联合有和区别？" class="headerlink" title="4.1 结构与联合有和区别？"></a>4.1 结构与联合有和区别？</h2><p>(1) 结构和联合都是由多个不同的数据类型成员组成, 但在任何同一时刻, 联合中只存放了一个被选<br>中的成员（所有成员共用一块地址空间）, 而结构的所有成员都存在（不同成员的存放地址不同）。</p>
<p>(2) 对于联合的不同成员赋值, 将会对其它成员重写, 原来成员的值就不存在了, 而对于结构的不同成<br>员赋值是互不影响的。</p>
<h2 id="4-2-简述数组与指针的区别"><a href="#4-2-简述数组与指针的区别" class="headerlink" title="4.2 简述数组与指针的区别"></a>4.2 简述数组与指针的区别</h2><h3 id="数组要么在静态存储区被创建（如全局数组），要么在栈上被创建。指针可以随时指向任意类型的内存块。"><a href="#数组要么在静态存储区被创建（如全局数组），要么在栈上被创建。指针可以随时指向任意类型的内存块。" class="headerlink" title="数组要么在静态存储区被创建（如全局数组），要么在栈上被创建。指针可以随时指向任意类型的内存块。"></a>数组要么在静态存储区被创建（如全局数组），要么在栈上被创建。指针可以随时指向任意类型的内存块。</h3><p>(1) <strong>修改内容上的差别</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> a[] = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">a[<span class="number">0</span>] = <span class="string">&#x27;X&#x27;</span>;</span><br><span class="line"><span class="type">char</span> *p = <span class="string">&#x27;world&#x27;</span>; <span class="comment">// 注意 p 指向常量字符串</span></span><br><span class="line">p[<span class="number">0</span>] = <span class="string">&#x27;X&#x27;</span>; <span class="comment">// 编译器不能发现该错误，运行时错误</span></span><br></pre></td></tr></table></figure>
<p>(2) <strong>用运算符 sizeof 可以计算出数组的容量（字节数）。</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sizeof</span>(p);</span><br></pre></td></tr></table></figure>
<p><strong>p 为指针得到的是一个 指针变量的字节数，而不是 p 所指的内存容量</strong>。C++/C 语言没有办法知道指针所指的内存容量，除非在申请内存时记住它。注意当数组作为函数的参数进行传递时，该数组自动退化为同类型的指针。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> a[] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="type">char</span> *p = a;</span><br><span class="line">cout&lt;&lt; <span class="built_in">sizeof</span>(a) &lt;&lt; endl; <span class="comment">// 12 字节</span></span><br><span class="line">cout&lt;&lt; <span class="built_in">sizeof</span>(p) &lt;&lt; endl; <span class="comment">// 4 字节</span></span><br></pre></td></tr></table></figure>
<p>计算数组和指针的内存容量</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Func</span><span class="params">(<span class="type">char</span> a[<span class="number">100</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt; <span class="built_in">sizeof</span>(a) &lt;&lt; endl; <span class="comment">// 4 字节而不是 100 字节</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>通信种类</title>
    <url>/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="一、串口通信"><a href="#一、串口通信" class="headerlink" title="一、串口通信"></a>一、串口通信</h1><p>串口通信属于全双工，串行通信，有同步和异步通信。<br>USART：通用同步异步收发器(Universal Synchronous Asynchronous Receiver and Transmitter)是一个串行通信设备，可以灵活地与外部设备进行全双工数据交换，既可以同步通信也可以异步通信。<br>UART：通用异步收发器(Universal Asynchronous Receiver and Transmitter)，它是在 USART 基础上裁剪掉了同步通信功能（时钟同步），只有异步通信。简单区分同步和异步就是看通信时需不需要对外提供时钟输出，我们平时用的串口通信基本都是 UART。</p>
<h2 id="1-1-UART"><a href="#1-1-UART" class="headerlink" title="1.1 UART"></a>1.1 UART</h2><p>8051、STM32等MCU芯片的内部都集成了UART，两个MCU进行串口通信时，可将一个MCU的TX、RX引脚分别与另一个MCU的RX、TX引脚相连</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1699363964154.png" alt="1699363964154"></p>
<p>UART进行串口通信使用TTL电平。5V工作电压的MCU，使用0 ~ 0.5V表示逻辑0，2.5V ~ 5V表示逻辑1；3.3V工作电压的MCU，使用0 ~ 0.5V表示逻辑0，2.5V ~ 3.3V表示逻辑1。</p>
<p>UART串口通信是异步，全双工，串行通信，所以通信双方必须事先约定好通信参数，这些通信参数包括：波特率、数据位、校验位、停止位。</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1699363975769.png" alt="1699363975769"></p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1699364814032.png" alt="1699364814032"></p>
<h3 id="1-起始位、数据位、奇偶校验位、停止位"><a href="#1-起始位、数据位、奇偶校验位、停止位" class="headerlink" title="1.起始位、数据位、奇偶校验位、停止位"></a><strong>1.起始位、数据位、奇偶校验位、停止位</strong></h3><p>串口通信时，收发是一个周期一个周期进行的，每个周期传输n个二进制位。这一个周期就叫做一个通信单元，一个通信单元由：起始位+数据位+奇偶校验位+停止位组成的。</p>
<p>起始位：表示发送方要开始发送一个通信单元，起始位的定义是串口通信标准事先指定的，是由通信线上的电平变化来反映的。</p>
<p>数据位：是一个通信单元中发送的有效信息位，是本次通信真正要发送的有效数据，串口通信一次发送多少位有效数据是可以设定的（可选的有6、7、8、9，一般都是选择8位数据位，因为一般通过串口发送的文字信息都是ASCII码编码，而ASCII码中一个字符刚好编码为8位）。</p>
<p>校验位：是用来校验数据位，以防止数据位出错的。</p>
<p>停止位：是发送方用来表示本通信单元结束标志的，停止位的定义是串口通信标准事先指定的，是由通信线上的电平变化来反映的。常见的有1位停止位、1.5位停止位、2位停止位等，一般使用的是1位停止位。</p>
<h3 id="2-波特率"><a href="#2-波特率" class="headerlink" title="2.波特率"></a><strong>2.波特率</strong></h3><p>波特率，指的是串口通信的速率，也就是每秒钟可以传输多少个二进制位，单位为bit/s。譬如，每秒钟可以传输9600个二进制位，它传输所用的时间</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1699364286832.png" alt="1699364286832"></p>
<p>也就是传输一个二进制位需要的时间是1/9600秒，也就是104us。</p>
<p>串口通信的波特率不能随意设定，而应该是在一些值中去选择。一般最常见的波特率是9600或115200（低端单片机如51常用9600，高端单片机和嵌入式SOC常用</p>
<p>115200）。波特率不能随意指定，主要是因为：通信双方必须事先设定相同的波特率才能成功通信，如果发送方和接收方按照不同的波特率通信则根本收不到。</p>
<h2 id="1-2-RS232通信"><a href="#1-2-RS232通信" class="headerlink" title="1.2 RS232通信"></a>1.2 RS232通信</h2><p>RS232标准使用+5 V ～ +15 V表示逻辑0，-5V ～ -15 V表示逻辑1。相比TTL电平，RS232电平提高了串口通信的抗干扰能力，增大了串口通信的距离。台式PC一般都带有RS232标准接口，MCU按RS232标准进行串口通信时，需加max232电平转换芯片。</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1699364589028.png" alt="1699364589028"></p>
<h2 id="1-3-RS485通信"><a href="#1-3-RS485通信" class="headerlink" title="1.3 RS485通信"></a>1.3 RS485通信</h2><p>RS485标准使用差分电平表示逻辑0或1，当A与B的电压差为+2v ~ +6v 时表示逻辑1，当A与B的电压差为-2v ~ -6v时表示逻辑0。RS485为半双工通信，即通信节点不能同时进行数据的接收和发送。相比RS232电平，RS485电平使串口通信的抗干扰能力更强，通信距离更远。MCU按RS485标准进行串口通信时，需加max485电平转换芯片。</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1699364633791.png" alt="1699364633791"></p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1699364752080.png" alt="1699364752080"></p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1699367010762.png" alt="1699367010762"></p>
<h1 id="二、I2C总线（Inter-Integrated-Circuit）"><a href="#二、I2C总线（Inter-Integrated-Circuit）" class="headerlink" title="二、I2C总线（Inter Integrated Circuit）"></a><strong>二、I2C总线（Inter Integrated Circuit）</strong></h1><p>I2C总线是一种同步、双向、半双工的两线式串行接口总线。这里，半双工的含义是指在任意给定的时刻，只有一个方向上是可以通信的。I2C总线最早由Philips半导体公司于20世纪80年代研发面市。I2C最初的设计目标是为微处理器/微控制器系统与电视机外围芯片之间的连接提供简单的方法。</p>
<h2 id="2-1-物理接口"><a href="#2-1-物理接口" class="headerlink" title="2.1 物理接口"></a>2.1 物理接口</h2><h3 id="2-1-1-接线"><a href="#2-1-1-接线" class="headerlink" title="2.1.1 接线"></a>2.1.1 接线</h3><p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1699365266267.png" alt="1699365266267"></p>
<p>I2C总线由两条总线组成：串行时钟线SCL和串行数据线SDA。</p>
<ul>
<li>SCL线——负责产生同步时钟脉冲。</li>
<li>SDA线——负责在设备间传输串行数据。</li>
</ul>
<h3 id="2-1-2-物理接口示意图"><a href="#2-1-2-物理接口示意图" class="headerlink" title="2.1.2 物理接口示意图"></a>2.1.2 物理接口示意图</h3><p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1699365946231.png" alt="1699365946231"></p>
<p>I2C的连线总是要通过电阻上拉至输入电压，I2C的连线工作于三种速度：<strong>高速，快速，慢速</strong>。</p>
<p>I2C总线是共享的总线系统，因此可以将多个I2C设备连接到该系统上。连接到I2C总线上的设备既可以用作主设备，也可以用作从设备。主设备负责控制通信，通过对数据传输进行初始化/终止化，来发送数据并产生所需的同步时钟脉冲。从设备则是等待来自主设备的命令，并响应命令接收。主设备和从设备都可以作为发送设备或接收设备。无论主设备是作为发送设备还是接收设备，同步时钟信号都只能由主设备产生。在相同的总线上，I2C支持多个主设备的同时存在。图1-1显示了I2C总线上主设备和从设备的连接关系。</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1699366167296.png" alt="1699366167296"></p>
<h2 id="2-2-i2c简易时序图"><a href="#2-2-i2c简易时序图" class="headerlink" title="2.2 i2c简易时序图"></a>2.2 i2c简易时序图</h2><ul>
<li>启动条件<br>当SCL为高电平时，SDA从高电平向低电平切换</li>
<li>停止条件<br>当SCL是高电平时，SDA由低电平向高电平切换</li>
<li>地址帧<br>每个从属设备唯一的7位或10位序列，用于主从设备之间的地址识别。</li>
<li>读/写位<br>一位，如果主机是向从机发送数据则为低电平，请求数据则为高电平</li>
<li>ACK/NACK<br>消息中的每个帧后均有一个ACK/NACK位。如果成功接收到地址帧或数据帧，接收设备会返回一个ACK位用于表示确认。</li>
</ul>
<h3 id="2-2-1-启动信号与停止信号的时序图"><a href="#2-2-1-启动信号与停止信号的时序图" class="headerlink" title="2.2.1 启动信号与停止信号的时序图"></a>2.2.1 启动信号与停止信号的时序图</h3><p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1699366574897.png" alt="1699366574897"></p>
<h3 id="2-2-2-数据位发送"><a href="#2-2-2-数据位发送" class="headerlink" title="2.2.2 数据位发送"></a>2.2.2 数据位发送</h3><p>当SCL为高电平时读取的SDA信号为有效信号，SCL低电平为数据无效，所以通常用来SDA的高低电平的转换。</p>
<p>在I2C总线上传送的每一位数据都有一个时钟脉冲相对应（或同步控制），即在SCL串行时钟的配合下，在SDA上逐位地串行传送每一位数据。进行数据传送时，<strong>在SCL呈现高电平期间，SDA上的电平必须保持稳定，低电平为数据0，高电平为数据1</strong>。<strong>只有在SCL为低电平期间，才允许SDA上的电平改变状态</strong>。逻辑0的电平为低电压，而逻辑1则为高电平。时序如下图所示</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1699366722339.png" alt="1699366722339"></p>
<h2 id="2-3-工作原理"><a href="#2-3-工作原理" class="headerlink" title="2.3 工作原理"></a>2.3 工作原理</h2><p>I2C的数据传输是以多个msg的形式进行。每个msg包括：从机二进制地址帧、以及一个或者多个数据帧、开始条件和停止条件，读/写位和数据帧之间的ACK/NACK位：</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1699365343036.png" alt="1699365343036"></p>
<h2 id="2-4-总线连接"><a href="#2-4-总线连接" class="headerlink" title="2.4 总线连接"></a>2.4 总线连接</h2><p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1699364921358.png" alt="1699364921358"></p>
<p>当总线空闲时，SDA 和SCL 都处于高电平状态，当主机要和某个从机通讯时，会先发送一个开始条件，然后发送从机地址和读写控制位，接下来传输数据（主机发送或者接收数据），数据传输结束时主机会发送停止条件。传输的每个字节为8 位，高位在前，低位在后。</p>
<p>　　　　• 开始条件： SCL 为高电平时，主机将SDA 拉低，表示数据传输即将开始。</p>
<p>　　　　• 从机地址： 主机发送的第一个字节为从机地址，高7 位为地址，<strong>最低位为R/W 读写控制位，1 表示读操作，0 表示写操作</strong>。一般从机地址有7 位地址模式和10 位地址模式两种，如果是10 位地址模式，第一个字节的头7 位是11110XX 的组合，其中最后两位（XX）是10 位地址的两个最高位，第二个字节为10 位从机地址的剩下8 位，如下图所示：</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1699364966732.png" alt="1699364966732"></p>
<p>• 应答信号： 每传输完成一个字节的数据，接收方就需要回复一个ACK（acknowledge）。写数据时由从机发送ACK，读数据时由主机发送ACK。当主机读到最后一个字节数据时，可发送NACK（Notacknowledge）然后跟停止条件。</p>
<p>　　　　• 数据： 从机地址发送完后可能会发送一些指令，依从机而定，然后开始传输数据，由主机或者从机发送，每个数据为8 位，数据的字节数没有限制。</p>
<p>　　　　• 重复开始条件： 在一次通信过程中，主机可能需要和不同的从机传输数据或者需要切换读写操作时，主机可以再发送一个开始条件。</p>
<p>　　　　• 停止条件： 在SDA 为低电平时，主机将SCL 拉高并保持高电平，然后在将SDA 拉高，表示传输结束。</p>
<h2 id="2-5-传输步骤"><a href="#2-5-传输步骤" class="headerlink" title="2.5 传输步骤"></a>2.5 传输步骤</h2><ol>
<li>在SCL线为高电平时，主机通过将SDA线从高电平切换到低电平来启动总线通信。</li>
<li>主机向总线发送要与之通信的从机的7位或10位地址，以及读/写位</li>
<li>每个从机将主机发送的地址与其自己的地址进行比较。如果地址匹配，则从机通过将SDA线拉低一位返回一个ACK位。如果主机的地址与从机的地址不匹配，则从机将SDA线拉高。</li>
<li>主机发送或接收数据帧；</li>
<li>传输完每个数据帧后，接收设备将另一个ACK位返回给发送方，以确认已成功接收到该帧；</li>
<li>随后主机将SCL切换为高电平，然后再将SDA切换为高电平，从而向从机发送停止条件。</li>
</ol>
<h2 id="2-6-I2C优点"><a href="#2-6-I2C优点" class="headerlink" title="2.6 I2C优点"></a>2.6 I2C优点</h2><p>1.仅仅使用两根线</p>
<p>2.支持多个主机和从机</p>
<p>3.硬件比UART更简单</p>
<h2 id="2-7-I2C缺点"><a href="#2-7-I2C缺点" class="headerlink" title="2.7 I2C缺点"></a>2.7 I2C缺点</h2><p><strong>1.数据传输比SPI慢</strong></p>
<p><strong>2.数据帧大小限制为8位</strong></p>
<h1 id="三、SPI总线（Serial-Peripheral-Interface）"><a href="#三、SPI总线（Serial-Peripheral-Interface）" class="headerlink" title="三、SPI总线（Serial Peripheral Interface）"></a>三、<strong>SPI总线（Serial Peripheral Interface）</strong></h1><p>SPI是串行外设接口(Serial Peripheral Interface)的缩写。是 Motorola（摩托罗拉）公司推出的一种同步串行接口技术，是一种高速的，全双工，同步的通信总线。SPI的特点就是传输熟读很快。</p>
<h2 id="3-1-硬件接口"><a href="#3-1-硬件接口" class="headerlink" title="3.1 硬件接口"></a>3.1 硬件接口</h2><p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1699367194316.png" alt="1699367194316"></p>
<p>（1）主设备出、从设备入（Master Out Slave In，MOSI）：由主设备向从设备传输数据的信号线，也称为从设备输入（Slave Input/Slave Data In，SI/SDI）。</p>
<p>（2）主设备入、从设备出（Master In Slave Out，MISO）：由从设备向主设备传输数据的信号线，也称为从设备输出（Slave Output/Slave Data Out，SO/SDO）。</p>
<p>（3）串行时钟（Serial Clock，SCLK）：传输时钟信号的信号线。</p>
<p>（4）从设备选择（Slave Select，SS）：用于选择从设备的信号线，低电平有效。</p>
<p>下图显示了单个主机和单个从机之间的典型SPI连接。</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1699425195202.png" alt="1699425195202"></p>
<h2 id="3-2-通信原理"><a href="#3-2-通信原理" class="headerlink" title="3.2 通信原理"></a>3.2 通信原理</h2><h3 id="3-2-1-采用主-从模式-Master-Slave-的控制方式"><a href="#3-2-1-采用主-从模式-Master-Slave-的控制方式" class="headerlink" title="3.2.1 采用主-从模式(Master-Slave) 的控制方式"></a>3.2.1 采用主-从模式(Master-Slave) 的控制方式</h3><p>SPI 规定了两个 SPI 设备之间通信必须由主设备 (Master) 来控制次设备 (Slave). 一个 Master 设备可以通过提供 Clock 以及对 Slave 设备进行片选 (Slave Select) 来控制多个 Slave 设备, SPI 协议还规定 Slave 设备的 Clock 由 Master 设备通过 SCK 管脚提供给 Slave 设备, Slave 设备本身不能产生或控制 Clock, 没有 Clock 则 Slave 设备不能正常工作。</p>
<h3 id="3-2-2-采用同步方式-Synchronous-传输数据"><a href="#3-2-2-采用同步方式-Synchronous-传输数据" class="headerlink" title="3.2.2 采用同步方式(Synchronous)传输数据"></a>3.2.2 采用同步方式(Synchronous)传输数据</h3><p>Master 设备会根据将要交换的数据来产生相应的时钟脉冲(Clock Pulse), 时钟脉冲组成了时钟信号(Clock Signal) , 时钟信号通过时钟极性 (CPOL) 和 时钟相位 (CPHA) 控制着两个 SPI 设备间何时数据交换以及何时对接收到的数据进行采样, 来保证数据在两个设备之间是同步传输的.</p>
<h3 id="3-2-3-数据交换-Data-Exchanges"><a href="#3-2-3-数据交换-Data-Exchanges" class="headerlink" title="3.2.3 数据交换(Data Exchanges)"></a>3.2.3 数据交换(Data Exchanges)</h3><p>SPI 设备间的数据传输之所以又被称为数据交换, 是因为 SPI 协议规定一个 SPI 设备不能在数据通信过程中仅仅只充当一个 “发送者(Transmitter)” 或者 “接收者(Receiver)”. 在每个 Clock 周期内, SPI 设备都会发送并接收一个 bit 大小的数据, 相当于该设备有一个 bit 大小的数据被交换了。</p>
<p>一个 Slave 设备要想能够接收到 Master 发过来的控制信号, 必须在此之前能够被 Master 设备进行访问 (Access). 所以, Master 设备必须首先通过 SS/CS pin 对 Slave 设备进行片选, 把想要访问的 Slave 设备选上。</p>
<p>在数据传输的过程中, 每次接收到的数据必须在下一次数据传输之前被采样. 如果之前接收到的数据没有被读取, 那么这些已经接收完成的数据将有可能会被丢弃, 导致 SPI 物理模块最终失效. 因此, 在程序中一般都会在 SPI 传输完数据后, 去读取 SPI 设备里的数据, 即使这些数据(Dummy Data)在我们的程序里是无用的.</p>
<h2 id="3-3-SPI协议总结"><a href="#3-3-SPI协议总结" class="headerlink" title="3.3 SPI协议总结"></a>3.3 SPI协议总结</h2><ol>
<li>三根线（SDO,SDI,SCLK）1对1传输可以省CS.</li>
<li>全双工：这里的全双工可串口还不同，不能同时收发。SCLK由主机控制，从机不能主动给主机发数据。感觉类似半工。</li>
<li>数据发送位数没有要求，而且可以中断发送然后续上。</li>
<li>一个上降沿+上升沿为1个数据。</li>
<li>没有应答机制，也没有硬件校验机制。</li>
<li>可以1主多从，靠CS片选使能。</li>
<li>同步通信。</li>
<li>速度可达几Mbps</li>
</ol>
<p>SPI 协议定义了通信的起始信号、停止信号、数据有效性、时钟同步等。它的通讯时序如下：</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1699426049687.png" alt="1699426049687"></p>
<p>这是一个主机的通信时序，信号线 NSS、SCK、MOSI 都是由主机控制，MISO 是由从机进行控制。其中 MOSI 和 MISO 上的数据仅在 NSS 为低时才有效，并且每个SCK 时钟周期只交换一位数据。</p>
<p>他的每一部分组成分别如下：</p>
<p>（1）起始信号</p>
<p>SPI通信时序图中的①为通信的起始信号，由主机控制NSS从高电平到低电平，从而选择要进行通信的从机，再通过主机产生时钟信号SCK，启动一次数据的传输。如下图：</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1699426093533.png" alt="1699426093533"></p>
<p>（2）停止信号</p>
<p>SPI通信时序图中的⑥为通信的起始信号，由主机控制NSS从低电平到高电平，从而结束一次数据的传输。如下图：</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1699426118135.png" alt="1699426118135"></p>
<p>（3）数据有效性</p>
<p>SPI 在 SCK 时钟的同步下进行数据的准备和采样，如通信时序图的②③④⑤所示。在 NSS 为低的情况时，在 SCK 的上升沿时 MISO 和 MOSI 进行数据准备，SCK 的下降沿时读取 MISO 和 MOSI 上的数据。在 NSS 为高时，MISO 和MOSI 上的数据无效。</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1699426132247.png" alt="1699426132247"></p>
<p>（4）时钟的同步</p>
<p>SPI 的数据传输是需要 SCK 时钟信号严格同步的，每一个 SCK 周期只传输一位数据，这一个周期里要完成数据的准备和采样，且数据的输入和输出是同时进行的。如下图：</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1699426147469.png" alt="1699426147469"></p>
<p>SPI中数据是MSB(高位) 先行或 LSB(低位)先行，在协议中是没有硬性规定，只需通信双方保持统一即可。</p>
<p>注意：SPI 一次数据传输可以是 8 位或 16 位为单位，每次传输的单位数不受限制。</p>
<h2 id="3-4-传输过程"><a href="#3-4-传输过程" class="headerlink" title="3.4 传输过程"></a>3.4 传输过程</h2><ul>
<li>主机先将 <code>NSS</code>信号拉低，这样保证开始接收数据；</li>
<li>当<strong>接收端</strong>检测到时钟的边沿信号时，它将立即读取<strong>数据线</strong>上的信号，这样就得到了一位数据（1 <code>bit</code>）;<br>由于时钟是随数据一起发送的，因此指定 <strong>数据的传输速度并不重要</strong> ，尽管设备将具有可以运行的最高速度（稍后我们将讨论选择合适的时钟边沿和速度）。</li>
<li><strong>主机</strong>发送到<strong>从机</strong>时：主机产生相应的时钟信号，然后数据<strong>一位一位</strong>地将从 <code>MOSI</code>信号线上进行发送到从机；</li>
<li><strong>主机</strong>接收<strong>从机</strong>数据：如果从机需要将数据发送回主机，则主机将继续生成预定数量的时钟信号，并且从机会将数据通过 <code>MISO</code>信号线发送；</li>
</ul>
<p>具体如下图所示；</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1699425109015.png" alt="1699425109015"></p>
<blockquote>
<p>注意，SPI是“全双工”（具有单独的发送和接收线路），因此可以在同一时间发送和接收数据，另外SPI的接收硬件可以是一个简单的移位寄存器。这比异步串行通信所需的完整UART要简单得多，并且更加便宜；</p>
</blockquote>
<h2 id="3-5-SPI时钟"><a href="#3-5-SPI时钟" class="headerlink" title="3.5 SPI时钟"></a>3.5 SPI时钟</h2><h3 id="3-5-1-时钟极性-CKP-Clock-Polarity"><a href="#3-5-1-时钟极性-CKP-Clock-Polarity" class="headerlink" title="3.5.1 时钟极性 CKP/Clock Polarity"></a>3.5.1 时钟极性 CKP/Clock Polarity</h3><p>除了配置串行时钟速率（频率）外，SPI主设备还需要配置 <strong>时钟极性</strong> 。</p>
<p>根据硬件制造商的命名规则不同，时钟极性通常写为<strong>CKP</strong>或 <strong>CPOL</strong> 。时钟极性和相位共同决定读取数据的方式，比如信号上升沿读取数据还是信号下降沿读取数据；</p>
<p><strong>CKP</strong>可以配置为1或0。这意味着您可以根据需要将时钟的默认状态（IDLE）设置为高或低。极性反转可以通过简单的逻辑逆变器实现。您必须参考设备的数据手册才能正确设置CKP和CKE。</p>
<ul>
<li><code>CKP = 0</code>：时钟空闲 <code>IDLE</code>为低电平 <code>0</code>；</li>
<li><code>CKP = 1</code>：时钟空闲 <code>IDLE</code>为高电平 <code>1</code>；</li>
</ul>
<h3 id="3-5-2-时钟相位-CKE-Clock-Phase-Edge"><a href="#3-5-2-时钟相位-CKE-Clock-Phase-Edge" class="headerlink" title="3.5.2 时钟相位 CKE /Clock Phase (Edge)"></a><strong>3.5.2 时钟相位 CKE /Clock Phase (Edge)</strong></h3><p>除配置串行时钟速率和极性外，SPI主设备还应配置时钟相位（或边沿）。根据硬件制造商的不同，时钟相位通常写为<strong>CKE</strong>或 <strong>CPHA</strong> ；</p>
<p>顾名思义，时钟相位/边沿，也就是采集数据时是在时钟信号的具体相位或者边沿；</p>
<ul>
<li><code>CKE = 0</code>：在时钟信号 <code>SCK</code>的第一个跳变沿采样；</li>
<li><code>CKE = 1</code>：在时钟信号 <code>SCK</code>的第二个跳变沿采样；</li>
</ul>
<h3 id="3-5-3-时钟配置总结"><a href="#3-5-3-时钟配置总结" class="headerlink" title="3.5.3 时钟配置总结"></a><strong>3.5.3 时钟配置总结</strong></h3><p>综上几种情况，下图总结了所有时钟配置组合，并突出显示了实际采样数据的时刻；</p>
<blockquote>
<p>其中黑色线为采样数据的时刻；<br>蓝色线为SCK时钟信号；</p>
</blockquote>
<p>具体如下图所示；</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1699425267948.png" alt="1699425267948"></p>
<h3 id="3-5-4-模式编号"><a href="#3-5-4-模式编号" class="headerlink" title="3.5.4 模式编号"></a><strong>3.5.4 模式编号</strong></h3><p>SPI的时钟极性和相位的配置通常称为  <strong>SPI模式</strong> ，所有可能的模式都遵循以下约定；具体如下表所示；</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>SPI Mode</th>
<th>CPOL</th>
<th>CPHA</th>
</tr>
</thead>
<tbody>
<tr>
<td>0 [00]</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>1 [01]</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>2 [10]</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>3 [11]</td>
<td>1</td>
<td>1</td>
</tr>
</tbody>
</table>
</div>
<p>除此之外，我们还应该仔细检查微控制器数据手册中包含的模式表，以确保一切正常。</p>
<h2 id="3-6-总线结构"><a href="#3-6-总线结构" class="headerlink" title="3.6 总线结构"></a>3.6 总线结构</h2><h3 id="3-6-1-单从机模式"><a href="#3-6-1-单从机模式" class="headerlink" title="3.6.1 单从机模式"></a>3.6.1 单从机模式</h3><p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1699425967885.png" alt="1699425967885"></p>
<h3 id="3-6-2-多从机模式"><a href="#3-6-2-多从机模式" class="headerlink" title="3.6.2 多从机模式"></a>3.6.2 <strong>多从机模式</strong></h3><p>前面说到SPI总线必须有一个主机，可以有多个从机，那么具体连接到SPI总线的方法有以下两种：</p>
<h4 id="多NSS"><a href="#多NSS" class="headerlink" title="多NSS"></a><strong>多NSS</strong></h4><ol>
<li>通常，每个从机都需要一条单独的SS线。</li>
<li>如果要和特定的从机进行通讯，可以将相应的 <code>NSS</code>信号线拉低，并保持其他 <code>NSS</code>信号线的状态为高电平；如果同时将两个 <code>NSS</code>信号线拉低，则可能会出现乱码，因为从机可能都试图在同一条 <code>MISO</code>线上传输数据，最终导致接收数据乱码。</li>
</ol>
<p>具体连接方式如下图所示；</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1699425587349.png" alt="1699425587349"></p>
<h4 id="菊花链"><a href="#菊花链" class="headerlink" title="菊花链"></a><strong>菊花链</strong></h4><p>在数字通信世界中，在设备信号（总线信号或中断信号）以串行的方式从一 个设备依次传到下一个设备，不断循环直到数据到达目标设备的方式被称为 <strong>菊花链</strong> 。</p>
<ol>
<li>菊花链的最大缺点是因为是信号串行传输，所以一旦数据链路中的某设备发生故障的时候，它下面优先级较低的设备就不可能得到服务了；</li>
<li>另一方面，距离主机越远的从机，获得服务的优先级越低，所以需要安排好从机的优先级，并且设置总线检测器，如果某个从机超时，则对该从机进行短路，防止单个从机损坏造成整个链路崩溃的情况；</li>
</ol>
<p>具体的连接如下图所示；</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1699425637860.png" alt="1699425637860"></p>
<blockquote>
<p>其中红线加粗为数据的流向；</p>
</blockquote>
<p>所以最终的数据流向图可以表示为：</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1699425667413.png" alt="1699425667413"></p>
<blockquote>
<p>SCK为时钟信号，8clks表示8个边沿信号；<br>其中D为数据，X为无效数据；</p>
</blockquote>
<p>所以不难发现，菊花链模式充分使用了SPI其移位寄存器的功能，整个链充当通信移位寄存器，每个从机在下一个时钟周期将输入数据复制到输出。</p>
<h2 id="3-7-优缺点"><a href="#3-7-优缺点" class="headerlink" title="3.7 优缺点"></a><strong>3.7 优缺点</strong></h2><h3 id="SPI通讯的优势"><a href="#SPI通讯的优势" class="headerlink" title="SPI通讯的优势"></a><strong>SPI通讯的优势</strong></h3><p>使SPI作为串行通信接口脱颖而出的原因很多；</p>
<ul>
<li>全双工串行通信；</li>
<li>高速数据传输速率。</li>
<li>简单的软件配置；</li>
<li>极其灵活的数据传输，不限于8位，它可以是任意大小的字；</li>
<li>非常简单的硬件结构。从站不需要唯一地址（与I2C不同）。从机使用主机时钟，不需要精密时钟振荡器/晶振（与UART不同）。不需要收发器（与CAN不同）。</li>
</ul>
<h3 id="SPI的缺点"><a href="#SPI的缺点" class="headerlink" title="SPI的缺点"></a><strong>SPI的缺点</strong></h3><ul>
<li>没有硬件从机应答信号（主机可能在不知情的情况下无处发送）；</li>
<li>通常仅支持一个主设备；</li>
<li>需要更多的引脚（与I2C不同）；</li>
<li>没有定义硬件级别的错误检查协议；</li>
<li>与RS-232和CAN总线相比，只能支持非常短的距离；</li>
</ul>
<h1 id="四、Can"><a href="#四、Can" class="headerlink" title="四、Can"></a>四、Can</h1><h2 id="4-1-CAN基础知识"><a href="#4-1-CAN基础知识" class="headerlink" title="4.1 CAN基础知识"></a>4.1 CAN基础知识</h2><h3 id="4-1-1-CAN的一些基本概念"><a href="#4-1-1-CAN的一些基本概念" class="headerlink" title="4.1.1 CAN的一些基本概念"></a>4.1.1 CAN的一些基本概念</h3><p>什么是CAN总线</p>
<p>CAN 是 Controller Area Network 的缩写，是 ISO 国际标准化的串行通信协议。通俗来讲，CAN总线就是一种传输数据的线，用于在不同的ECU之间传输数据。<br>CAN总线有两个ISO国际标准：ISO11898 和 ISO11519。其中：</p>
<p>ISO11898 定义了通信速率为 125 kbps～1 Mbps 的高速 CAN 通信标准，属于闭环总线，传输速率可达1Mbps，总线长度 ≤ 40米。<br>ISO11519 定义了通信速率为 10～125 kbps 的低速 CAN 通信标准，属于开环总线，传输速率为40kbps时，总线长度可达1000米。</p>
<blockquote>
<p>Tips: &lt;总线的传输速率&gt;：又称为总线的通信速率，指的是位速率。或称为比特率（和波特率不是一回事），表示的是：单位时间内，通信线路上传输的二进制位的数量，其基本单位是 bps 或者 b/s (bit per second)。</p>
</blockquote>
<h3 id="4-1-2-Can物理层"><a href="#4-1-2-Can物理层" class="headerlink" title="4.1.2 Can物理层"></a>4.1.2 Can物理层</h3><p>与I2C、SPI等具有时钟信号的同步通讯方式不同，CAN通讯并不是以时钟信号来进行同步的，它是一种异步通讯，只具有CAN_High和CAN_Low两条信号线，共同构成一组差分信号线，<strong>以差分信号的形式进行通讯。</strong></p>
<h3 id="4-1-3-总线网络"><a href="#4-1-3-总线网络" class="headerlink" title="4.1.3 总线网络"></a><strong>4.1.3 总线网络</strong></h3><p>CAN物理层的形式主要有两种：</p>
<p>高速模式（125k～1m）</p>
<p>低速模式（10k～125k）</p>
<p>下图中，左边是高速CAN总线的拓扑结构，右边是低速CAN总线的拓扑结构。</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1699426788263.png" alt="1699426788263"></p>
<p>如图中所示，CAN总线包括CAN_H 和 CAN_L 两根线。节点通过<strong>CAN控制器</strong>和<strong>CAN收发器</strong>连接到CAN总线上。</p>
<h3 id="4-1-4-can信号表示"><a href="#4-1-4-can信号表示" class="headerlink" title="4.1.4 can信号表示"></a>4.1.4 can信号表示</h3><p>在CAN总线上，利用CAN_H和CAN_L两根线上的电位差来表示CAN信号。CAN总线上的电位差分为<strong>显性电平</strong>和 <strong>隐性电平</strong> 。其中<strong>显性电平</strong>为逻辑 <strong>0</strong> ，<strong>隐性电平</strong>为逻辑 <strong>1</strong> 。</p>
<p>ISO11898标准（125kbps ~ 1Mbps）和ISO11519标准（10kbps ~ 125kbps）中CAN信号的表示分别如下所示：</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1699426829639.png" alt="1699426829639"></p>
<h3 id="4-1-5-can信号传输"><a href="#4-1-5-can信号传输" class="headerlink" title="4.1.5 can信号传输"></a>4.1.5 can信号传输</h3><p><strong>发送过程：</strong></p>
<p>CAN控制器将CPU传来的信号转换为逻辑电平（即<strong>逻辑0-显性电平</strong>或者 <strong>逻辑1-隐性电平</strong> ）。CAN发射器接收逻辑电平之后，再将其转换为差分电平输出到CAN总线上。</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1699426937008.png" alt="1699426937008"></p>
<p><strong>接收过程：</strong></p>
<p>CAN接收器将CAN_H 和 CAN_L 线上传来的差分电平转换为逻辑电平输出到CAN控制器，CAN控制器再把该逻辑电平转化为相应的信号发送到CPU上。</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1699426950445.png" alt="1699426950445"></p>
<p>概括的讲：</p>
<ul>
<li>发送方通过 <strong>使总线电平发生变化</strong> ，将其信息传递到CAN总线上。</li>
<li>接收方通过监听总线电平，将总线上的消息读入自己的接收器。</li>
</ul>
<h2 id="4-2-can通信的特点"><a href="#4-2-can通信的特点" class="headerlink" title="4.2 can通信的特点"></a>4.2 can通信的特点</h2><h3 id="4-2-1-多主工作方式"><a href="#4-2-1-多主工作方式" class="headerlink" title="4.2.1 多主工作方式"></a>4.2.1 <strong><strong>多主工作方式</strong></strong></h3><p>所谓多主工作方式，指的是：总线上的所有节点没有主从之分，大家都处于平等的地位。反应在数据传输上，即是：在总线空闲状态，任意节点都可以向总线上发送消息。</p>
<blockquote>
<p><strong>&lt;总线空闲状态&gt;</strong> ：</p>
<p>Tips:</p>
<p>当总线上的上出现 <strong>连续的11位隐性电平</strong> ，那么总线就处于空闲状态。也就是说对于任意一个节点而言，只要它监听到总线上连续出现了11位隐性电平，那么该节点就会认为总线当前处于空闲状态，它就会立即向总线上发送自己的报文。 至于为什么连续出现11位隐性电平，就可以判定+总线处于空闲状态，这个问题可以结合CAN协议的帧结构来进行理解。</p>
</blockquote>
<p>在多主工作方式下：</p>
<ul>
<li><p>最先向总线发送消息的节点获得总线的发送权；</p>
</li>
<li><p>当多个节点同时向总线发送消息时，所发送消息的优先权高的那个节点获得总线的发送权。</p>
<blockquote>
<p>例如：Node_A和Node_B同时向总线发送各自的消息Msg_1和Msg_2，如果Msg_1的优先级比Msg_2高，那么Node_A就获得了总线的发送权。</p>
</blockquote>
</li>
</ul>
<h3 id="4-2-2-非破坏性位仲裁机制"><a href="#4-2-2-非破坏性位仲裁机制" class="headerlink" title="4.2.2 非破坏性位仲裁机制"></a><strong><strong>4.2.2 非破坏性位仲裁机制</strong></strong></h3><p>在CAN协议中，所有的消息都以固定的帧格式发送。当多个节点同时向总线发送消息时，对各个消息的标识符（即ID号）进行 <strong>逐位仲裁</strong> ，如果某个节点发送的消息仲裁获胜，那么这个节点将获取总线的发送权，仲裁失败的节点则立即停止发送并转变为监听（接收）状态。</p>
<blockquote>
<p>例如：Node_A和Node_B同时向总线发送各自的消息Msg_1和Msg_2，那么对Msg_1的ID号ID_1和Msg_2的ID号ID_2进行逐位仲裁，如果仲裁结果是：ID_1的优先级比ID_2高，那么Msg_1在仲裁中获胜，于是发出Msg_1这条报文的节点Node_A就获得了总线的发送权。同时，Msg_2在仲裁中失败，于是Node_B就转换到监听总线电平的状态。</p>
</blockquote>
<p>这种仲裁机制既 <strong>不会造成已发送数据的延迟</strong> ，也<strong>不会破坏已经发送的数据</strong>，所以称为非破坏性仲裁机制。</p>
<p><a href="https://blog.csdn.net/weixin_40528417/article/details/79534483">https://blog.csdn.net/weixin_40528417/article/details/79534483</a></p>
<h3 id="4-2-3-系统的柔性"><a href="#4-2-3-系统的柔性" class="headerlink" title="4.2.3 系统的柔性"></a><strong><strong>4.2.3 系统的柔性</strong></strong></h3><p>CAN总线上的节点 <strong>没有“地址”的概念</strong> ，因此在总线上增加节点时，不会对总线上已有节点的软硬件及应用层造成影响。</p>
<h3 id="4-2-4-通信速度"><a href="#4-2-4-通信速度" class="headerlink" title="4.2.4 通信速度"></a><strong><strong>4.2.4 通信速度</strong></strong></h3><p>在同一条CAN线上，所有节点的通信速度（位速率）必须相同，如果两条不同通信速度总线上的节点想要实现信息交互，必须通过网关。</p>
<blockquote>
<p>例如：汽车上一般有两条CAN总线：500kbps的驱动系统CAN总线和125kbps的舒适系统CAN总线，如果驱动系统CAN总线上的发动机节点要把自己的转速信息发送给舒适系统CAN总线上的转速表节点，那么这两条总线必须通过网关相连。</p>
</blockquote>
<h3 id="4-2-5-数据传输方式"><a href="#4-2-5-数据传输方式" class="headerlink" title="4.2.5 数据传输方式"></a><strong><strong>4.2.5 数据传输方式</strong></strong></h3><p>CAN总线可以实现一对一，一对多以及广播的数据传输方式，这依赖于验收滤波技术。</p>
<h3 id="4-2-6-远程数据请求"><a href="#4-2-6-远程数据请求" class="headerlink" title="4.2.6 远程数据请求"></a><strong><strong>4.2.6 远程数据请求</strong></strong></h3><p>某个节点Node_A可以通过发送“遥控帧”到总线上的方式，请求某个节点Node_B来发送由该遥控帧所指定的报文。</p>
<h3 id="4-2-7-错误检测、错误通知、错误恢复功能"><a href="#4-2-7-错误检测、错误通知、错误恢复功能" class="headerlink" title="4.2.7 错误检测、错误通知、错误恢复功能"></a><strong><strong>4.2.7 错误检测、错误通知、错误恢复功能</strong></strong></h3><ul>
<li>所有的节点都可以检测出错误（错误检测功能）；</li>
<li>检测出错误的节点会立即通知总线上其它所有的节点（错误通知功能）；</li>
<li>正在发送消息的节点，如果检测到错误，会立即停止当前的发送，并在同时不断地重复发送此消息，直到该消息发送成功为止（错误恢复功能）。</li>
</ul>
<h3 id="4-2-8-故障封闭"><a href="#4-2-8-故障封闭" class="headerlink" title="4.2.8 故障封闭"></a><strong><strong>4.2.8 故障封闭</strong></strong></h3><p>节点能够判断错误的类型，判断是暂时性的数据错误（如噪声干扰）还是持续性的数据错误（如节点内部故障），如果判断是严重的持续性错误，那么节点就会切断自己与总线的联系，从而避免影响总线上其他节点的正常工作。</p>
<h2 id="4-3-CAN通信网络结构"><a href="#4-3-CAN通信网络结构" class="headerlink" title="4.3 CAN通信网络结构"></a><strong><strong>4.3 CAN通信网络结构</strong></strong></h2><h3 id="4-3-1-OSI基本参照模型"><a href="#4-3-1-OSI基本参照模型" class="headerlink" title="4.3.1 OSI基本参照模型"></a>4.3.1 OSI基本参照模型</h3><p>实际上，CAN总线网络底层只采用了OSI基本参照模型中的 <strong>数据链路层、传输层</strong> 。而在CAN网络高层仅采用了OSI基本参照模型的<strong>应用层。</strong></p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1699427783878.png" alt="1699427783878"></p>
<h3 id="4-3-2-CAN协议网络层次"><a href="#4-3-2-CAN协议网络层次" class="headerlink" title="4.3.2 CAN协议网络层次"></a>4.3.2 CAN协议网络层次</h3><p>在CAN协议中，ISO标准只对数据链路层和物理层做了规定。对于数据链路层和物理层的一部分，ISO11898和ISO11519-2的规定是相同，但是在物理层的PMD子层和MDI子层是不同的。</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1699427842349.png" alt="1699427842349"></p>
<p>在CAN总线，每一层网络中定义的事项如下：</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1699427852421.png" alt="1699427852421"></p>
<h2 id="4-4-CAN协议数据帧与遥控帧"><a href="#4-4-CAN协议数据帧与遥控帧" class="headerlink" title="4.4 CAN协议数据帧与遥控帧"></a>4.4 CAN协议数据帧与遥控帧</h2><h3 id="4-4-1-CAN-协议中的帧"><a href="#4-4-1-CAN-协议中的帧" class="headerlink" title="4.4.1 CAN 协议中的帧"></a>4.4.1 CAN 协议中的帧</h3><p>在了解<a href="https://so.csdn.net/so/search?q=CAN%E6%80%BB%E7%BA%BF&amp;spm=1001.2101.3001.7020">CAN总线</a>的通信机制之前，首先需要了解CAN协议中五种类型的帧结构：</p>
<ul>
<li>数据帧</li>
<li>遥控帧</li>
<li>错误帧</li>
<li>过载帧</li>
<li>帧间隔</li>
</ul>
<h3 id="4-4-2-数据帧与遥控帧"><a href="#4-4-2-数据帧与遥控帧" class="headerlink" title="4.4.2 数据帧与遥控帧"></a>4.4.2 数据帧与遥控帧</h3><p>在CAN协议中，数据帧和遥控帧有着诸多相同之处，所以，在这里，我们将数据帧和遥控帧放在一起来讲。</p>
<p>顾名思义，所谓数据帧，就是包含了我们要传输的<strong>数据</strong>的帧，其作用当然也就是承载发送节点要传递给接收节点的数据。</p>
<p>而遥控帧的作用可以描述为：请求其它节点发出与本遥控帧具有相同ID号的数据帧。</p>
<blockquote>
<p>比如：在某一个时刻，节点Node_A向总线发送了一个ID号为ID_2的遥控帧，那么就意味着Node_A请求总线上的其他节点发送ID号为ID_2的数据帧。</p>
<p>节点Node_B能够发出ID号为ID_2的数据帧，那么Node_B就会在收到Node_A发出的遥控帧之后，立刻向总线上发送ID号为ID_2的数据帧。</p>
</blockquote>
<p><strong><em>数据帧</em></strong><br> 的帧结构如下图所示，包含七个段： <strong>帧起始、仲裁段、控制段、数据段、CRC段、ACK段、帧结束</strong> 。</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1699428188563.png" alt="1699428188563"></p>
<p><strong><em>遥控帧</em></strong><br> 相比于数据帧，从帧结构上来看，只是 <strong>少了数据段</strong> ，包含六个段：<strong>帧起始、仲裁段、控制段、CRC段、ACK段、帧结束。</strong></p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1699428208177.png" alt="1699428208177"></p>
<p>数据帧和遥控帧都分为<strong>标准帧（CAN2.0A）</strong>和<strong>扩展帧（CAN2.0B）</strong>两种结构。</p>
<p>遥控帧相比于数据帧除了<strong>缺少数据段</strong>之外， <strong>遥控帧的RTR位恒为隐性1，数据帧的RTR位恒为显性0</strong> 。</p>
<h4 id="4-4-2-1-帧起始"><a href="#4-4-2-1-帧起始" class="headerlink" title="4.4.2.1 帧起始"></a><strong><strong>4.4.2.1 帧起始</strong></strong></h4><p>帧的最开始的一位是 <strong>帧起始</strong> ，也叫SOF（Start Of Frame）， <strong>SOF恒为显性位</strong> ，即逻辑 0 。帧起始表示CAN_H 和 CAN_L上有了电位差，也就是说，一旦总线上有了SOF就表示总线上开始有报文了。</p>
<h4 id="4-4-2-2-仲裁段"><a href="#4-4-2-2-仲裁段" class="headerlink" title="4.4.2.2 仲裁段"></a><strong><strong>4.4.2.2 仲裁段</strong></strong></h4><p> <strong>仲裁段是用来判定一帧报文优先级的依据，仲裁段中的ID号也是实现报文过滤机制的基础</strong> 。仲裁段由以下几个部分组成，</p>
<p>数据帧仲裁段：</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1699428441065.png" alt="1699428441065"></p>
<p>遥控帧仲裁段：</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1699428453749.png" alt="1699428453749"></p>
<p>可以看到相比于数据帧仲裁段RTR位恒为显性0，遥控帧仲裁段的RTR位恒为隐性1。</p>
<h5 id="4-4-2-2-1仲裁过程"><a href="#4-4-2-2-1仲裁过程" class="headerlink" title="4.4.2.2.1仲裁过程"></a><strong><strong>4.4.2.2.1仲裁过程</strong></strong></h5><p>在CAN总线通信中，有一种 <strong>回读机制</strong> ：指的是节点在向总线上发送报文的过程中，同时也对总线上的二进制位进行“回读”。通过这种机制，节点就可以判断出<strong>本节点发出的二进制位</strong>与<strong>总线上当前的二进制位</strong>是否一致。</p>
<p>还有一种叫做 <strong>线与机制</strong> ：指的是在总线上， <strong>显性位能够覆盖隐性位</strong> 。</p>
<blockquote>
<p>举个例子：在某一个时刻，节点Node_A向总线发送了一个显性位0，Node_B向总线发送了一个隐性位1，那么在该时刻，总线上的电平为显性0。</p>
</blockquote>
<p>下面将以<strong>标准数据帧</strong>的一个例子来分析CAN总线的 <strong>非破坏性逐位仲裁机制</strong> 。</p>
<p>一条CAN总线上有Node_A 和 Node_B两个节点，在<strong>总线空闲</strong>时，总线上为 <strong>隐性电平</strong> ，就在这个时候Node_A 和 Node_B 这两个节点同时向总线上发送数据，如下图：</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1699428640425.png" alt="1699428640425"></p>
<p>从图中可以看出，在Node_A 和 Node_B 传输数据前，总线处于空闲状态，为隐性电平1，这也就意味着，此时总线上的任意节点都可以向总线发送数据。</p>
<p>在某一时刻，Node_A 和Node_B两个节点同时向总线上发送数据。按照</p>
<p> <strong>线与机制</strong> ，总线上的电位为：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>节点/ID号</th>
<th>ID10</th>
<th>ID9</th>
<th>ID8</th>
<th>ID7</th>
<th>ID6</th>
<th>…</th>
</tr>
</thead>
<tbody>
<tr>
<td>Node-A</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>…</td>
</tr>
<tr>
<td>Node-B</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>…</td>
<td>…</td>
</tr>
<tr>
<td>总线</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>…</td>
</tr>
</tbody>
</table>
</div>
<p>在Node_A和Node_B两个节点向总线发送数据时，他们同时回读总线上的电平。从图中我们可以看到，Node_A 和Node_B的ID10 、ID9、ID8电位相同，因此这两个节点从总线上听到的电位与他们自己发出的电位也相同，这个时候还没有分出胜负。</p>
<p>当Node_B回读总线上的 ID7 这一位时，发现总线上的电平跟它自己发送到总线上的不一样，此时，Node_B知道自己在争夺总线的仲裁中失败了，那么它主动地转换为接收状态，不再发出信息。</p>
<p>于是在此之后，总线上的电平和Node_A发出的电平一致，也就是说，Node_A占据了总线的发送权。</p>
<p>通过上面的分析我们可以看到，在整个仲裁过程中：</p>
<ul>
<li>在Node_A获取总线的发送权之后，Node_A接着发送自己的Msg_A，因此在竞争总线的过程中不会对Msg_A的传输造成延时；</li>
<li>在两个节点竞争总线的过程中，不会破坏Msg_A;</li>
</ul>
<p>正是由于上面的两点，才称之为<strong>非破坏性仲裁机制。</strong></p>
<blockquote>
<p>Tips:</p>
<p>通过上面仲裁过程的分析，我们可以解释CAN总线通信的三个特点：</p>
<p>1）多主控制方式：只要总线空闲，总线上的任意节点都可以向总线上发送数据，直到节点在仲裁中一个个失败，最后只留下一个节点获得总线的发送权。</p>
<p>2）非破坏性仲裁机制：仲裁段逐位总裁，依靠<strong>回读机制、线与机制</strong>得以实现。</p>
<p>3）半双工通信：所谓半双工通信，指的是节点不能在自己发送报文的时候，同时接收其他节点发送来的报文。这是显然的，一个节点正在发送报文时，已经占据了总线的发送权，其他节点肯定不能向总线上发送报文。</p>
</blockquote>
<p>看一个CAN报文发送的实例，CAN总线上有四个节点：Node_A、Node_B、Node_C、Node_D。发送的报文的ID号分别为5、7、3、6.</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1699428658091.png" alt="1699428658091"></p>
<h5 id="4-4-2-2-2-仲裁段中的RTR，SRR和IDE位"><a href="#4-4-2-2-2-仲裁段中的RTR，SRR和IDE位" class="headerlink" title="4.4.2.2.2 仲裁段中的RTR，SRR和IDE位"></a><strong><strong>4.4.2.2.2 仲裁段中的RTR，SRR和IDE位</strong></strong></h5><p>通过上面标准数据帧的仲裁过程分析，我们已经理解了CAN总线的仲裁机制。但同时也注意到仲裁段除了ID号之外，还有其他的位。</p>
<p><strong><strong>1）RTR位：</strong></strong></p>
<p>Tranmission Request Bit （远程发送请求位）。<strong>在数据帧中，RTR位恒为显性位0，在遥控帧中，恒为隐性1。</strong></p>
<blockquote>
<p>Tips: 这么做的原因是保证数据帧优先级高于遥控帧。比如：在某一时刻t，节点Node_A发出了ID号为ID_2遥控帧报文来请求总线上的其它节点发出ID号为ID_2的数据帧报文。但是就在同一时刻t，节点Node_B发出了ID号为ID_2的数据帧报文。这个时候怎么办呢，显然依靠ID号不能仲裁出这两帧报文（一个遥控帧，一个数据帧，ID号相同）谁能占据总线的发送权，这种情况下，RTR位就起作用了，由于RTR在数据帧中恒为显性0，在遥控帧中恒为隐性1，所以在ID号相同的情况下，一定是数据帧仲裁获胜。这就解释了 <strong>RTR位的作用：在ID号相同的情况下，保证数据帧的优先级高于遥控帧。</strong></p>
</blockquote>
<p><strong><strong>2）SRR位</strong></strong></p>
<p>Substitutes for Remote Requests Bit（替代远程请求位）， <strong>在扩展帧（数据帧或遥控帧）中，SRR恒为隐性位1</strong> ，并且可以发现，扩展帧的隐性SRR位正好对应标准帧的显性RTR位，这就解释了  <strong>SRR位的作用：在前11位ID号相同的情况下，标准数据帧的优先级高于扩展数据帧</strong> ；</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1699428855183.png" alt="1699428855183"></p>
<p><strong><strong>3）IDE位</strong></strong></p>
<p>全称：Identifier Extension Bit（标识符扩展位）。 <strong>在扩展帧中恒为隐性1，在标准帧中，IDE位于控制段，且恒为显性0</strong> 。且扩展帧IDE位和标准帧IDE位位置对应，这就保证了：  <strong>在前11位ID号相同的情况下，标准遥控帧的优先级一定高于扩展遥控帧</strong> 。</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1699428869501.png" alt="1699428869501"></p>
<p><strong>总结：</strong> 在ID号前11位相同的情况下：</p>
<ul>
<li>RTR：保证数据帧优先级高于遥控帧；</li>
<li>SRR ：保证标准数据帧的优先级高于扩展数据帧。</li>
<li>IDE ：保证标准遥控帧的优先级高于扩展遥控帧。</li>
</ul>
<h5 id="4-4-2-2-3-报文过滤"><a href="#4-4-2-2-3-报文过滤" class="headerlink" title="4.4.2.2.3 报文过滤"></a><strong><strong>4.4.2.2.3 报文过滤</strong></strong></h5><p>在CAN总线中<strong>没有地址</strong>的概念，CAN总线是通过<strong>报文ID</strong>来实现收发数据的。CAN节点上都会有一个 <strong>验收滤波ID表</strong> ，其位于CAN节点的验收滤波器中，如果总线上的报文的ID号在某个节点的验收滤波ID表中，那么这一帧报文就能通过该节点验收滤波器的验收，该节点就会接收这一帧报文。</p>
<blockquote>
<p>比如：Node_A发送了一帧ID号为ID_1的报文Msg_1，Node_B的验收滤波ID表中恰好有ID_1，于是乎Msg_1就会被Node_B接收。</p>
<p>Tips:</p>
<p>报文过滤机制体现了CAN通信的两条特点： 1）一对一、组播和广播 2）系统的柔性：正是因为CAN总线上收发报文是基于报文ID实现的，所以总线上添加节点时不会对总线上已有的节点造成影响。</p>
</blockquote>
<h4 id="4-4-2-3-控制段"><a href="#4-4-2-3-控制段" class="headerlink" title="4.4.2.3 控制段"></a><strong><strong>4.4.2.3 控制段</strong></strong></h4><p>数据帧和遥控帧的控制段结构相同：</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1699428891064.png" alt="1699428891064"></p>
<ul>
<li>标准帧中IDE位对应扩展帧中的IDE位，保证在前11位ID号相同的情况下，标准帧的优先级一定高于扩展帧；</li>
<li>然后是保留位r0和r1（扩展帧），保留位r0和r1必须以显性电平发送，但是接受方可以接受显性、隐性及其任意组合的电平；</li>
<li>最后是4个字节的 <strong>DLC</strong> （DLC3、DLC2、DLC1、DLC0）代表数据长度，指示了 <strong>数据段中的字节数</strong> 。对于没有数据段的遥控帧，DLC表示该遥控帧对应的数据帧的数据段的字节数。</li>
</ul>
<h4 id="4-4-2-4-数据段"><a href="#4-4-2-4-数据段" class="headerlink" title="4.4.2.4 数据段"></a><strong><strong>4.4.2.4 数据段</strong></strong></h4><p>数据段可以包含0~8个字节的数据，从MSB（最高位）开始输出。</p>
<h4 id="4-4-2-5-CRC段"><a href="#4-4-2-5-CRC段" class="headerlink" title="4.4.2.5 CRC段"></a><strong><strong>4.4.2.5 CRC段</strong></strong></h4><p>CRC段包含CRC校验序列和CRC界定符</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1699428900186.png" alt="1699428900186"></p>
<p><strong>CRC校验序列</strong>是根据多项式生成的CRC值， <strong>其计算范围包括：帧起始、仲裁段、控制段和数据段。CRC界定符恒为隐性1</strong> 。</p>
<h4 id="4-4-2-6-ACK段"><a href="#4-4-2-6-ACK段" class="headerlink" title="4.4.2.6 ACK段"></a><strong><strong>4.4.2.6 ACK段</strong></strong></h4><p>ACK段包含<strong>ACK槽</strong>和<strong>ACK界定符</strong>两个位。</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1699428911314.png" alt="1699428911314"></p>
<ul>
<li><strong>发送节点</strong>在ACK段发送 <strong>两个隐性位</strong> ，即发送方发出的报文中ACK槽为隐性1；</li>
<li><strong>接收节点</strong>在接收到正确的报文之后会在ACK槽发送显性位0，通知发送节点正常接收结束。所谓接收到正确的报文指的是接收到的报文没有填充错误、格式错误、CRC错误。</li>
</ul>
<blockquote>
<p>Tips: 我们以标准数据帧为例来分析 <strong>ACK段的工作方式</strong> ：如图所示，Node_A为发送节点，Node_B为接收节点。Node_A在ACK段发送两个隐性位1。Node_B正确接收到这一报文后，在ACK段的ACK槽中填充了一个显性位0。注意，这个时候 <strong>Node_A回读到的总线上的额电平为显性0</strong> ，于是这个时候，Node_A就知道自己发出去的报文至少有一个节点正确接收了。</p>
</blockquote>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1699428924845.png" alt="1699428924845"></p>
<h4 id="4-4-2-7-帧结束"><a href="#4-4-2-7-帧结束" class="headerlink" title="4.4.2.7 帧结束"></a><strong>4.4.2.7 帧结束</strong></h4><p>帧结束段表示该帧报文的结束，由7个隐性位构成。</p>
<h2 id="4-5-CAN协议错误帧"><a href="#4-5-CAN协议错误帧" class="headerlink" title="4.5 CAN协议错误帧"></a>4.5 CAN协议错误帧</h2><h3 id="4-5-1-错误帧的帧结构"><a href="#4-5-1-错误帧的帧结构" class="headerlink" title="4.5.1 错误帧的帧结构"></a><strong><strong>4.5.1 错误帧的帧结构</strong></strong></h3><p>在发送和接收报文时，总线上的节点如果检测出了错误，那么该节点就会发送错误帧，通知总线上的节点，自己出错了。错误帧由<strong>错误标志</strong>和<strong>错误界定符</strong>两个部分组成。</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1701347241667.png" alt="1701347241667"></p>
<ul>
<li>主动错误标志：6个连续的显性位；</li>
<li>被动错误标志：6个连续的隐性位；</li>
<li>错误界定符：8个连续的隐性位。</li>
</ul>
<p>可以看到在错误标志之后还有0~6位的错误标志重叠，这一段最低有0个位，最多有6个位，关于这一段是怎么形成的，将在下文中解释。</p>
<h3 id="4-5-2-错误检测"><a href="#4-5-2-错误检测" class="headerlink" title="4.5.2 错误检测"></a><strong><strong>4.5.2 错误检测</strong></strong></h3><h4 id="4-5-2-1-位填充原则"><a href="#4-5-2-1-位填充原则" class="headerlink" title="4.5.2.1 位填充原则"></a><strong><strong>4.5.2.1 位填充原则</strong></strong></h4><p>在了解<a href="https://so.csdn.net/so/search?q=CAN%E6%80%BB%E7%BA%BF&amp;spm=1001.2101.3001.7020">CAN总线</a>中的错误检测之前，首先需要了解什么是位填充。CAN协议中规定，当<strong>相同极性的电平持续五位</strong>时，则 <strong>添加一个极性相反的位</strong> 。</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1701347301950.png" alt="1701347301950"></p>
<ul>
<li>对于<strong>发送节点</strong>而言：在发送<strong>数据帧</strong>和<strong>遥控帧</strong>时，对于<strong>SOF~CRC(除去CRC界定符)</strong> 之间的位流，相同极性的电平如果持续5位，那么在下一个位插入一个与之前5位反型的电平；</li>
<li>对于<strong>接收节点</strong>而言：在接收<strong>数据帧</strong>和<strong>遥控帧</strong>时，对于<strong>SOF~CRC(除去CRC界定符)</strong>之间的位流，相同极性的电平如果持续5位，那么需要删除下一位再接收。</li>
</ul>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1701347321170.png" alt="1701347321170"></p>
<blockquote>
<p>Tips: 注意：填充位的添加和删除是由发送节点和接收节点完成的，CAN-BUS只负责传输，不会操纵信号。</p>
</blockquote>
<h4 id="4-5-2-2-错误的种类"><a href="#4-5-2-2-错误的种类" class="headerlink" title="4.5.2.2 错误的种类"></a><strong><strong>4.5.2.2 错误的种类</strong></strong></h4><p>在CAN总线通信中，一共有五种错误：</p>
<ul>
<li>位错误</li>
<li>ACK错误</li>
<li>填充错误</li>
<li>CRC错误</li>
<li>格式错误</li>
</ul>
<h5 id="4-5-2-2-1-位错误（Bit-Check-Error）"><a href="#4-5-2-2-1-位错误（Bit-Check-Error）" class="headerlink" title="4.5.2.2.1 位错误（Bit Check Error）"></a><strong><strong>4.5.2.2.1 位错误（Bit Check Error）</strong></strong></h5><p>节点将自己发送到总线上的电平与同时从总线上回读到的电平进行比较，如果发现二者不一致，那么这个节点就会检测出一个位错误。</p>
<p>实际上所谓“发出的电平与从总线上回读的电平不一致”，指的就是<strong>节点向总线发出隐性位，却从总线上回读到显性位</strong>或者<strong>节点向总线发出显性位，却从总线上回读到隐性位</strong>这两种情况。</p>
<blockquote>
<p>Tips: 有三种例外情况不属于位错误：</p>
<ul>
<li>在 <strong>仲裁区</strong> ，节点向总线发送隐性位却回读到显性位，不认为是位错误，这种情况表示该节点仲裁失败；</li>
<li>在 <strong>ACK槽</strong> ，节点向总线发送隐性位却回读到显性位，不认为是位错误，这种情况表示，该节点当前发送的这一帧报文至少被一个其它节点正确接收；</li>
<li><strong>该节点发送被动错误标志</strong> ，节点Node_A向总线发送连续六个隐性位（被动错误标志）却回读到显性位，不认为是位错误。因为被动错误标志是六个连续的隐性位，所以在总线上按照线与机制，有可能这六个连续隐性位被其它节点发送的显性电平“吃掉”；</li>
</ul>
</blockquote>
<h5 id="4-5-2-2-2-ACK错误（Acknowledgment-Error）"><a href="#4-5-2-2-2-ACK错误（Acknowledgment-Error）" class="headerlink" title="4.5.2.2.2 ACK错误（Acknowledgment Error）"></a><strong><strong>4.5.2.2.2 ACK错误（Acknowledgment Error）</strong></strong></h5><p>按照CAN协议的规定，在一帧报文（数据帧或者遥控帧）发出之后，如果接收节点Node_B成功接收了该帧报文，那么接收节点Node_B就要在该帧报文ACK槽对应的时间段内向总线上发送一个显性位来应答发送节点Node_A。这样发送节点Node_A就会在ACK槽时间段内从总线上回读到一个显性位。因此：</p>
<p>当发送节点Node_A在 <strong>ACK槽时间段内没有回读到显性位</strong> ，那么发送节点Node_A就会检测到一个ACK应答错误。这表示没有一个节点成功接收该帧报文。</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1701347344846.png" alt="1701347344846"></p>
<h5 id="4-5-2-2-3-填充错误（Fill-Error）"><a href="#4-5-2-2-3-填充错误（Fill-Error）" class="headerlink" title="4.5.2.2.3 填充错误（Fill Error）"></a><strong><strong>4.5.2.2.3 填充错误（Fill Error）</strong></strong></h5><p>在需要执行<strong>位填充原则</strong>的帧段（数据帧遥控帧的SOF~CRC序列），检测到 <strong>连续六个同性位</strong> ，则检测到一个填充错误。</p>
<h5 id="4-5-2-2-4-CRC错误"><a href="#4-5-2-2-4-CRC错误" class="headerlink" title="4.5.2.2.4 CRC错误"></a><strong><strong>4.5.2.2.4 CRC错误</strong></strong></h5><p>发送节点Node_A在发送数据帧或者遥控帧时，会计算出该帧报文的CRC序列。接收节点Node_B在接收报文时也会执行相同的CRC算法，如果接收节点Node_B计算出的CRC序列值与发送节点Node_A发来的CRC序列值不一致，那么接收节点就检测到一个CRC错误。</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1701347357789.png" alt="1701347357789"></p>
<h5 id="4-5-2-2-5-格式错误"><a href="#4-5-2-2-5-格式错误" class="headerlink" title="4.5.2.2.5 格式错误"></a><strong><strong>4.5.2.2.5 格式错误</strong></strong></h5><p>在一帧报文发送时，如果在必须发送预定值的区域内检测到了非法值，那么就检测到一个格式错误。</p>
<p>CAN报文中，有预定值的区域包括：</p>
<ul>
<li>数据帧和遥控帧的 <strong>CRC界定符、ACK界定符、EOF</strong> ；</li>
<li><strong>错误帧界定符</strong></li>
<li><strong>过载帧界定符</strong></li>
</ul>
<h3 id="4-5-3-错误通知"><a href="#4-5-3-错误通知" class="headerlink" title="4.5.3 错误通知"></a><strong><strong>4.5.3 错误通知</strong></strong></h3><p>上一节中，讲到CAN通信中有五种错误，并且介绍了在什么情况下能够检测到这几种错误，在检测到错误之后，检测到错误的节点就要发送错误帧到总线上来通知总线上的其他节点。错误帧有的带有 <strong>主动错误标志</strong> ，有的带有 <strong>被动错误标志</strong> ，而且错误标志重叠部分的字节数也不一样，那么问题就来了：</p>
<ul>
<li>什么情况下发送带有主动错误标志的错误帧；</li>
<li>什么情况下发送带有被动错误标志的错误帧；</li>
<li>在哪个时间点发送错误帧；</li>
<li>错误标志重叠部分是怎样形成的；</li>
</ul>
<h3 id="4-5-3-1-节点错误状态"><a href="#4-5-3-1-节点错误状态" class="headerlink" title="4.5.3.1 节点错误状态"></a><strong><strong>4.5.3.1 节点错误状态</strong></strong></h3><p>按照CAN协议的规定，CAN总线上的节点始终处于以下三种状态之一。</p>
<ul>
<li>主动错误状态</li>
<li>被动错误状态</li>
<li>总关闭状态</li>
</ul>
<p>当满足一定的条件时，节点可以从一种状态转换为另外一种状态。</p>
<blockquote>
<p>Tips: 需要注意的是：</p>
<ul>
<li>处于 <strong>主动错误状态</strong> ，表示该节点具备发出<strong>主动错误标志</strong>的能力;</li>
<li>处于 <strong>被动错误状态</strong> ，表示节点具备发出<strong>被动错误标志</strong>的能力。</li>
</ul>
</blockquote>
<p>1）主动错误状态</p>
<ul>
<li>节点处于主动错误状态 <strong>可以正常通信</strong> ；</li>
<li>处于主动错误状态的节点（可能是接收节点也可能是发送节点）在检测出错误时， <strong>发出主动错误标志</strong> 。</li>
</ul>
<p>2）被动错误状态</p>
<ul>
<li>节点处于被动错误状态 <strong>可以正常通信</strong> ；</li>
<li>处于被动错误状态的节点（可能是接收节点也可能是发送节点）在检测出错误时， <strong>发出被动错误标志</strong> 。</li>
</ul>
<blockquote>
<p>Tips: 注意：这里说处于主动错误状态或被动错误状态的节点仍然可以正常通信，这里的<strong>正常通信</strong>指的是：节点仍然能够从总线上接收报文，也能够竞争总线获胜后向总线上发送报文。但是不代表接收的报文一定正确也不代表一定能正确的发送报文。</p>
</blockquote>
<p>3）总线关闭状态</p>
<ul>
<li>节点处于总线关闭状态，那么该节点<strong>不能收发</strong>报文；</li>
<li>处于总线关闭状态的节点，只能一直等待，在满足一定条件的时候，再次进入到 <strong>主动错误状态</strong> 。</li>
</ul>
<h3 id="4-5-3-2-错误状态的转换"><a href="#4-5-3-2-错误状态的转换" class="headerlink" title="4.5.3.2 错误状态的转换"></a><strong><strong>4.5.3.2 错误状态的转换</strong></strong></h3><p>现在我们知道：</p>
<ul>
<li>处于主动错误状态的节点在检测到错误时会发送带有主动错误标志的错误帧；</li>
<li>处于被动错误状态的节点在检测到错误时会发送带有被动错误标志的错误帧。</li>
</ul>
<p>那么一个CAN节点在什么情况下处于主动错误状态，什么情况下处于被动错误状态呢？</p>
<p>根据CAN协议的规定，在CAN节点内，有两个计数器： <strong>发送错误计数器（TEC）和接收错误计数器（REC）</strong> 。</p>
<blockquote>
<p>Tips: 需要注意的是：这两个计数器计的不是收发报文的数量，也不是收发错误帧的数量。TEC和RCE计数值的变化，是根据下表的规定来进行的</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1701347372565.png" alt="1701347372565"></p>
</blockquote>
<p>CAN节点错误状态的转换，就是基于这两个计数器来进行的。</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1701347382135.png" alt="1701347382135"></p>
<p>可以看出，节点错误状态的转换就是一个<strong>“量变”到“质变”的过程：</strong></p>
<h4 id="1-主动错误状态"><a href="#1-主动错误状态" class="headerlink" title="1) 主动错误状态"></a><strong>1) 主动错误状态</strong></h4><p><strong>最开始TCE和REC都小于127时，就处于主动错误状态。</strong></p>
<p>在这一状态下，节点检测到一个错误就会发送带有<strong>主动错误标志</strong>的 <strong>错误帧</strong> ，因为主动错误标志是 <strong>连续六个显性位</strong> ，所以这个时候主动错误标志将会“覆盖”掉总线上其它节点的发送，而之前在CAN总线上传输的报文就被这“六个连续显性位”破坏掉了。</p>
<p> <strong>如果发出主动错误帧的节点是发送节点</strong> ，这个情况下就相当于：刚刚发送的那一帧报文我发错了，现在我破坏掉它（发送主动错误帧），你们不管收到什么都不算数；</p>
<p> <strong>如果发出主动错误帧的节点是接收节点</strong> ，这个情况就相当于：刚刚我收报文的时候发现了错误，不管你们有没有发现这个错误，我现在主动站出来告诉大家这个错误，并把这一帧报文破坏掉（发送主动错误帧），刚才你们收到的东西不管对错都不算数了。</p>
<blockquote>
<p>Tips: 处于主动错误状态，说明这个节点目前是比较可靠的，出现错误的原因可能不是它本身的问题，即刚刚检测到的错误可能不仅仅只有它自己遇到，正是因为这一点，整个总线才相信它报告的错误，允许它破坏掉发送中的报文，也就是将这一次的发送作废。</p>
</blockquote>
<h4 id="2）被动错误状态"><a href="#2）被动错误状态" class="headerlink" title="2）被动错误状态"></a><strong><strong>2）被动错误状态</strong></strong></h4><p>在这一状态下，节点Node_A检测到一个错误就会发送带有被动错误标志的错误帧，因为被动错误标志是连续六个隐性位，所以这个时候总线上正在传输的报文位流不会受到该被动错误帧的影响，其它的节点该发送的发送，该接收的接收，没人搭理这个发送被动错误帧的节点Node_A。</p>
<p>如果发出被动错误帧的节点Node_A为报文的发送节点，那么在发送被动错误帧之后，刚刚正在发送的报文被破坏，并且Node_A不能在错误帧之后随着<strong>连续发送</strong>刚刚发送失败的那个报文。随之而来的是 <strong>帧间隔</strong> ，并且连带着8位隐性位的 <strong>“延迟传送”</strong>段；这样总线电平就呈现出连续11位隐性位，总线上的其它节点就能判定总线处于空闲状态，就能参与总线竞争。此时如果Node_A能够竞争成功，那么它就能接着发送，如果竞争不能成功，那么就接着等待下一次竞争。这种机制的目的正是为了让其它正常节点（处于主动错误）优先使用总线。</p>
<blockquote>
<p>Tips: 处于 <strong>被动错误状态</strong> ，说明这个节点目前是不太可靠的，出现错误的原因可能是它本身的问题，即刚刚检测到的错误可能仅仅只有它自己遇到，正是因为这一点，整个总线才不信任它报告的错误，从而只允许它发送六个连续的隐性位，这样它才不会拖累别人。</p>
</blockquote>
<h4 id="3）总线关闭状态"><a href="#3）总线关闭状态" class="headerlink" title="3）总线关闭状态"></a><strong><strong>3）总线关闭状态</strong></strong></h4><p>如果一个处于被动错误状态的节点，仍然多次发送被动错误帧，那么势必导致 <strong>TEC ＞ 255</strong> ，这样就处于 <strong>总线关闭状态</strong> 。</p>
<p>在总线关闭状态下的节点Node_A不能向总线上发送报文，也不能从总线上接收报文，整个节点脱离总线。等到检测到128次11个连续的隐性位时，TEC和REC置0，重新回到主动错误状态。</p>
<p>按照我的理解这个所谓“检测到128次11个连续隐性位”其实就是让这个节点隔离一段时间冷静下，因为它一旦处于总线关闭状态，就不会和总线有任何的联系，这个时候只要它计算时间等于达到传送128次11个连续隐性位所用的时间，就可以重新连到总线上。</p>
<blockquote>
<p>Tips: 处于总线关闭状态说明，这个节点目前挂掉了，总线先把它踢开，这样它才不会拖累别人，等到它冷静一段时间之后再回到总线上。</p>
</blockquote>
<h3 id="4-5-3-3-错误帧的发送"><a href="#4-5-3-3-错误帧的发送" class="headerlink" title="4.5.3.3 错误帧的发送"></a><strong><strong>4.5.3.3 错误帧的发送</strong></strong></h3><p>在检测到错误之后，什么时候发送错误帧呢？</p>
<p>按照CAN协议的规定：</p>
<ul>
<li>位错误、填充错误、格式错误、ACK错误。 <strong>在错误产生的那一位的下一位开始发送错误帧</strong> 。</li>
<li>CRC错误 <strong>紧随ACK界定符后的位发送错误帧</strong> 。</li>
</ul>
<p>例子1：</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1701347403665.png" alt="1701347403665"></p>
<p>（1）发送节点Node_A发送一个显性位，但是却从总线上听到一个隐形位，于是Node_A节点就会检测到一个位错误；</p>
<p>（2）Node_A检测到位错误之后，立即在下一位开始发送主动错误帧：6个连续显性位的主动错误标志+8个连续隐性位的错误界定符；</p>
<p>（3）对应Node_A发出的主动错误标志，总线上电平为6个连续显性位；</p>
<p>（4）接收节点Node_B和Node_C从总线上听到连续6个显性位，那么就会检测到一个填充错误，于是这两个节点都会发送主动错误帧；</p>
<p>（5）对应Node_B和Node_C发出的主动错误标志，总线电平又有6个连续显性电平，对应Node_B和Node_C发出的错误界定符，总线电平有8个连续的隐性电平。</p>
<p>（6）在间歇场之后，Node_A节点重新发送刚刚出错的报文。</p>
<p>例子2：</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1701347408782.png" alt="1701347408782"></p>
<p>从上图中可以看出错误帧之中，错误标志重叠部分是怎样形成的，这个例子中，位错误的错误标志与填充错误的错误标志重叠两位，剩下的部分还有四位：</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1701347420579.png" alt="1701347420579"></p>
<h2 id="4-6-CAN协议过载帧和帧间隔"><a href="#4-6-CAN协议过载帧和帧间隔" class="headerlink" title="4.6 CAN协议过载帧和帧间隔"></a><strong><strong>4.6 CAN协议过载帧和帧间隔</strong></strong></h2><h3 id="4-6-1-过载帧"><a href="#4-6-1-过载帧" class="headerlink" title="4.6.1 过载帧"></a><strong><strong>4.6.1 过载帧</strong></strong></h3><p>过载帧是<strong>接收节点</strong>向总线上其它节点报告自身<strong>接收能力达到极限</strong>的帧。上面这句话可以这样理解：接收节点Node_A接收报文的能力达到极限了，于是Node_A就会发出过载帧来告诉总线上的其它节点（包括发送节点），我接收节点Node_A已经没有能力处理你们发来的报文了。</p>
<p>过载帧包括：<strong>过载标志</strong>和<strong>过载界定符</strong>两个部分</p>
<ul>
<li><strong>过载标志</strong> ：连续6个显性位；</li>
<li><strong>过载界定符</strong> ：连续8个隐性位。</li>
<li>与错误帧类似，过载帧中有 <strong>过载帧重叠部分</strong> ，且形成过载重叠标志的原因与形成错误帧中的错误重叠标志的原因是相同的</li>
</ul>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1701347603850.png" alt="1701347603850"></p>
<p>对于过载帧的帧结构我们可以这样理解：接收节点Node_A达到接收极限时，就会发出过载帧到总线上，显然，过载标志的6个连续显性位会屏蔽掉总线上其它节点的发送，也就是说这个时候Node_A通过发送过载帧的方式来破坏其它节点的发送，这样在Node_A发送过载帧期间，其它节点就不能成功发送报文，于是就相当于把其它节点的发送推迟了，也就是说Node_A在其发送过载帧的这段时间得以“休息”。</p>
<p>有三种情况会引起过载帧：</p>
<ul>
<li>接收节点自身原因。接收节点由于某种原因需要延迟接收下一个数据帧或者遥控帧。</li>
<li>在帧间隔的间歇段的第一位和第二位检测到一个显性位（正常的间歇段都是隐性位）<br>帧间隔的间隔段本应是三个连续的隐性位，如果接收节点Node_A在间隔段检测到显性位，那么就意味着此时有报文发向接收节点Node_A，但这个时候是不应该有报文发来的，于是Node_A发送过载帧。</li>
<li>CAN节点在<strong>错误界定符</strong>或<strong>过载界定符</strong>的第八位(最后一位)听到一个 <strong>显性位0</strong> ，节点会发送一个过载帧，且错误计数器不会增加。<br>接收节点Node_A在错误界定符和过载界定符的最后一位听到显性位，也意味着有报文发向Node_A，但这个时候是不应该有报文发来的，于是Node_A发送过载帧。</li>
</ul>
<h3 id="4-6-2-帧间隔"><a href="#4-6-2-帧间隔" class="headerlink" title="4.6.2 帧间隔"></a><strong><strong>4.6.2 帧间隔</strong></strong></h3><p>帧间隔是用来隔离数据帧（或者遥控帧）的，也就是说，数据帧（或者遥控帧）通过插入<strong>帧间隔</strong>可以将本帧与先行帧（数据帧、遥控帧、错误帧、过载帧）分隔开来。</p>
<blockquote>
<p>Tips: 过载帧和错误帧的前面不能插入帧间隔。</p>
</blockquote>
<p>帧间隔有两种不同的形式：</p>
<p>主动错误状态的帧间隔：</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1701347621761.png" alt="1701347621761"></p>
<p>被动错误状态的帧间隔：</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1701347626515.png" alt="1701347626515"></p>
<p> <strong>间隔段</strong> ：连续三个隐性位；间隔段期间，所有节点不允许发送数据这或遥控帧，只要在这期间监听到显性位，接收节点就会发送过载帧。</p>
<p> <strong>空闲段</strong> ：连续隐性位，个数不一定，0个或者多个都可以。总线空闲的时间是任意长的，只要总线空闲，节点就可以竞争总线。</p>
<p> <strong>暂停段</strong> ：只有处于被动错误状态的节点在发送帧间隔的时候，才会在帧间隔中插入8个连续隐性位的暂停段。</p>
<p>暂停段，又叫做延迟传送段，为什么节点处于被动状态时会有这样一段呢。原因如下:首先，考虑主动错误状态的节点Node_A，发送主动错误标志之后，随之就要重新发送刚刚发送失败的报文，但是为了间隔开与前面刚刚发送的错误帧，<strong>总线在错误帧之后就会插入３个隐形位的帧间隔，在这３个隐形位期间，其它的节点不足以判定总线空闲（需要连续11个隐性位才能判定），所以Node_A仍然占据着总线的控制权，于是在帧间隔之后，Node_A能够接着发送报文。</strong>现在Node_A转入到被动错误状态了，说明它已经不是很可靠了，这个时候如果没有延迟传送段，在Node_A发出被动错误标志之后，它仍然能够在3位的帧间隔之后立即重新发送报文，这是不符合我们对被动错误状态的处理要求的当然也是不符合CAN协议的，于是乎对于发送出被动错误标志的节点，总线在帧间隔中加入了８个连续隐性位的延迟传送段，这样的3+8=11个连续隐性位。就能让Node_A在这个帧间隔期间失去对总线的控制权，从而优先保证其它正常(处于主动错误状态)节点能够使用总线，而不必等着一个已经不可靠的Node_A占据总线。</p>
<h2 id="4-7-CAN通信的位定时与同步"><a href="#4-7-CAN通信的位定时与同步" class="headerlink" title="4.7 CAN通信的位定时与同步"></a><strong><strong>4.7 CAN通信的位定时与同步</strong></strong></h2><h3 id="4-7-1-位定时"><a href="#4-7-1-位定时" class="headerlink" title="4.7.1 位定时"></a><strong><strong>4.7.1 位定时</strong></strong></h3><h4 id="4-7-1-1-比特率和波特率"><a href="#4-7-1-1-比特率和波特率" class="headerlink" title="4.7.1.1 比特率和波特率"></a><strong><strong>4.7.1.1 比特率和波特率</strong></strong></h4><p>1）</p>
<p> <strong>位速率</strong> :又叫做 <strong>比特率（bit rata）</strong> 、 <strong>信息传输率</strong> ，表示的是单位时间内，总线上传输的 <strong>信息量</strong> ，即 <strong>每秒能够传输的二进制位的数量</strong> ，单位是bit per second。</p>
<p>2）</p>
<p> <strong>波特率</strong> ：又叫做 <strong>传码率</strong> 、 <strong>信号传输率</strong> ，表示的是单位时间内传输的码元的数量，当两相调制时，一个码元用一个二进制位表示，此时波特率在数值上和比特率是一样的，<a href="https://so.csdn.net/so/search?q=CAN%E6%80%BB%E7%BA%BF&amp;spm=1001.2101.3001.7020">CAN总线</a>正是两项调制这种情况。</p>
<blockquote>
<p>Tips: <strong>比特率</strong>和<strong>波特率</strong>并不是一回事儿，这一定一定要牢记。</p>
</blockquote>
<h4 id="4-7-1-2-位时间"><a href="#4-7-1-2-位时间" class="headerlink" title="4.7.1.2 位时间"></a><strong><strong>4.7.1.2 位时间</strong></strong></h4><h5 id="4-7-1-2-1-位时间的概念"><a href="#4-7-1-2-1-位时间的概念" class="headerlink" title="4.7.1.2.1 位时间的概念"></a><strong><strong>4.7.1.2.1 位时间的概念</strong></strong></h5><p> <strong>位时间</strong> ：表示的是一个二进制位在总线上传输时所需要的时间。</p>
<p>所以：位速率 = 1 / 位时间</p>
<p>首先了解以下CAN总线系统中的两个时钟：<strong>晶振时钟周期</strong>和<strong>CAN时钟周期</strong></p>
<ul>
<li><strong>晶振时钟周期</strong> ：是由单片机振荡器的晶振频率决定的，指的是 <strong>振荡器每震荡一次所消耗的时间长度</strong> ，也是整个系统中最小的时间单位。</li>
<li><strong>CAN时钟周期</strong> ：CAN时钟是由系统时钟分频而来的一个时间长度值，实际上就是 <strong>一个时间份额Tq</strong> 。可以按照下面的公式计算：</li>
</ul>
<script type="math/tex; mode=display">
CAN时钟周期=2×晶振时钟周期×BRP</script><p>  <img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1701348103686.png" alt="1701348103686"></p>
<p>其中BRP叫做波特率预分频值（baudrate prescaler）。</p>
<h5 id="4-7-1-2-2-位时间的分段"><a href="#4-7-1-2-2-位时间的分段" class="headerlink" title="4.7.1.2.2 位时间的分段"></a><strong>4.7.1.2.2 位时间的分段</strong></h5><p>如上文所述，在CAN的位定时中，一个CAN时钟周期称为一个<strong>时间量子</strong> —  <strong>Tq</strong> 。<br>如下图所示：位时间分为四个段： <strong>同步段、传播段、相位缓冲段1、相位缓冲段2</strong> ，总共8~25个时间量子（Tq）。</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1701348213567.png" alt="1701348213567"></p>
<p>1） <strong>同步段</strong> （Synchronization Segment）：</p>
<ul>
<li>长度固定，1个时间量子Tq；</li>
<li>一个位的传输从同步段开始；</li>
<li>同步段用于同步总线上的各个节点，一个位的跳边沿在此时间段内。</li>
</ul>
<p>2） <strong>传播段</strong> （Propagation Segment）：</p>
<ul>
<li>传播段用于补偿报文在总线和节点上传输时所产生的时间延迟；</li>
<li>传播段时长 ≥ 2 × 报文在总线和节点上传输时产生的时间延迟 ；</li>
<li>传播段时长可编程（1~8个时间量子Tq）。</li>
</ul>
<p>3） <strong>相位缓冲段1</strong> （Phase Buffer Segment1）：</p>
<ul>
<li>用于补偿节点间的晶振误差；</li>
<li>允许通过重同步对该段加长；</li>
<li>在这个时间段的末端进行总线状态的采样；</li>
<li>长度可编程（1~8个时间量子Tq）</li>
</ul>
<p>4） <strong>相位缓冲段2</strong> （Phase Buffer Segment2）：</p>
<ul>
<li>用于补偿节点间的晶振误差；</li>
<li>允许通过重同步对该段缩短；</li>
<li>长度可编程（1~8个时间量子Tq）</li>
</ul>
<p>于是</p>
<script type="math/tex; mode=display">
tBit=tSS+tPS+tPBS1+tPBS2</script><p>tBit:位时间</p>
<p>tSS:同步段时间</p>
<p>tPS:传播段时间</p>
<p>tPBS1:时间段1</p>
<p>tPBS2:时间段2</p>
<h3 id="4-7-2-CAN的同步机制"><a href="#4-7-2-CAN的同步机制" class="headerlink" title="4.7.2 CAN的同步机制"></a><strong><strong>4.7.2 CAN的同步机制</strong></strong></h3><p>在CAN通信中，有两种同步机制：<strong>硬同步</strong>与 <strong>重同步</strong> 。</p>
<h4 id="4-7-2-1-同步的规则"><a href="#4-7-2-1-同步的规则" class="headerlink" title="4.7.2.1 同步的规则"></a><strong><strong>4.7.2.1 同步的规则</strong></strong></h4><p>☆<strong>一个位时间</strong>内只允许 <strong>一种同步方式</strong> ，要么硬同步要么重同步；</p>
<p>☆ 任何一个从“隐性”到“显性”的<strong>下降沿</strong>都可以用于同步；</p>
<p>☆<strong>硬同步</strong>发生在报文的 <strong>SOF位</strong> ，所有接收节点调整各自当前位的同步段，使其位于发送的SOF位内；</p>
<p>☆<strong>重同步</strong>发生在一个报文 <strong>SOF位之外的其它段</strong> ，当下降沿落在了同步段之外时发生重同步；</p>
<p>☆ 在SOF到仲裁场发送的时间段内，如果有多个节点同时发送报文，那么这些发送节点对跳变沿不进行重同步</p>
<h4 id="4-7-2-2-硬同步"><a href="#4-7-2-2-硬同步" class="headerlink" title="4.7.2.2 硬同步"></a><strong><strong>4.7.2.2 硬同步</strong></strong></h4><p>硬同步发生在 <strong>SOF位</strong> ，所有<strong>接收节点</strong>调整各自 <strong>当前位的同步段</strong> ，<strong>调整宽度不限</strong></p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1701348277220.png" alt="1701348277220"></p>
<p>（1）发送节点Node_A在发送SOF位时，SOF位的下降沿在SS段；</p>
<p>（2）这个时候接收节点Node_B发现自己当前位的SS段和发送节点SOF位的SS段不同步。也就是说当Node_A产生SOF位SS段时，Node_B的当前位的SS段已经在5个Tq之前产生了；</p>
<p>（3）于是接收节点Node_B强行将自己当前位的SS段拉到与SOF位的SS段同步。</p>
<h4 id="4-7-2-3-重同步"><a href="#4-7-2-3-重同步" class="headerlink" title="4.7.2.3 重同步"></a><strong><strong>4.7.2.3 重同步</strong></strong></h4><p>重同步发生在一个报文SOF位之外的其它位场内，当接收节点Node_B当前位的下降沿落在了发送节点Node_A当前位的同步段之外时发生重同步。</p>
<p>重同步会导致<strong>相位缓冲段1的延长</strong>或者 <strong>相位缓冲段2的缩短</strong> ，从而保证采样点的准确。</p>
<h5 id="4-7-2-3-1-PBS1延长"><a href="#4-7-2-3-1-PBS1延长" class="headerlink" title="4.7.2.3.1 PBS1延长"></a><strong><strong>4.7.2.3.1 PBS1延长</strong></strong></h5><p>发的晚（慢），收的早（块），导致PBS1延长。</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1701348305070.png" alt="1701348305070"></p>
<p>如上图所示：</p>
<p>（1）发送节点Node_A比接收节点Node_B的时间慢了，也就是说Node_A当前位的ss段产生的时候，Node_B 当前位的ss段已经在2个Tq之前产生了；</p>
<p>（2）所以这个时候接收节点Node_B就将PBS1延长2个Tq的时间；</p>
<p>（3）于是这个时候Node_A当前位的采样点就和Node_B的采样点同步了。</p>
<h5 id="4-7-2-3-2-PBS2缩短"><a href="#4-7-2-3-2-PBS2缩短" class="headerlink" title="4.7.2.3.2 PBS2缩短"></a><strong><strong>4.7.2.3.2 PBS2缩短</strong></strong></h5><p>发的早（快），收的晚（慢），导致PBS2缩短。</p>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1701348322758.png" alt="1701348322758"></p>
<p>如上图所示： </p>
<p>（1）发送节点Node_A当前位的SS段诞生2Tq时长之后，接收节点Node_B的当前位才产生SS段； </p>
<p>（2）于是，接收节点Node_B当前位的PBS2段缩短， </p>
<p>（3）这样就会导致接收节点Node_B的下一位能够提前2个Tq，从而Node_B的下一位采样点和Node_A下一位的采样点能够同步。</p>
<h5 id="4-7-2-3-3-同步跳转宽度"><a href="#4-7-2-3-3-同步跳转宽度" class="headerlink" title="4.7.2.3.3 同步跳转宽度"></a><strong><strong>4.7.2.3.3 同步跳转宽度</strong></strong></h5><p>在重同步时，有个 <strong>同步跳转宽度</strong> （SJW，Synchro Jump Width）的概念，表示的是 <strong>PBS1和PBS2重同步时允许跳转的最大宽度</strong> 。 同步跳转宽度必须满足以下几个条件：</p>
<ul>
<li>SJW必须小于PBS1和PBS2的最小值</li>
<li>SJW最大值不能超过4</li>
</ul>
<h3 id="4-7-3-位定时参数的确定"><a href="#4-7-3-位定时参数的确定" class="headerlink" title="4.7.3 位定时参数的确定"></a><strong><strong>4.7.3 位定时参数的确定</strong></strong></h3><p>位定时的参数主要涉及以下几个：</p>
<p>（1） <strong>位速率</strong> ：单位为bps、Kbps、Mbps</p>
<script type="math/tex; mode=display">
1Mbps=1000Kbps=1000000bps</script><p>（2）  <strong>位时间</strong> ：tBit，单位一般为纳秒(ns)</p>
<script type="math/tex; mode=display">
tBit=1/位速率</script><p>（3）  <strong>时间量子Tq</strong> ：</p>
<script type="math/tex; mode=display">
Tq=1/NBT</script><p>NBT 表示的是一个位时间tBit内包含Tq的个数。</p>
<p>（4）<strong>传输延迟时间tPTS</strong></p>
<p>CAN报文在CAN总线上的传输时，物理延迟包含两个部分：</p>
<ul>
<li>在CAN-BUS上传输造成的延迟</li>
<li>在节点上传输造成延迟</li>
</ul>
<p><img src="/2024/04/02/%E9%80%9A%E4%BF%A1%E7%A7%8D%E7%B1%BB/image/1701348371887.png" alt="1701348371887"></p>
<p>按照CAN通信协议的规定，补偿给传播延迟的时间长度要至少等于实际实际传播延迟时长的2倍，即：</p>
<script type="math/tex; mode=display">
tPTS≥2×tdel=2×(tdel+tBus)</script><p> <strong>需要注意的是</strong> ：</p>
<blockquote>
<p>Tips: 在CAN总线通信系统中是以时间量子Tq来度量时间的，所以如果延迟补偿时间tPTS = 3.1Tq，那么这个时候要取：tPTS = 4Tq。</p>
</blockquote>
<p>（5）<strong>相位缓冲段</strong> 相位缓冲段的时间长度分为两种情况：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (NBT-1-tPTS_Tq)/2==偶数</span><br><span class="line">    PBS1_Tq = PBS2_Tq = (NBT-1-tPTS_Tq)/2</span><br><span class="line">else</span><br><span class="line">    PBS1_Tq = (NBT-1-tPTS_Tq)/2</span><br><span class="line">    PBS2_Tq = PBS1_Tq + 1</span><br></pre></td></tr></table></figure>
<p>(6) <strong>同步跳转宽度</strong></p>
<script type="math/tex; mode=display">
SJW=min(PBS1_Tq,4)</script><p>(7)<strong>验证晶振误差Df</strong></p>
<p>CAN总线的晶振误差必须同时满足下面三个条件：</p>
<script type="math/tex; mode=display">
Df<=SJW(2×10×NBT)</script><script type="math/tex; mode=display">
Df<=min(PBS1_Tq,PBS2_Tq)2×(13×NBT−PBS2_Tq)</script><script type="math/tex; mode=display">
Df≤1.58%</script><h3 id="4-7-4-例子"><a href="#4-7-4-例子" class="headerlink" title="4.7.4 例子"></a><strong><strong>4.7.4 例子</strong></strong></h3><p>以下面的例子来讲述位定时参数的确定方法：</p>
<p>MCU晶振16MHz，位速率1Mbps，总线长度20m，单位总线延迟5ns/m，物理接口的发送接收延迟150ns</p>
<p>（1）晶振时钟周期：T=1s/16MHz = 62.5ns</p>
<p>（2）位时间 ：tBit = 1/1Mbps = 1000ns</p>
<p>（3）BPR和NBT：考虑到 T = 125ns，tBit = 1000ns，所以BPR只能取值为1，才能满足NBT∈[8,25],于是预分频数BPR=1；</p>
<p>（4）CAN时钟周期Tq = 2 × 62.5 × 1 = 125ns</p>
<p>（5）NBT = 8</p>
<p>（6）传输延迟时间tPTS</p>
<script type="math/tex; mode=display">
tPTS=2×（20×5+150）=500ns</script><p>所以</p>
<script type="math/tex; mode=display">
tPTS_Tq=tPTSTq=500125=4</script><p>于是NBT=8个Tq的长度中需要有4个Tq用于补偿传播延迟，于是还剩下4个Tq，</p>
<p>SS同步段长度固定占据1个Tq，还剩3个Tq，于是PBS1分配一个Tq，PBS2分配2个Tq。</p>
<p>（7）同步跳转宽度</p>
<script type="math/tex; mode=display">
SJW=min{PBS1,4}=1</script><p>（8）晶振误差</p>
<script type="math/tex; mode=display">
Df<=SJW(2×10×NBT)=1(2×10×8)=0.00625</script><script type="math/tex; mode=display">
Df<=min(PBS1_Tq,PBS2_Tq)2×(13×NBT−PBS2_Tq)</script><script type="math/tex; mode=display">
=12×(13×8−2)=0.00490</script>]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>嵌入式通讯协议</tag>
      </tags>
  </entry>
  <entry>
    <title>基础通信知识</title>
    <url>/2024/04/03/%E5%9F%BA%E7%A1%80%E9%80%9A%E4%BF%A1%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h1 id="串行与并行"><a href="#串行与并行" class="headerlink" title="串行与并行"></a>串行与并行</h1><h2 id="1-串行通信"><a href="#1-串行通信" class="headerlink" title="1. 串行通信"></a>1. 串行通信</h2><p>位通过单根线一一发送，下图显示了二进制（01000011）中字母“C”的串行传输。<br>当时钟线为高电平时，接收数据位，高电平为1，低电平为0。</p>
<p><img src="/2024/04/03/%E5%9F%BA%E7%A1%80%E9%80%9A%E4%BF%A1%E7%9F%A5%E8%AF%86/image/1699358426009.png" alt="1699358426009"></p>
<h2 id="2-并行通信"><a href="#2-并行通信" class="headerlink" title="2. 并行通信"></a>2. 并行通信</h2><p>数据位在导线中同时传输，下图显示了二进制（01000011）中字母“C”的并行传输：<br>的当时钟线为高电平时，8个数据位同时接受数据，高电平为1，低电平为0<br><img src="/2024/04/03/%E5%9F%BA%E7%A1%80%E9%80%9A%E4%BF%A1%E7%9F%A5%E8%AF%86/image/1699358552501.png" alt="1699358552501"><br>所以UART、SPI、I2C都是串口通信，因为它们都是通过一根线作为数据线传输数据。</p>
<h1 id="单工、全双工与半双工"><a href="#单工、全双工与半双工" class="headerlink" title="单工、全双工与半双工"></a>单工、全双工与半双工</h1><h2 id="1-单工"><a href="#1-单工" class="headerlink" title="1. 单工"></a>1. 单工</h2><p>发送端只能发送信息，不能接收信息；接收端只能接收信息，不能发送信息。基于这种情况，数据信号从一端传送到另外一端，信号流是单方向的。</p>
<h2 id="2-全双工："><a href="#2-全双工：" class="headerlink" title="2. 全双工："></a>2. 全双工：</h2><p>通信的任意时刻，线路上存在A到B和B到A的双向信号传输。 全双工通信允许数据同时在两个方向上传输，又称为双向同时通信，即通信的双方可以同时发送和接收数据。在全双工方式下，通信系统的每一端都设置了发送器和接收器，因此，能控制数据同时在两个方向上传送，全双工方式无需进行方向的切换。</p>
<p>简单来说，比如我们在打电话时，我们可以在同一时间说话，这就是全双工通信。</p>
<h2 id="3-半双工"><a href="#3-半双工" class="headerlink" title="3. 半双工"></a>3. 半双工</h2><p>可以实现双向的通信，但不能在两个方向上同时进行，必须轮流交替地进行。在这种工作方式下，发送端可以转变为接收端；相应地，接收端也可以转变为发送端。但是在同一个时刻，信息只能在一个方向上传输。因此，也可以将半双工通信理解为一种切换方向的单工通信。</p>
<p>UART和SPI都是全双工通信方式，因为他们的数据线都有两根，即可以在同一时间A发数据给B，B也可以在这个时间发数据给A。如I2C通信，因为他只有一根数据线，所以他不能在同一时间双向传输数据。</p>
<h1 id="同步通信和异步通信"><a href="#同步通信和异步通信" class="headerlink" title="同步通信和异步通信"></a>同步通信和异步通信</h1><p>同步是阻塞模式，异步是非阻塞模式。</p>
<h2 id="1-同步通信"><a href="#1-同步通信" class="headerlink" title="1. 同步通信"></a>1. 同步通信</h2><p>发送方发出数据后，等接收方发回响应以后才发下一个数据包的通讯方式。</p>
<p>在同步传输中，数据传输是按照定时信号进行的。发送方和接收方都需要遵守同样的时序规则，以确保数据能够正确地传输。发送方按照固定的时间间隔发送数据，接收方则按照相同的时间间隔接收数据。由于同步传输需要一定的时序同步，因此在高速传输和长距离传输时，同步传输具有较好的抗干扰能力和可靠性。(同步就是通信双方按照一定时序规则收发数据，常用于高速、长距离通信)</p>
<h2 id="2-异步通信"><a href="#2-异步通信" class="headerlink" title="2. 异步通信"></a>2. 异步通信</h2><p>发送方发出数据后，不等接收方发回响应，接着发送下个数据包的通讯方式。</p>
<p>在异步传输中，数据传输没有固定的时间间隔。发送方和接收方可以按照自己的节奏进行数据传输，发送方发送数据时不需要等待接收方的响应。因此，异步传输的速度相对较慢，但可以在低速传输和知短距离传输时使用，例如串口通信。(异步就是通信双方想发送就发送，常用于低速短距离通信，如串口通信)</p>
<p>所以SPI和I2C都是同步通信，因为他们都有时钟线，UART是异步通信方式，他只有两个数据线，发送完数据不会确认你是否接收到。</p>
<h1 id="波特率"><a href="#波特率" class="headerlink" title="波特率"></a>波特率</h1><p>波特率BR是单位时间传输的数据位数</p>
<p>单位：bps1bps=1bit/s。</p>
<p>采用异步串行，互相通信甲乙双方必须具有相同的波特率，否则无法成功地完成数据通信；</p>
<p>而在同步串行中，发送和接收数据是由同步时钟触发发送器和接收器而实现的。</p>
<p><strong>注：同步通信中数据传输的同步时钟频率就是波特率：而在异步通信中，时钟频率可为波特率的整数倍。</strong></p>
<p>注意：关于通信协议，我们通常需要考虑四个点：</p>
<p>1.有无clock</p>
<p>2.一次传多少数据位</p>
<p>3.是否支持同时收发</p>
<p>4.是否需要回复ack</p>
]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>嵌入式通讯协议</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32启动流程</title>
    <url>/2024/04/04/STM32%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/luobeihai/article/details/117595762">STM32启动过程分析___initial_sp-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/qq_39400113/article/details/116051401">STM32三种BOOT启动模式详解(全网最全)_果果小师弟的博客-CSDN博客</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/123291856">STM32第二章-启动过程详解 - 知乎 (zhihu.com)</a></p>
<h1 id="优秀链接："><a href="#优秀链接：" class="headerlink" title="优秀链接："></a>优秀链接：</h1><p><a href="https://www.emoe.xyz/stm32-boot-modeboot-filelinkerscript-analyze/">STM32 启动模式、启动文件和链接脚本分析 - Emoe-Studio</a></p>
<p><a href="https://gaoyichao.com/Xiaotu/?book=stm32&amp;title=STM32%E7%9A%84%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B">无处不在的小土-STM32的启动过程 (gaoyichao.com)</a></p>
<p><a href="https://doc.embedfire.com/mcu/stm32/f4/hal_general/zh/latest/doc/chapter14/chapter14.html">13. 启动文件详解 — [野火]STM32 HAL库开发实战指南——基于野火F4系列开发板 文档 (embedfire.com)</a></p>
<p><a href="https://bbs.huaweicloud.com/blogs/375425">STM32的启动过程 — startup_xxxx.s文件解析（MDK和GCC双环境）-云社区-华为云 (huaweicloud.com)</a></p>
<p><a href="https://xie.infoq.cn/article/bb7ca59b25e72f6e854e9e81f">STM32的启动过程 — startup_xxxx.s文件解析（MDK和GCC双环境）_stm32_矜辰所致_InfoQ写作社区</a></p>
<p><a href="https://fivecakes.com/p/650793a15f109b070f00d57a">STM32学习笔记（程序下载与启动流程） (fivecakes.com)</a></p>
<h1 id="STM32-启动模式、启动文件和链接脚本分析"><a href="#STM32-启动模式、启动文件和链接脚本分析" class="headerlink" title="STM32 启动模式、启动文件和链接脚本分析"></a>STM32 启动模式、启动文件和链接脚本分析</h1><p>参考文章：</p>
<p><a href="https://www.emoe.xyz/stm32-boot-modeboot-filelinkerscript-analyze/">STM32 启动模式、启动文件和链接脚本分析 - Emoe-Studio</a></p>
<h1 id="1-启动模式"><a href="#1-启动模式" class="headerlink" title="1 启动模式"></a>1 启动模式</h1><p>几乎每一块刚出场的MCU或其他控制芯片，都在其内部非易失存储器ROM中烧录了最基础的代码，<strong>CPU搬运并运行第一条代码的默认位置</strong>就在ROM的地址空间中，因此，我们可以看到，代码的执行与ROM相关，与硬件紧密联系。</p>
<p>对于Cortex-M系列核心的ARM芯片来说，硬件复位后，首先进行的是以下步骤（以STM32为例，其他厂商MCU部分流程可能会不同）：</p>
<ol>
<li>CPU 内的时序逻辑电路（程序代码下载到内部FLASH为例，FLASH首地址 <code>0x0800 0000</code>）将PC指针寄存器直接复位到零地址，且根据锁存的 <strong>Boot引脚的电平</strong> （启动模式），将不同存储区的首地址映射到零地址处；</li>
<li>硬件从地址0x0取出主堆栈指针（Top of Stack，Set the initial SP），存入SP指针中；</li>
<li><p>硬件从主堆栈指针后取出复位向量的地址（Set the initial PC == Reset_Handler），存入PC指针中；</p>
<p><strong>PC指针寄存器直接复位到零地址</strong> ，随后从中断向量表表头的 <code>RESET</code>向量表处获取 <strong>下一步跳转的地址</strong> （后续程序代码的PC指针寄存器的初始值） <strong>CPU会从PC指针寄存器指向的地址空间取出指令执行程序，而取完MSP后，一般会执行的第一段代码为复位中断服务程序 Reset_Handler</strong> 。</p>
</li>
</ol>
<p>一般情况下（以STM32G474RE+GCC为例），复位程序会根据SDK提供的初始化汇编脚本，（目录为 <code>/Core/Startup/startup_stm32g474retx.s</code>）,初始化存放在片上SRAM中的bss节（初值为0或者没有设置初值的变量）和data节（初值非0）,以及其他SDK代码运行所需节的变量，随后执行 <code>/Core/Src/system_stm32g4xx.c</code>中的SystemInit函数对核心功能（如FPU）进行使能,之后对 <code>Newlib</code>初始化后跳转进入main函数。</p>
<p> <img src="/2024/04/04/STM32%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image/1701431410456.png" alt="1701431410456"></p>
<p><img src="/2024/04/04/STM32%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image/1701431418126.png" alt="1701431418126"></p>
<h2 id="1-1-启动模式选择"><a href="#1-1-启动模式选择" class="headerlink" title="1.1 启动模式选择"></a>1.1 启动模式选择</h2><p>我们可以看到STM32的存储器架构中，无论是厂家内置的的内部引导Rom（<code>BootROM of System Flash</code>，<code>Rom Code</code>）中的引导加载程序（<code>BootLoader</code>）还是Code Flash内的用户应用程序，亦或者是应用于SRAM中的调试代码， <strong>其地址都不在 <code>0x0000 0000</code>上</strong> ，而通过地址映射，可以将三种不同（亦或更多）的存储空间地址映射到 <code>0x0000 0000</code>地址处，也即 <strong>启动模式选择</strong> 。对于STM32和部分其他厂商的MCU来说， <strong>通过 <code>Boot</code>引脚的选择（只在上电时检测，复位后重新锁存）来确定存储空间的映射是最常见可靠的一种方式</strong> ，可以实现将CodeFlash、System Flash或SRAM的首地址映射到 <code>0x0000 0000</code>，实现程序从不同的存储器位置启动。</p>
<blockquote>
<p>注：启动模式只决定程序烧录的位置，复位后，需要重新锁存Boot引脚的选择。STM32上电复位以后，代码区都是从 <code>0x0000 0000</code>开始的，启动模式只是将各自存储空间的地址映射到 <code>0x0000 0000</code>。</p>
<p>相比F1，F4的启动方式，H7的启动方式更灵活些，只需一个boot引脚即可。但是一个引脚只能区分出两个状态，为了解决这个问题，H7专门配套了两个option bytes选项字节来解决此问题。</p>
</blockquote>
<p>以STM32的Cortex-M核心MCU为例，启动时PC指针会固定跳转到0地址处，可以将System Boot、Internal Flash亦或者Internal SRAM的地址映射到0地址处，更有甚者，我们可以映射External Flash、External RAM到0地址处。这需要外部Boot引脚的电平引脚的配比来实现，有时也需要硬件的XIP功能以及二次引导代码的支持（放在Internal Flash起始处，并映射到0地址）。</p>
<p><img src="/2024/04/04/STM32%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image/1701431458729.png" alt="1701431458729"></p>
<p>STM32的三种基本启动模式：</p>
<ol>
<li>主闪存存储器(<code>Main Flash</code>)启动：从STM32内置的Flash启动(<code>0x0800 0000</code>–<code>0x0807 FFFF</code>)，一般我们使用 <code>JTAG</code>或者 <code>SWD</code>调试接口下载程序时，就是直接写入到Flash里面，重启后也直接从这启动程序。以 <code>0x0800 0000</code> 对应的内存为例，则该块内存既可以通过 <code>0x0000 0000</code> 操作也可以通过 <code>0x0800 0000</code> 操作，且都是操作的同一块内存。</li>
<li>系统存储器(<code>System Memory</code>)启动：从系统存储器启动(<code>0x1FFF F000</code> – <code>0x1FFF F7FF</code>)，这种模式启动的程序功能是由厂家设置的。一般来说，我们选用这种启动模式时，是为了从串口下载程序，因为在厂家提供的 <code>ISP</code>程序中，提供了串口下载程序的固件，可以通过这个 <code>ISP</code>程序将用户程序下载到系统的Flash中。以 <code>0x1FFF FFF0</code>对应的内存为例，则该块内存既可以通过 <code>0x0000 0000</code> 操作也可以通过 <code>0x1FFF FFF0</code>操作，且都是操作的同一块内存。</li>
<li>片上SRAM启动：从内置SRAM启动(<code>0x2000 0000</code>–<code>0x3FFF FFFF</code>)，既然是SRAM，自然也就没有程序存储的能力了，这个模式一般用于程序调试。SRAM 只能通过 <code>0x2000 0000</code>进行操作，与上述两者不同。<strong>从SRAM 启动时，需要在应用程序初始化代码中重新设置向量表的位置。（ST在SystemInit函数中预先提供了重定向中断向量表的操作，声明对应的宏即可自动重定向）</strong></li>
</ol>
<p>表. F1/F4等系列MCU的启动模式选择<br><img src="/2024/04/04/STM32%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image/1701431473545.png" alt="1701431473545"><br>表.H7的启动模式选择</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>BOOT引脚</th>
<th>BOOT选项寄存器</th>
<th>BOOT区域</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>BOOT_ADD0[15:0]</td>
<td>启动地址由BOOT_ADD0定义，默认值是0x0800，对应Flash首地址0x0800 0000。</td>
</tr>
<tr>
<td>1</td>
<td>BOOT_ADD1[15:0]</td>
<td>启动地址由BOOT_ADD1定义，默认值是0x1FF0，对应系统bootloader的首地址0x1FF0 0000。</td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p>BOOT_ADD0和BOOT_ADD1对应32位地址到高16位，这点要特别注意。通过这两个选项字节，所有0x0000 0000到0x3FFF 0000的存储器地址都可以设置，包括：</p>
<ol>
<li>所有Flash地址空间；</li>
<li>所有RAM地址空间，ITCM，DTCM和SRAM。</li>
</ol>
<p>设置了选项字节后， <strong>掉电不会丢失</strong> ，下次上电或者复位后，会根据BOOT引脚状态从BOOT_ADD0，或BOOT_ADD1所设置的地址进行启动。</p>
</blockquote>
<h2 id="1-2-为什么STM32的Flash地址要设置到0x0800-0000"><a href="#1-2-为什么STM32的Flash地址要设置到0x0800-0000" class="headerlink" title="1.2 为什么STM32的Flash地址要设置到0x0800 0000"></a>1.2 为什么STM32的Flash地址要设置到0x0800 0000</h2><p>ARM官方回复：<a href="https://developer.arm.com/documentation/ka001328/latest">Documentation – Arm Developer</a></p>
<p>翻译成中文，ARM官方的回答的意思如下：</p>
<blockquote>
<p>复位后，Cortex-M3内核只能从0x0地址启动，但通过写向量偏移寄存器VTOR（<code>0xE000 ED08</code>），可以在程序执行过程中重定位中断向量表。</p>
<p>Cortex-M3内核的启动顺序与传统ARM内核不同，在地址0x0提取的第一个参数为SP的初始值，第二个参数（位于 <code>0x0000 0004</code>）为复位中断服务程序地址，即程序代码的起始地址。另一件需要注意的事是Cortex-M3的中断向量表入口是地址值，而不是像传统ARM内核的分支指令。此外，创建一个 <code>bit[0]</code>大小的表项（？）还会在与该向量对应的中断处理程序的第一条指令上产生INVESTATE错误。</p>
</blockquote>
<p><img src="/2024/04/04/STM32%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image/1701431525272.png" alt="1701431525272"></p>
<h3 id="1-2-1-背景知识"><a href="#1-2-1-背景知识" class="headerlink" title="1.2.1 背景知识"></a>1.2.1 背景知识</h3><p>从上文我们可以知道，M3，M4内核芯片上电复位后，要固定从0x0000 0000地址读取中断向量表，获取复位中断服务程序的入口地址后，进入复位中断服务程序，其中 <strong>0x0000 0000是栈顶地址（MSP），0x0000 0004存的是复位中断服务程序地址</strong> 。</p>
<p><img src="/2024/04/04/STM32%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image/1701431566615.png" alt="1701431566615"></p>
<p><img src="/2024/04/04/STM32%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image/1701431535502.png" alt="1701431535502"></p>
<h3 id="1-2-2-问题解释"><a href="#1-2-2-问题解释" class="headerlink" title="1.2.2 问题解释"></a>1.2.2 问题解释</h3><p>既然ARM规定了M3，M4内核要从地址 <code>0x0000 0000</code>读取中断向量表，而STM32设置Flash地址到 <code>0x0800 0000</code>怎么办？</p>
<p>STM32支持内存重映射功能，将<strong>地址 <code>0x0800 0000</code>开始的内容重映射</strong>到首地址 <code>0x0000 0000</code>中，这样就解决了从 <code>0x0000 0000</code>读取中断向量表的问题。</p>
<p>图示，以STM32F407IGT6为例，0x0000 0000和0x0800 0000开始的程序对比，并没有什么不同：</p>
<p><img src="/2024/04/04/STM32%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image/1701431673276.png" alt="1701431673276"></p>
<h3 id="1-2-3-怎么保证0x08000-0000首地址存的就是中断向量表，不可以随意设置吗？"><a href="#1-2-3-怎么保证0x08000-0000首地址存的就是中断向量表，不可以随意设置吗？" class="headerlink" title="1.2.3 怎么保证0x08000 0000首地址存的就是中断向量表，不可以随意设置吗？"></a>1.2.3 怎么保证0x08000 0000首地址存的就是中断向量表，不可以随意设置吗？</h3><p>保证中断向量表存到0x0800 0000，这个涉及到分散加载（链接脚本）的一个小知识，以MDK为例，如果大家看xxx.S启动文件，里面通过 <code>AREA</code>定义了一个名叫 <code>RESET</code>的段，这段存的就是中断向量表。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">; Vector Table Mapped to Address 0 at Reset</span><br><span class="line">                AREA    RESET, DATA, READONLY</span><br><span class="line">                EXPORT  __Vectors</span><br><span class="line">                EXPORT  __Vectors_End</span><br><span class="line">                EXPORT  __Vectors_Size</span><br></pre></td></tr></table></figure>
<p>这个名字很重要，MDK对应的xxx.sct分散加载（GCC下的链接脚本也将中断向量表放在 <code>.text</code>段的开头）里面通过下面这句将这个 <code>RESET</code>段放在了 <code>0x0800 0000</code>优先存储。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">; *************************************************************</span><br><span class="line">; *** Scatter-Loading Description File generated by uVision ***</span><br><span class="line">; *************************************************************</span><br><span class="line"></span><br><span class="line">LR_IROM1 0x08000000 0x00200000  &#123;    ; load region size_region</span><br><span class="line">  ER_IROM1 0x08000000 0x00200000  &#123;  ; load address = execution address</span><br><span class="line">   *.o (RESET, +First)</span><br><span class="line">   *(InRoot$Sections)</span><br><span class="line">   .ANY (+RO)</span><br><span class="line">   .ANY (+XO)</span><br><span class="line">  &#125;</span><br><span class="line">  RW_IRAM2 0x24000000 0x00080000  &#123;  ; RW data</span><br><span class="line">   .ANY (+RW +ZI)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>GCC的实现方式类似，是在链接脚本内SECTIONS部分开头部位定义了.isr_vector段用于存放中断向量表，这样链接器进行链接时按顺序安置变量就会将其放在 <code>0x0800 0000</code>。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SECTIONS</span><br><span class="line">&#123;</span><br><span class="line">  /* The startup code into &quot;FLASH&quot; Rom type memory */</span><br><span class="line">  .isr_vector :</span><br><span class="line">  &#123;</span><br><span class="line">    . = ALIGN(4);</span><br><span class="line">    KEEP(*(.isr_vector)) /* Startup code */</span><br><span class="line">    . = ALIGN(4);</span><br><span class="line">  &#125; &gt;FLASH</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>这样我们就解决了 <code>0x0800 0000</code>首地址存储中断向量表，一旦程序开始运行后，我们就可以随意设置中断向量表的位置了。比如想将中断向量表存到内部SRAM，我们就可以操作寄存器 <code>SCB-&gt;VTOR</code> 重新安排，然后将 <code>0x0800 0000</code>的内容复制到设置的地址内即可。</p>
<h3 id="1-2-4-设置到0x0800-0000这么麻烦，为什么不直接使用0x0000-0000？"><a href="#1-2-4-设置到0x0800-0000这么麻烦，为什么不直接使用0x0000-0000？" class="headerlink" title="1.2.4 设置到0x0800 0000这么麻烦，为什么不直接使用0x0000 0000？"></a>1.2.4 设置到0x0800 0000这么麻烦，为什么不直接使用0x0000 0000？</h3><p>回到这一个小节问题的本身，为什么不直接使用0x0000 0000？</p>
<p>因为STM32不仅可以从内部Flash启动，还可以从系统存储器（可以实现串口ISP，USB DFU等程序下载方式，这个程序是ST固化好的程序代码）和从内部SRAM启动，我们将内部Flash安排到0x0000 0000显然是不行的。这样会导致系统存储器或者内部SRAM无法重映射到0x0000 0000了。</p>
<p><img src="/2024/04/04/STM32%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image/1701431690508.png" alt="1701431690508"></p>
<h3 id="1-2-5-了解了M3和M4，M7是怎么个执行情况呢？"><a href="#1-2-5-了解了M3和M4，M7是怎么个执行情况呢？" class="headerlink" title="1.2.5 了解了M3和M4，M7是怎么个执行情况呢？"></a>1.2.5 了解了M3和M4，M7是怎么个执行情况呢？</h3><p>M7内核比较灵活，改变了固定从0x0000 0000地址读取中断向量表，以STM32H7为例，可以从 0x0000 0000 到 0x3FFF 0000 所有地址进行启动，并且专门安排了个选项字节来配置。</p>
<p><img src="/2024/04/04/STM32%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image/1701431708678.png" alt="1701431708678"></p>
<blockquote>
<p>H7里面没有传统风格的重映射，它的首地址0x0000 0000安排给ITCM RAM空间使用。</p>
</blockquote>
<p>以下，我们结合正点原子的MiniPRO STM32H750开发板 HAL库例程的 实验 1 跑马灯实验中，取出的 <code>MSP</code>和 <code>PC</code>的值是多少，方法如图。</p>
<p><img src="/2024/04/04/STM32%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image/1701431726276.png" alt="1701431726276"></p>
<p>由图可以知道地址 <code>0x0800 0000</code>的值是 <code>0x2400 0BD8</code>，地址 <code>0x0800 0004</code>的值是 <code>0x0800 0339</code>，即 堆栈指针SP = <code>0x2400 0BD8</code>程序计数器指针PC = <code>0x0800 0339</code>（即复位中断服务程序 <code>Reset_Handler</code>的入口地址），因为 <strong>CM7内核是小端模式，所以字节之间倒着读</strong> 。</p>
<blockquote>
<p>注意，这与传统的ARM架构不同，其实也和绝大多数其它架构MCU不同。 <strong>传统的ARM架构总是从0地址开始执行第一条指令</strong> ，它们的 <code>0</code>地址处总是一条跳转指令。而在CM3内核中，<code>0</code>地址处提供 <code>MSP</code>的初始值，然后是向量表（ <strong>向量表在启动之后还可以被移至其它位置</strong> ）。向量表中的数值是32位的地址，而不是跳转指令。向量表的第一个条目指向复位后应执行的第一条指令，就是 <code>Reset_Handler</code>这个函数。</p>
</blockquote>
<p>下面继续以跑马灯实验为例，代码从地址 <code>0x0800 0000</code>开始被执行，讲解系统启动，初始化堆栈、<code>MSP</code>和 <code>PC</code>后的内存情况。</p>
<p><img src="/2024/04/04/STM32%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image/1701431742369.png" alt="1701431742369"></p>
<p>因为CM7使用的是 <strong>向下生长的满栈</strong> ，所以 <strong>MSP的初始值必须是堆栈内存的末地址加1（MSP是栈顶指针）</strong> 。举例来说，如果你的栈区域在 <code>0x2400 03D8</code>~<code>0x2400 0BD4</code>，2KB大小）之间，那么 <code>MSP</code>的初始值就必须是 <code>0x2400 0BD8</code>。</p>
<p><strong>向量表跟随在MSP的初始值之后,也就是第2个表目。</strong></p>
<p><code>r15</code>是程序计数器，在汇编代码中，可以使用名字 <code>PC</code>来访问它。 <strong>MCU主要执行Thumb指令(指令长度更短，节约空间)</strong> 。 <strong>此外，读PC时返回的值是当前指令的地址+4</strong> 。比如说：</p>
<p>正因为上述原因，使用 <code>0x0800 0339</code>来表达地址 <code>0x0800 0338</code>。 <strong>当 <code>0x0800 0339</code>处的指令得到执行后，就正式开始了程序的执行（即去到C的世界）</strong> 。所以在此之前 <strong>初始化 <code>MSP</code>是必需的</strong> ，因为可能第1条指令还没执行就会被 <code>NMI</code>或是其它异常打断。<strong><code>MSP</code>初始化好后就已经为它们的服务例程准备好了堆栈。</strong></p>
<h1 id="2-STM32-启动文件分析（基于GCC）"><a href="#2-STM32-启动文件分析（基于GCC）" class="headerlink" title="2 STM32 启动文件分析（基于GCC）"></a>2 STM32 启动文件分析（基于GCC）</h1><p>参考链接：<a href="https://sourceware.org/binutils/docs/as.html#Word">Using as (sourceware.org)</a>，需要注意的是我们的主要内容参考 <code>ELF</code>格式。</p>
<blockquote>
<p>GCC下启动文件实现的功能与在MDK环境下启动文件实现的功能并无本质上的区别，此处结合startup_stm32h750xx.s进行说明。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">  ******************************************************************************</span><br><span class="line">  * @file      startup_stm32h750xx.s</span><br><span class="line">  * @author    MCD Application Team</span><br><span class="line">  * @brief     STM32H750xx Devices vector table for GCC based toolchain. </span><br><span class="line">  *            This module performs:</span><br><span class="line">  *                - Set the initial SP</span><br><span class="line">  *                - Set the initial PC == Reset_Handler,</span><br><span class="line">  *                - Set the vector table entries with the exceptions ISR address</span><br><span class="line">  *                - Branches to main in the C library (which eventually</span><br><span class="line">  *                  calls main()).</span><br><span class="line">  *            After Reset the Cortex-M processor is in Thread mode,</span><br><span class="line">  *            priority is Privileged, and the Stack is set to Main.</span><br><span class="line">  ******************************************************************************</span><br><span class="line">  * @attention</span><br><span class="line">  *</span><br><span class="line">  * Copyright (c) 2018 STMicroelectronics.</span><br><span class="line">  * All rights reserved.</span><br><span class="line">  *</span><br><span class="line">  * This software component is licensed by ST under BSD 3-Clause license,</span><br><span class="line">  * the &quot;License&quot;; You may not use this file except in compliance with the</span><br><span class="line">  * License. You may obtain a copy of the License at:</span><br><span class="line">  *                        opensource.org/licenses/BSD-3-Clause</span><br><span class="line">  *</span><br><span class="line">  ******************************************************************************</span><br><span class="line">  */</span><br></pre></td></tr></table></figure>
<h2 id="2-1-常见的GNU汇编伪代码-指令"><a href="#2-1-常见的GNU汇编伪代码-指令" class="headerlink" title="2.1 常见的GNU汇编伪代码/指令"></a>2.1 常见的GNU汇编伪代码/指令</h2><p>以下为GNU汇编伪代码与ARM汇编伪代码的对应关系，但实际上他们并不完全相同。</p>
<p>具体的可以参考<a href="https://sourceware.org/binutils/docs/as.html#Word">Using as (sourceware.org)</a>。</p>
<p><img src="/2024/04/04/STM32%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image/1701431830176.png" alt="1701431830176"></p>
<p>以下为启动文件的作用说明，基本按照从上往下的格式进行描述。</p>
<h2 id="2-2-基本说明"><a href="#2-2-基本说明" class="headerlink" title="2.2 基本说明"></a>2.2 基本说明</h2><p><code>startup_stm32h750xx.s</code>的开头部分是基本说明。</p>
<ol>
<li>表示使用统一的 <code>ARM/Thumb</code>汇编语法。<a href="https://sourceware.org/binutils/docs/as/ARM_002dInstruction_002dSet.html#ARM_002dInstruction_002dSet">ARM-Instruction-Set (Using as) (sourceware.org)</a></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.syntax unified COPY</span><br></pre></td></tr></table></figure>
<ol>
<li>表示指定所需的核心版本为 <code>cortex-m7</code>。<a href="https://sourceware.org/binutils/docs/as.html#ARC-Syntax">Syntax</a></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.cpu cortex-m7COPY</span><br></pre></td></tr></table></figure>
<ol>
<li>选择要组装的浮点单元为 <code>softvfp</code>，软浮点（<code>Soft-float</code>），浮点单元即 <code>VFP</code>(<code>vector floating-point</code>)。<a href="https://sourceware.org/binutils/docs/as.html#ARM-Directives">ARM Machine Directives</a></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.fpu softvfpCOPY</span><br></pre></td></tr></table></figure>
<ol>
<li>选择 <code>THUMB</code>指令集，执行与 <code>.code 16</code>相同的操作，使 <code>thumb</code>模式等价于 <code>.code 16;gcc -mthumb</code>。<a href="https://sourceware.org/binutils/docs/as.html#ARM-Directives">ARM Machine Directives</a></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.thumbCOPY</span><br></pre></td></tr></table></figure>
<ol>
<li>定义两个全局符号，这两个符号对链接文件可见， <code>g_pfnVectors</code>为中断向量表，<code>Default_Handler</code>为默认中断。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.global  g_pfnVectors                   /* 定义两个全局符号，这两个符号对链接文件可见， g_pfnVectors为中断向量表 */  </span><br><span class="line">.global  Default_Handler                /* Default_Handler为默认中断 */ COPY</span><br></pre></td></tr></table></figure>
<ol>
<li><code>.word</code>表示了在当前位置放一个 <code>word</code>型的值，可以理解为一个变量或者数据定义，这个变量同样对对 <code>.ld</code>（链接文件）可见。</li>
<li>定义的变量包括 <code>_sidata, _sdata, _edata, _sbss, _ebss</code>，分别用于表示带初始化值的 <code>.data</code>段起始地址，<code>.data</code>段的起始地址和结束地址，<code>.bss</code>段的起始地址和结束地址。</li>
<li>注释中 <code>SystemInit_ExtMemCtl</code>表示配置外部RAM。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* start address for the initialization values of the .data section. </span><br><span class="line">defined in linker script */   </span><br><span class="line">.word  _sidata          </span><br><span class="line">/* start address for the .data section. defined in linker script */  </span><br><span class="line">.word  _sdata</span><br><span class="line">/* end address for the .data section. defined in linker script */</span><br><span class="line">.word  _edata</span><br><span class="line">/* start address for the .bss section. defined in linker script */</span><br><span class="line">.word  _sbss</span><br><span class="line">/* end address for the .bss section. defined in linker script */</span><br><span class="line">.word  _ebss</span><br><span class="line">/* stack used for SystemInit_ExtMemCtl; always internal RAM used */COPY</span><br></pre></td></tr></table></figure>
<h2 id="2-3-Reset-Handler复位中断服务程序"><a href="#2-3-Reset-Handler复位中断服务程序" class="headerlink" title="2.3 Reset_Handler复位中断服务程序"></a>2.3 Reset_Handler复位中断服务程序</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @brief  This is the code that gets called when the processor first</span><br><span class="line"> *          starts execution following a reset event. Only the absolutely</span><br><span class="line"> *          necessary set is performed, after which the application</span><br><span class="line"> *          supplied main() routine is called. </span><br><span class="line"> * @param  None</span><br><span class="line"> * @retval : None</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">    .section  .text.Reset_Handler</span><br><span class="line">  .weak  Reset_Handler</span><br><span class="line">  .type  Reset_Handler, %function</span><br><span class="line">Reset_Handler:  </span><br><span class="line">  ldr   sp, =_estack      /* set stack pointer */</span><br><span class="line"></span><br><span class="line">/* Copy the data segment initializers from flash to SRAM */  </span><br><span class="line">  movs  r1, #0</span><br><span class="line">  b  LoopCopyDataInitCOPY</span><br></pre></td></tr></table></figure>
<ol>
<li>开头注释表明：这部分代码在芯片第一次启动或复位后，需要执行的一些必要的操作，在此之后启动main()函数执行；</li>
<li><code>.section .text.Reset_Handler</code>这里表示定义的是 <code>.text</code>节中的 <code>Reset_Handler</code>节；</li>
<li><code>.weak</code>将 <code>Reset_Handler</code>设置为弱属性，如果符号不存在，将创建它们。(弱定义，如果有其他强定义则用强定义替代)，即当我们在程序内定义一个 <code>Reset_Handler</code>函数时，这部分将不起作用；</li>
<li><code>.type</code>将符号 <code>Reset_Handler</code>的类型设置为函数名；</li>
<li><code>Reset_Handler</code>函数的主要作用是：<code>ldr</code>指令用于从内存中将一个32位的字读取到指令中的目标寄存器中，即将 <code>_estack</code>栈底赋值给 <code>SP</code>，将 <code>R1</code>寄存器赋值为0，<code>B</code>指令跳转至 <code>CopyDataInit</code>函数，通过函数名可以看出，这里是对数据进行初始化。</li>
</ol>
<h2 id="2-4-将-data段从-FLASH移动到-RAM，将-bss段清零"><a href="#2-4-将-data段从-FLASH移动到-RAM，将-bss段清零" class="headerlink" title="2.4 将 .data段从 FLASH移动到 RAM，将 .bss段清零"></a>2.4 将 <code>.data</code>段从 <code>FLASH</code>移动到 <code>RAM</code>，将 <code>.bss</code>段清零</h2><p>参考链接：<a href="https://community.arm.com/support-forums/f/architectures-and-processors-forum/5941/could-you-explain-bcc-command-to-me">Could you explain BCC command to me? – Architectures and Processors forum – Support forums – Arm Community</a></p>
<p><a href="https://blog.csdn.net/weixin_41608556/article/details/120801250?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-120801250-blog-17934511.pc_relevant_3mothn_strategy_recovery&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-120801250-blog-17934511.pc_relevant_3mothn_strategy_recovery&amp;utm_relevant_index=1">(3条消息) 汇编指令 BCC/BLO_瑞欧莱的博客-CSDN博客_blo指令</a></p>
<p><a href="https://community.arm.com/arm-community-blogs/b/architectures-and-processors-blog/posts/condition-codes-1-condition-flags-and-codes">Condition Codes 1: Condition flags and codes – Architectures and Processors blog – Arm Community blogs – Arm Community</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CopyDataInit:</span><br><span class="line">  ldr  r3, =_sidata         // _sidata为.data段中初始化值的起始地址</span><br><span class="line">  ldr  r3, [r3, r1]</span><br><span class="line">  str  r3, [r0, r1]</span><br><span class="line">  adds  r1, r1, #4</span><br><span class="line"></span><br><span class="line">LoopCopyDataInit:</span><br><span class="line">  ldr  r0, =_sdata          // _sdata为.data段的起始地址</span><br><span class="line">  ldr  r3, =_edata          // _edata为.data段的结束地址</span><br><span class="line">  adds  r2, r0, r1</span><br><span class="line">  cmp  r2, r3               // R2-R3 &lt; 0，C清零， R2-R3 ≥ 0， C置位</span><br><span class="line">  bcc  CopyDataInit         //  Branch if Carry Clear，判断C位</span><br><span class="line">  ldr  r2, =_sbss</span><br><span class="line">  b  LoopFillZerobss</span><br><span class="line">/* Zero fill the bss segment. */  </span><br><span class="line">FillZerobss:</span><br><span class="line">  movs  r3, #0</span><br><span class="line">  str  r3, [r2], #4</span><br><span class="line"></span><br><span class="line">LoopFillZerobss:</span><br><span class="line">  ldr  r3, = _ebss</span><br><span class="line">  cmp  r2, r3</span><br><span class="line">  bcc  FillZerobssCOPY</span><br></pre></td></tr></table></figure>
<p><code>ARM</code>汇编语言中有16个可能的条件分支，包括“always”（实际上是一个无条件分支）和“never”（从未使用过，但存在于未来可能的架构扩展中）。下表给出了完整的分支指令集：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>BRANCH</strong></th>
<th><strong>CONDITION TEST</strong></th>
<th><strong>MEANING</strong></th>
<th><strong>USES</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>B</td>
<td>No test</td>
<td>Unconditional</td>
<td>Always take the branch</td>
</tr>
<tr>
<td>BAL</td>
<td>No test</td>
<td>Always</td>
<td>Always take the branch</td>
</tr>
<tr>
<td>BEQ</td>
<td>Z=1</td>
<td>Equal</td>
<td>Comparison equal or zero result</td>
</tr>
<tr>
<td>BNE</td>
<td>Z=0</td>
<td>Not equal</td>
<td>Comparison not equal or non-zero result</td>
</tr>
<tr>
<td>BCS</td>
<td>C=1</td>
<td>Carry set</td>
<td>Arithmetic operation gave carry out</td>
</tr>
<tr>
<td>BCC</td>
<td>C=1</td>
<td>Carry clear</td>
<td>Arithmetic operation did not produce a carry</td>
</tr>
<tr>
<td>BHS</td>
<td>C=1</td>
<td>Higher or same</td>
<td>Unsigned comparison gave higher or same result</td>
</tr>
<tr>
<td>BLO</td>
<td>C=0</td>
<td>Lower</td>
<td>Unsigned comparison gave lower result</td>
</tr>
<tr>
<td>BMI</td>
<td>N=1</td>
<td>Minus</td>
<td>Result is minus or negative</td>
</tr>
<tr>
<td>BPL</td>
<td>N=0</td>
<td>Plus</td>
<td>Result is positive (plus) or zero</td>
</tr>
<tr>
<td>BVS</td>
<td>V=1</td>
<td>Overflow Set</td>
<td>Signed integer operation: overflow occurred</td>
</tr>
<tr>
<td>BVC</td>
<td>V=0</td>
<td>Overflow Clear</td>
<td>Signed integer operation: no overflow occurred</td>
</tr>
<tr>
<td>BHI</td>
<td>((NOT C) OR Z) =0 {C set and Z clear}</td>
<td>Higher</td>
<td>Unsigned comparison gave higher</td>
</tr>
<tr>
<td>BLS</td>
<td>((NOT C) OR Z) =1 {C set or Z clear}</td>
<td>Lower or same</td>
<td>Unsigned comparison gave lower or same</td>
</tr>
<tr>
<td>BGE</td>
<td>(N EOR V) =0 {(N and V) set or (N and V) clear}</td>
<td>Greater or Equal</td>
<td>Signed integer comparison gave greater than or equal</td>
</tr>
<tr>
<td>BLT</td>
<td>(N EOR V) =1 {(N set and V clear) or (N clear and V set)}</td>
<td>Less Than</td>
<td>Signed integer comparison gave less than</td>
</tr>
<tr>
<td>BGT</td>
<td>(Z OR (N EOR V)) =0 {((N and V) set or clear) and Z clear}</td>
<td>Greater Than</td>
<td>Signed integer comparison gave greater than</td>
</tr>
<tr>
<td>BLE</td>
<td>(Z OR (N EOR V)) =1 {(N set and V clear) or (N clear and V set) or Z set}</td>
<td>Less or Equal</td>
<td>Signed integer comparison gave less than or equal</td>
</tr>
</tbody>
</table>
</div>
<ol>
<li><code>LoopCopyDataInit</code>函数的主要作用是：将 <code>_sdata</code>赋值给 <code>R0</code>，将 <code>_edata</code>赋值给 <code>R3</code>，将 <code>R0</code>和 <code>R1</code>的相加结果给 <code>R2</code>，注意 <code>R1</code>这里是0（FLASH的0起始地址），<code>cmp</code>比较 <code>R2</code>与 <code>R3</code>，<code>bcc</code>进行无进位转移，如果 <code>R2&lt;R3</code>，表示有初始化值需要从 <code>FLASH</code>复制到 <code>RAM</code>，则进入 <code>CopyDataInit</code>函数，否则则将 <code>R2</code>置为 <code>_sbss</code>并跳转至 <code>LoopFillZerobss</code>。</li>
<li><code>CopyDataInit</code>函数的主要作用是将 <code>.data</code>段的初始化值从 <code>FLASH</code>复制到 <code>RAM</code>，先将 <code>_sidata</code>赋值给 <code>R3</code>，将 <code>R3+R1</code>的地址单元的值存入 <code>R3</code>，将 <code>R3</code>的值存入 <code>R0+R1</code>的地址单元，然后将 <code>R1</code>的值加4（复位函数的入口地址）。</li>
<li><code>LoopFillZerobss</code>函数的主要作用是将 <code>.bss</code>段清零，此时 <code>R2</code>为 <code>_sbss</code>，将 <code>_ebss</code>赋值给 <code>R3</code>，<code>cmp</code>比较 <code>R2</code>与 <code>R3</code>，<code>bcc</code>进行无进位转移，如果 <code>R2&lt;R3</code>，则有 <code>.bss</code>段的值需要初始化，调用 <code>FillZerobss</code>函数。</li>
<li><code>FillZerobss</code>函数的主要作用就将 <code>.bss</code>段清零，将0赋值给 <code>R3</code>，然后将 <code>R3</code>的值存入 <code>R2+4</code>的地址单元中。</li>
</ol>
<blockquote>
<p>其实大家发现没有，<code>LoopCopyDataInit</code>函数和 <code>LoopFillZerobss</code>函数好像都只调用了一次，但明明名字里带了Loop（循环），那他们是怎么实现循环的呢？这就涉及到汇编的又一个知识点：<strong>语句是顺序执行</strong>的，而我们摘出来的四个函数的顺序是 <code>CopyDataInit</code>➡<code>LoopCopyDataInit</code>➡<code>FillZerobss</code>➡<code>LoopFillZerobss</code>，也就是说程序运行的步骤其实如下图所示。</p>
</blockquote>
<p><img src="/2024/04/04/STM32%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image/1701431871750.png" alt="1701431871750"></p>
<h2 id="2-5-调用-SystemInit并转入到C的世界"><a href="#2-5-调用-SystemInit并转入到C的世界" class="headerlink" title="2.5 调用 SystemInit并转入到C的世界"></a>2.5 调用 <code>SystemInit</code>并转入到C的世界</h2><blockquote>
<p>此处使用的是GCC下RTT的启动文件，以 <code>entry()</code>函数作为C语言的入口。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* Call the clock system intitialization function.*/</span><br><span class="line">  bl  SystemInit   </span><br><span class="line">/* Call static constructors */</span><br><span class="line">/* bl __libc_init_array */</span><br><span class="line">/* Call the application&#x27;s entry point.*/</span><br><span class="line">  bl  entry</span><br><span class="line">  bx  lr  </span><br><span class="line">.size  Reset_Handler, .-Reset_HandlerCOPY</span><br></pre></td></tr></table></figure>
<ol>
<li><code>bl __libc_init_array</code>指用了C++代码，需要 <code>__libc_init_array</code> 来初始化一些东西， 在C++中，全局变量和静态变量的构造函数需要在main函数执行前执行，这些构造函数会放在 <code>init_array</code>表中，<code>__libc_init_array</code>函数有调用这些函数的代码；</li>
<li>跳转 <code>main</code>函数，当 <code>main</code>函数执行退出后执行 <code>BX LR</code>跳转回 <code>LR</code>寄存器，这时候就从 <code>main</code>函数跳出来了；</li>
<li><code>.size Reset_Handler, .-Reset_Handler</code>（ELF格式下隐含标识一个段的结束的意思）该指令设置为与符号名称关联的大小，表示 <code>Reset_Handler</code>函数结束。</li>
</ol>
<p><img src="/2024/04/04/STM32%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image/1701431888303.png" alt="1701431888303"></p>
<h2 id="2-6-默认中断服务函数"><a href="#2-6-默认中断服务函数" class="headerlink" title="2.6 默认中断服务函数"></a>2.6 默认中断服务函数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @brief  This is the code that gets called when the processor receives an </span><br><span class="line"> *         unexpected interrupt.  This simply enters an infinite loop, preserving</span><br><span class="line"> *         the system state for examination by a debugger.</span><br><span class="line"> * @param  None   </span><br><span class="line"> * @retval None   </span><br><span class="line">*/</span><br><span class="line">    .section  .text.Default_Handler,&quot;ax&quot;,%progbits</span><br><span class="line">Default_Handler:</span><br><span class="line">Infinite_Loop:</span><br><span class="line">  b  Infinite_Loop</span><br><span class="line">  .size  Default_Handler, .-Default_HandlerCOPY</span><br></pre></td></tr></table></figure>
<ol>
<li>注释说明如果处理器收到一个未预料的中断，将会进入这个死循环中，即 <code>Default_Handler</code>（此处不同于MDK，GCC环境下，先跳转到 <code>Default_Handler</code>再跳转到相应的中断服务函数）；</li>
<li><code>.section .text.Default_Handler</code>这里表示定义的是 <code>.text</code>段中的 <code>Reset_Handler</code>段，ax表示权限，ax是 allocation execute的缩写，表示该节区可分配并且可执行，<code>progbits</code>是 <code>type</code>，表示此段包含数据，详细定义为 <code>.section section_name [, “flags”[, %type[,flag_specific_arguments]]]&lt;span&gt; &lt;/span&gt;</code>。</li>
</ol>
<h2 id="2-7-中断向量表和中断服务函数"><a href="#2-7-中断向量表和中断服务函数" class="headerlink" title="2.7 中断向量表和中断服务函数"></a>2.7 中断向量表和中断服务函数</h2><ol>
<li>注释部分，表明中断向量表需要在物理地址 <code>0x00000000</code>的位置上，如果是IAP当然可以通过程序后续配置调整地址大小，但是第一次启动必然要从0开始；</li>
<li><code>section .isr_vector,&quot;a&quot;,%progbits</code>定义中断向量段和它的类型，a表示可分配，<code>%progbits</code>表示段内包含数据；</li>
<li><code>.type g_pfnVectors, %object</code>段符号名为 <code>g_pfnVectors</code>，<code>%object</code>表示符号为数据对象；</li>
<li><code>.size g_pfnVectors, .-g_pfnVectors</code>表示 <code>g_pfnVectors</code>的大小是从当前位置-定义位置；</li>
<li><code>word _estack</code>在当前位置放置一个word型的值，这个值为 <code>_estack</code>（这个值是栈顶的值，存在flash的0偏移地址处），后面同理；</li>
<li><code>.thumb_set NMI_Handler,Default_Handler</code>等效于.set指令，因为它创建了一个符号，该符号是另一个符号的别名（可能尚未定义）。 该指令还具有添加的属性，因为它以 <code>.thumb_func</code>指令相同的方式将别名符号标记为thumb函数入口点。即 <code>NMI_Handler</code>默认用 <code>Default_Handler</code>替代，但同时 <code>NMI_Handler</code>还是个若引用，因此当我们在程序里定义了这个中断服务函数的时候，就会替代这里。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/******************************************************************************</span><br><span class="line">*</span><br><span class="line">* The minimal vector table for a Cortex M. Note that the proper constructs</span><br><span class="line">* must be placed on this to ensure that it ends up at physical address</span><br><span class="line">* 0x0000.0000.</span><br><span class="line">* </span><br><span class="line">*******************************************************************************/</span><br><span class="line">   .section  .isr_vector,&quot;a&quot;,%progbits          // 将下面的代码组合成名为.isr_vector的段，&quot;a&quot;表示此段是可以分配的，%progbits表示此段包含数据</span><br><span class="line">  .type  g_pfnVectors, %object                  // 段符号名为g_pfnVectors，%object表示符号为数据对象</span><br><span class="line">  .size  g_pfnVectors, .-g_pfnVectors           // g_pfnVectors的大小为从位置计数器的值-g_pfnVectors</span><br><span class="line"></span><br><span class="line">g_pfnVectors:</span><br><span class="line">  .word  _estack                                // 在当前位置放置一个word型的值，这个值为_estack，这个值是栈顶的值，存在flash的0偏移地址处</span><br><span class="line">  .word  Reset_Handler</span><br><span class="line"></span><br><span class="line">  .word  NMI_Handler</span><br><span class="line">  .word  HardFault_Handler</span><br><span class="line">  .word  MemManage_Handler</span><br><span class="line">  .word  BusFault_Handler</span><br><span class="line">  .word  UsageFault_Handler</span><br><span class="line">  .word  0</span><br><span class="line">  .word  0</span><br><span class="line">  .word  0</span><br><span class="line">  .word  0</span><br><span class="line">  .word  SVC_Handler</span><br><span class="line">  .word  DebugMon_Handler</span><br><span class="line">  .word  0</span><br><span class="line">  .word  PendSV_Handler</span><br><span class="line">  .word  SysTick_Handler</span><br><span class="line"></span><br><span class="line">  /* External Interrupts */</span><br><span class="line">  .word     WWDG_IRQHandler                   /* Window WatchDog              */                                </span><br><span class="line">  .word     PVD_AVD_IRQHandler                /* PVD/AVD through EXTI Line detection */</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  .word     0                                 /* Reserved                   */  </span><br><span class="line">  .word     WAKEUP_PIN_IRQHandler             /* Interrupt for all 6 wake-up pins */</span><br><span class="line"></span><br><span class="line">/*******************************************************************************</span><br><span class="line">*</span><br><span class="line">* Provide weak aliases for each Exception handler to the Default_Handler. </span><br><span class="line">* As they are weak aliases, any function with the same name will override </span><br><span class="line">* this definition.</span><br><span class="line">* </span><br><span class="line">*******************************************************************************/</span><br><span class="line">   .weak      NMI_Handler</span><br><span class="line">   .thumb_set NMI_Handler,Default_Handler</span><br><span class="line">   // 等效于.set指令，创建了一个符号，该符号是另一个符号的别名（可能尚未定义）。 该指令还具有添加的属性，因为它以.thumb_func指令相同的方式将别名符号标记为thumb函数入口点。即NMI_Handler默认用Default_Handler替代，但同时NMI_Handler还是个若引用，因此当我们在程序里定义了这个中断服务函数的时候，就会替代这里。</span><br><span class="line"></span><br><span class="line">   .weak      HardFault_Handler</span><br><span class="line">   .thumb_set HardFault_Handler,Default_Handler</span><br><span class="line"></span><br><span class="line">   .weak      MemManage_Handler</span><br><span class="line">   .thumb_set MemManage_Handler,Default_Handler</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">   .weak      SAI4_IRQHandler    </span><br><span class="line">   .thumb_set SAI4_IRQHandler,Default_Handler </span><br><span class="line"></span><br><span class="line">   .weak      WAKEUP_PIN_IRQHandler    </span><br><span class="line">   .thumb_set WAKEUP_PIN_IRQHandler,Default_Handler </span><br><span class="line"></span><br><span class="line">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/     COPY</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="3-STM32链接脚本分析（基于GCC）"><a href="#3-STM32链接脚本分析（基于GCC）" class="headerlink" title="3 STM32链接脚本分析（基于GCC）"></a>3 STM32链接脚本分析（基于GCC）</h1><blockquote>
<p>需要注意的是，我们这里只介绍stm32在gcc中常用的关键字和命令，实际上 <code>Linker Scripts</code>所拥有的关键字和命令远远不止这些，如果我们真的想要去了解可以看一下以下这份文件：<a href="https://sourceware.org/binutils/docs/ld/index.html">Top (LD) (sourceware.org)</a></p>
<p>MDK、IAR、GCC三种编译器的链接脚本分别为link.sct（一般也称为分散加载文件）、link.icf、link.lds。</p>
</blockquote>
<p>链接脚本一般可以通过<strong>文本编辑器或链接脚本编辑器</strong>来进行操作。以下为在RT-Thread GCC环境下的文本编辑器和链接脚本编辑器。</p>
<p><img src="/2024/04/04/STM32%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image/1701431901125.png" alt="1701431901125"><br><img src="/2024/04/04/STM32%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image/1701431919611.png" alt="1701431919611"></p>
<p> <strong>编译的整个过程分为：预处理、编译、汇编和链接。</strong> 链接器的主要作用是将多个 <code>object(.o)</code>文件或 <code>archive(.a)</code>文件的内容重定位 <code>(relocate)</code>并将 <code>Symbol Reference</code>信息一并输出到二进制文件 <code>(Binary)</code>或其他可执行文件 <code>(.exe)</code>中。链接是编译产生二进制文件的最后一个步骤，在执行的过程中依照 <code>Link Command Language文件</code>描述的方式去产生二进制文件，<code>LD</code>文件支持<a href="[BFD (LD">不同的二进制格式</a> (sourceware.org)](<a href="https://sourceware.org/binutils/docs/ld/BFD.html#BFD))。">https://sourceware.org/binutils/docs/ld/BFD.html#BFD))。</a></p>
<p><img src="/2024/04/04/STM32%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image/1701432005455.png" alt="1701432005455"></p>
<p>在我们的STM32中，常见的节定义有：</p>
<ol>
<li><code>.text</code>节：代码节，用来存放 <strong>代码</strong> 及一些  <strong>只读常量</strong> ，一般是只读的区域；</li>
<li><code>.data</code>节：数据节，用来存放全局初始化变量，以及全局或局部  <strong>静态变量</strong> ；</li>
<li><code>.bss</code>节：BSS 节，用来存放所有  <strong>未初始化的数据</strong> ，用 <code>0</code> 来初始化。</li>
</ol>
<p>一般而言，我们可以这么理解RAM和Flash（ROM）的关系， <strong>RAM 相当于内存，Flash（ROM）相当于硬盘</strong> 。</p>
<ul>
<li><strong>Flash（ROM）</strong> （烧录程序所占的Flash大小） = <code>text</code> + <code>data</code>。</li>
<li><strong>RAM</strong> （运行时占用的RAM大小） = <code>data</code> + <code>bss</code>。</li>
</ul>
<p>编译器会将程序分为好几个部分，分别存到MCU不同的存储区，对于RT-Thead来说，MCU在上电后，如果选择的是默认从 Flash 启动，启动之后会将 <code>RW</code> 节（等同于 <code>.bss</code>节+<code>.data</code>节， <strong>也就是说下面这张图里右侧应该是 <code>RW-data</code>和 <code>ZI</code>节</strong> ）中的 <code>RW-data</code>（初始化的全局变量，等同于 <code>.data</code>节）搬运到 RAM 中，但不会搬运 <code>RO</code>节（等同于 <code>.text</code>节），即 CPU 的执行代码从 Flash 中读取，另外根据编译器给出的 <code>ZI</code> 地址和大小分配出 <code>ZI</code>节（等同于 <code>.bss</code>节），并将这块 RAM 区域清零。</p>
<blockquote>
<p>其中动态内存堆为未使用的 RAM 空间，应用程序申请和释放的内存块都来自该空间。</p>
</blockquote>
<p><img src="/2024/04/04/STM32%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image/1701432011203.png" alt="1701432011203"></p>
<p>而链接器和链接脚本文件的作用正是 <strong>把各个对象文件或对象库的各种输入段进行重新组合，存入输出段，生成可执行文件（输出文件）</strong> （即生成相应的可执行映像文件）。</p>
<p><img src="/2024/04/04/STM32%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image/1701432017423.png" alt="1701432017423"></p>
<p>下面是一些可能更合适的解释。</p>
<p>以下描述出于<a href="https://sourceware.org/binutils/">GNU Binutils (sourceware.org)</a>：</p>
<blockquote>
<p>Every link is controlled by a linker script. This script is written in the linker command language.</p>
<p>The main purpose of the linker script is to describe how the sections in the input files should be mapped into the output file, and to control the memory layout of the output file. Most inker scripts do nothing more than this.</p>
</blockquote>
<p>以下描述出于《<a href="https://book.douban.com/subject/3652388/">程序员的自我修养 (豆瓣) (douban.com)</a>》：</p>
<blockquote>
<p>如果把整个链接过程比作一台计算机，那么ld链接器就是计算机的 <code>CPU</code>，所有的目标文件、库文件就是输入，链接结果输出的可执行文件就是输出，而链接控制脚本正是这台计算机的“程序”，它控制CPU的运行，以“程序”要求的方式将输入加工成所须要的输出结果。链接控制脚本“程序”使用一种特殊的语言写成，即 <code>ld</code>的链接脚本语言，这种语言并不复杂，只有为数不多的几种操作。无论是输出文件还是输入文件，它们的主要的数据就是 <strong>文件中的各种段</strong> ，我们把输入文件中的段称为 <strong>输入节（Input Sections）</strong> ，输出文件中的段称为 <strong>输出节（Output Sections）</strong> 。简单来讲， <strong>控制链接过程无非是控制输入节如何变成输出节</strong> ，比如哪些输入节要合并一个输出节，哪些输入节要丢弃；指定输出节的名字、装载地址、属性，等等。（一般链接脚本名都以 <code>lds</code>作为扩展名 <code>ld script</code>）。</p>
</blockquote>
<p>在研究链接脚本之间，最好对程序的编译和链接需要有一定的了解。</p>
<p>以下，基于STM32H750XBHx的一个链接脚本文件作分析，其他的芯片大同小异，可以根据参阅<a href="https://sourceware.org/binutils/docs/ld/index.html">Top (LD) (sourceware.org)</a>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line"> * linker script for STM32H750XBHx with GNU ld</span><br><span class="line"> */COPY</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="3-0-基本概念"><a href="#3-0-基本概念" class="headerlink" title="3.0 基本概念"></a>3.0 基本概念</h2><p>链接脚本将输入文件合并为单个输出文件（<code>.exe</code>，<code>.bin</code>，<code>.elf</code>等等）。输出文件和每个输入文件采用的是一种被称为<strong>目标文件格式</strong>的特殊数据格式。</p>
<p> <strong>每个文件都是一个目标文件</strong> 。 <strong>输出文件通常被称为可执行文件，但也可以称为目标文件</strong> 。</p>
<p>此外， <strong>每个目标文件都有一个节列表（<code>a list of sections</code>）</strong> ，有时我们将 <strong>输入文件的一个节称为输入节（<code>input section</code>，如何将输入文件映射到内存布局中）</strong> ，类似地， <strong>输出文件的一个节称为输出节（<code>input section</code>，最终的可执行文件在内存中是如何布局的）</strong> 。</p>
<p> <strong>目标文件的每个节都有一个节名和节大小</strong> 。大多数节也有一个相关的数据块，称为 <strong>节内容</strong> 。一个节可以被标记为 <strong>可加载的</strong> ，这意味着当输入文件运行时，节内容应该被加载到内容中。没有内容的节可以是 <strong>可分配的</strong> ，这意味着内存中的一个区域应该被留出，但不应该在该内存区域加载特别的内容（在某些情况下，内存必须被清零）。既可以<strong>不加载也可以不分配</strong>的节，通常包含了某种调试信息（<code>debugging information</code>）。</p>
<p>每个可加载或可分配的输出节都有两个地址。第一个是 <strong><code>VMA</code>或虚拟内存地址</strong> ，这是运行输出文件时，节将具有的地址。第二个是 <strong><code>LMA</code>或加载内存地址</strong> ，这是将加载节的地址。在大多数情况下，这两个地址是相同的（如PC机上）。一个不同的情况是，当一个数据节被加载到 <code>ROM</code>中，然后在程序启动时被复制到 <code>RAM</code>（这种技术通常用于初始化基于 <code>ROM</code>的系统的全局变量，如MCU上）。在这种情况下，<code>ROM</code>的地址为 <code>LMA</code>，而 <code>RAM</code>的地址为 <code>VMA</code>。</p>
<p>通过使用带有 <code>-h</code>选项的 <code>objdump</code>程序，可以查看目标文件中的节。</p>
<p>每个目标文件也有一个符号列表，称为符号表（<code>symbol table</code>）。符号可以是定义的，也可以是未定义的。每个符号都有一个名称，每个定义的符号都有地址等信息。如果将一个 <code>C</code>或 <code>C++</code>程序<strong>编译</strong>成一个目标文件，那么每一个定义的函数和全局变量或静态变量都将获得一个定义的符号。输入文件中引用的每个未定义函数或全局变量都将成为一个未定义的符号。</p>
<p>可以使用 <code>nm</code>程序或通过带有 <code>-t</code>选项的 <code>objdump</code>程序来查看目标文件中的符号。</p>
<blockquote>
<p>关于LMA和VMA可以参考这个链接：<a href="https://github.com/cisen/blog/issues/887">详解LMA &amp; VMA 【转】 · Issue #887 · cisen/blog (github.com)</a></p>
<p><a href="https://www.embeddedrelated.com/showthread/comp.arch.embedded/77071-1.php">VMA vs LMA? (embeddedrelated.com)</a></p>
</blockquote>
<h2 id="3-1-常用特殊符号"><a href="#3-1-常用特殊符号" class="headerlink" title="3.1 常用特殊符号"></a>3.1 常用特殊符号</h2><h3 id="3-1-1"><a href="#3-1-1" class="headerlink" title="3.1.1 ."></a>3.1.1 <code>.</code></h3><p>位置计数器，如果没有使用其他方式来定义输出节（<code>output section</code>）的地址，地址就会被设置为位置计数器的值。</p>
<p>位置计数器按输出节的大小递增，在 <code>&quot;SECTION&quot;</code>命令的开头，位置计数器的值为 <code>&quot;0&quot;</code>。</p>
<h3 id="3-1-2"><a href="#3-1-2" class="headerlink" title="3.1.2 *"></a>3.1.2 <code>*</code></h3><p>与任何文件名匹配的通配符，<code>*(.text)</code> 表示所有输入文件中的 <code>.text</code>输入节。</p>
<h2 id="3-2-常用关键字"><a href="#3-2-常用关键字" class="headerlink" title="3.2 常用关键字"></a>3.2 常用关键字</h2><h3 id="3-2-1-MEMORY"><a href="#3-2-1-MEMORY" class="headerlink" title="3.2.1 MEMORY"></a>3.2.1 <code>MEMORY</code></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MEMORY</span><br><span class="line">  &#123;</span><br><span class="line">    name [(attr)] : ORIGIN = origin, LENGTH = len</span><br><span class="line">    …</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p> <strong>链接器默认配置允许分配所有可用的内存</strong> ，通过 <code>MEMORY</code>命令可以重载相应的内存。</p>
<p> <strong><code>MEMORY</code>命令描述了目标的内存块的位置和大小</strong> ，可以使用 <code>MEMORY</code>命令来描述哪些内存区域可以使用，哪些内存区域应该避免使用。可以给特定的内存区域分配节。链接器基于内存区域设置节地址，如果区域趋于饱和将会产生警告信息。链接器不会为了适应可用区域而打乱节的顺序。</p>
<p><strong>一个链接脚本可能包含多个 <code>MEMORY</code>命令，但所有定义的内存块都被视为是在单个 <code>MEMORY</code>命令中定义的。</strong></p>
<p><code>NAME</code>是链接脚本用来引用相应内存区域的名字。区域名称在链接脚本外部没有任何意义。区域名被存储在一个独立的名字空间，且不会与符号名，文件名，或者节名起冲突。每个内存区域必须在 <code>MEMORY</code>命令中有一个不同的名字。但是你此后可以使用 <code>REGION_ALIAS</code>命令为已存在的内存区域添加别名。</p>
<p><code>ATTR</code>字符是一个可选的属性列表，用来决定是否为一个脚本中没有显式指定映射的输入节使用一个特定的内存区域。就像 <code>SECTIONS</code>中进行过的说明，如果不为一个输入节指定一个输出节，链接器将会创建一个与输入节同名的输出节。如果定义了区域属性，链接器会使用他们来决定创建的输出节存放的内存区域。</p>
<p><code>ATTR</code>字符串只能使用下面的字符组成：</p>
<ol>
<li><code>&quot;R&quot;</code>只读节</li>
<li><code>&quot;W&quot;</code>读写节</li>
<li><code>&quot;X&quot;</code>可执行节</li>
<li><code>&quot;A&quot;</code>可分配节</li>
<li><code>&quot;I&quot;</code>已初始化节</li>
<li><code>&quot;L&quot;</code>类似于 <code>&quot;I&quot;</code></li>
<li><code>&quot;!&quot;</code>反转其后面的所有属性</li>
</ol>
<p>如果一个未映射的节与除 <code>&quot;!&quot;</code>外任意列出的属性匹配，它会被放置在内存区域中。<code>&quot;!&quot;</code>属性翻转对后面字符的测试，一个未映射的节与 <code>&quot;!&quot;</code>后列出的任意属性不匹配时，它才会被放置在内存中。因此属性 <code>&quot;RW!X&quot;</code>将匹配任何具有 <code>&quot;R&quot;</code>或 <code>&quot;W&quot;</code>属性但不具有 <code>&quot;X&quot;</code>属性的未映射的节。</p>
<p><code>ORIGIN</code>是一个表达式，代表了内存区域的起始地址。表达式的结果必须等价于一个常量并且不能含有任何符号。关键字 <code>ORIGIN</code>缩短为 <code>org</code>或者 <code>o</code>（但不能写成 <code>ORG</code>）。</p>
<p><code>LEN</code>是一个表达式，用来表示内存区域的字节数大小。类似于 <code>ORIGIN</code>表达式，表达式的结果必须等价于一个常量并且不能含有任何符号。关键字 <code>LENGTH</code>可以被缩写为 <code>len</code>或者 <code>l</code>。</p>
<p>以下是一个实例，我们指定了两个内存区域可以分配：一个从 <code>&quot;0&quot;</code>开始，分配256KB，一个从 <code>&quot;0x40000000&quot;</code>，分配4MB。</p>
<p>链接器会将每个非显式映射到具体内存区域的节放入 <code>rom</code>内存区域中，并且这些节必须是只读的或可执行的。链接器会将其他未显式映射到具体内存区域的节放入 <code>ram</code>内存区域中，并且这些节是不可只读且不可执行的。</p>
<p><strong>一旦定义了内存区域，就可以使用使用 <code>&gt;region</code>指令输出节属性来指导链接器将特定的输出节放入具体的内存区域中。</strong></p>
<p>例如，如果有一个内存区域名为 <code>mem</code>，则可以在输出节定义中使用 <code>&gt;mem</code>。如果没有为输出节指定地址，链接器会将地址设置为内存区域中的下一个可用地址。如果指向内存区域的组合输出节对相应内存区域来说太大了的话，链接器会发出错误消息。</p>
<p>可以通过 <code>ORIGIN(memory)</code>和 <code>LENGTH(memory)</code>函数来获取一个表达式中内存的起始地址和内存长度。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_fstack = ORIGIN(ram) + LENGTH(ram) - 4;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="3-2-2-ENTRY"><a href="#3-2-2-ENTRY" class="headerlink" title="3.2.2 ENTRY"></a>3.2.2 <code>ENTRY</code></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ENTRY(symbol)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在一个程序中最先被执行的指令称为入口点（<code>entry point</code>）。</p>
<p>使用 <code>ENTRY</code>命令可以设置入口点。</p>
<p>设置入口点的方式不止 <code>ENTRY</code>命令一种，链接器会按照顺序，尝试以下几种方式来设置入口点，并在其中一个成功时停止：</p>
<ol>
<li><code>-e</code>入口命令行选项；</li>
<li>链接脚本中的 <code>ENTRY(symbol)</code>命令；</li>
<li>目标特定符号的值（如果已经定义），对绝大多数目标来说，符号为 <code>start</code>，但对PE-和基于BeOS的系统来说，可能需要检查可能的输入符号列表，并与找到的第一个符号匹配；</li>
<li>代码节的第一个字节的地址，如果存在并且正在创建一个可执行文件，代码节通常是 <code>.text</code>，但也可以是其他符号；</li>
<li>地址0x0。</li>
</ol>
<h3 id="3-2-3-SECTION"><a href="#3-2-3-SECTION" class="headerlink" title="3.2.3 SECTION"></a>3.2.3 <code>SECTION</code></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SECTIONS</span><br><span class="line">&#123;</span><br><span class="line">  sections-command</span><br><span class="line">  sections-command</span><br><span class="line">  …</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>SECTION</code>命令告知链接器如何将输入节的内容映射到输出节中，以及如何在内存放放置输出节。</p>
<p>每个 <code>sections-command</code>可以是以下的其中之一：</p>
<ul>
<li><code>ENTRY</code>命令（see <a href="https://sourceware.org/binutils/docs/ld/Entry-Point.html">Entry command</a>）</li>
<li>符号赋值语句(see <a href="https://sourceware.org/binutils/docs/ld/Assignments.html">Assigning Values to Symbols</a>)</li>
<li>输出节的描述</li>
<li>覆盖描述（<code>overlay description</code>）</li>
</ul>
<p>其中，为了方便在这些命令中使用位置计数器 <code>.</code>，可以在 <code>SECTION</code>命令中使用 <code>ENTRY</code>命令和符号赋值语句。因为可以在输出文件的布局中有意义的位置使用这些名，使得链接脚本更容易理解。</p>
<h4 id="3-2-3-1-输出节描述"><a href="#3-2-3-1-输出节描述" class="headerlink" title="3.2.3.1 输出节描述"></a>3.2.3.1 输出节描述</h4><p>对于一个输出节的完整描述如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">section [address] [(type)] :</span><br><span class="line">  [AT(lma)]</span><br><span class="line">  [ALIGN(section_align) | ALIGN_WITH_INPUT]</span><br><span class="line">  [SUBALIGN(subsection_align)]</span><br><span class="line">  [constraint]</span><br><span class="line">  &#123;</span><br><span class="line">    output-section-command</span><br><span class="line">    output-section-command</span><br><span class="line">    …</span><br><span class="line">  &#125; [&gt;region] [AT&gt;lma_region] [:phdr :phdr …] [=fillexp] [,]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>大多数输出节并不需要用到绝大多数可选的节属性（参数）。</p>
<p> <strong>语法要求</strong> ：</p>
<ul>
<li>节周围的空格是必须的，以保证节名明确无误；</li>
<li>冒号和大括号是必需的；</li>
<li>如果使用了 <code>fillexp</code>，并且后一个 <code>sections-command</code>像是表达式的延续，那么结尾处的逗号 <code>&quot;,&quot;</code>可能是需要的；</li>
<li>换行符和其他空格是可选的。</li>
</ul>
<p>每个 <code>output-section-command</code> 可以是以下的其中之一：</p>
<ul>
<li>符号赋值语句(see <a href="https://sourceware.org/binutils/docs/ld/Assignments.html">Assigning Values to Symbols</a>)</li>
<li>输入节描述（see <a href="https://sourceware.org/binutils/docs/ld/Input-Section.html">Input Section Description</a>）</li>
<li>直接包含的数据值（see <a href="https://sourceware.org/binutils/docs/ld/Output-Section-Data.html">Output Section Data</a>）</li>
<li>特定的输出节 <strong>关键字</strong> (see <a href="https://sourceware.org/binutils/docs/ld/Output-Section-Keywords.html">Output Section Keywords</a>)</li>
</ul>
<h4 id="3-2-3-2-输出节名（必选）"><a href="#3-2-3-2-输出节名（必选）" class="headerlink" title="3.2.3.2 输出节名（必选）"></a>3.2.3.2 输出节名（必选）</h4><p><code>section</code>是输出节的名字，<code>section</code>必须满足输出的格式要求。在只支持有限数量的节的格式中，例如 <code>a.out</code>，节名必须是该格式支持的名称之一（例如，<code>a.out</code>只支持 <code>.text</code>，<code>.bss</code>和 <code>.data</code>这三种名称）。如果输出格式支持任意数量的节，包含数字而不是名称（Oasys就是如此），节名则应作为带引号的数字字符串提供。节名可以由任意字符序列组成，但必须包含任何异常字符（如逗号 <code>&quot;,&quot;</code>）的名称必须使用引号。</p>
<p>输出节名 <code>&quot;/DISCARD/&quot;</code>是特殊的。<a href="https://sourceware.org/binutils/docs/ld/Output-Section-Discarding.html">Output Section Discarding</a></p>
<h4 id="3-2-3-3-输出节地址（可选）"><a href="#3-2-3-3-输出节地址（可选）" class="headerlink" title="3.2.3.3 输出节地址（可选）"></a>3.2.3.3 输出节地址（可选）</h4><p><code>address</code>是输出节的 <code>VMA</code>（虚拟存储器地址）的一个表达式。该地址是可选的，但如果提供了该地址，那输出地址将完全按照指定的设置。</p>
<p>如果未指定输出地址，那么将按照几种的启发式（对照的）方法中的为该部分选择一个输出地址，该地址将进行调整，以符合输出节的对齐要求，对齐要求是输出节中包含的任何输入部分的最严格对齐方式。</p>
<p>设置输出节地址的启发式方法如下：</p>
<ul>
<li>如果为该节设置了输出内存区域，则将其添加至该区域，其地址为该区域内的下一个空闲地址；</li>
<li>如果 <code>MEMORY</code>命令已经用于创建内存区域列表，那么选择与该节有匹配的属性的第一个区域来容纳该节，该节的输出地址将是该区域中的下一个空闲地址；<a href="https://sourceware.org/binutils/docs/ld/MEMORY.html">MEMORY Command</a></li>
<li>如果没有指定内存区域，或者没有匹配该节的内存区域，那么输出地址将基于位置计数器的当前值。</li>
</ul>
<p>例如，一下两条命令只有微妙的不同，第一条命令会设置 <code>.text</code>的输出节的地址到位置计数器的当前值，第二条指令会将 <code>.text</code>的输出节的地址设置为位置计数器的当前值，该值与任何 <code>.text</code>输入节中的最严格对齐方式的地方对齐。（The second will set it to the current value of the location counter aligned to the strictest alignment of any of the ‘.text’ input sections.）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text . : &#123; *(.text) &#125;</span><br><span class="line"></span><br><span class="line">.text : &#123; *(.text) &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>地址可以是任意表达式（ <a href="https://sourceware.org/binutils/docs/ld/Expressions.html">Expressions in Linker Scripts</a>）。比如，如果想要将一个节对齐到0x10字节边界上，使节地址的最低四位为0，可以执行以下操作。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text ALIGN(0x10) : &#123; *(.text) &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>ALIGN</code>返回向上对齐到指定值的当前位置计数器。如果节为非空，则为节指定地址会改变位置计数器的值。（空节会被忽略）</p>
<h4 id="3-2-3-4-输入节描述（必选）output-section-command"><a href="#3-2-3-4-输入节描述（必选）output-section-command" class="headerlink" title="3.2.3.4 输入节描述（必选）output-section-command"></a>3.2.3.4 输入节描述（必选）output-section-command</h4><p><strong>最常见的 <code>output-section-command</code>命令是输入节描述。输入节描述是最基本的链接脚本操作。</strong></p>
<p><strong>通过输出节告知链接器如何在内存中布局程序。可以使用输入节描述来告知链接器如何将输入的文件映射到内存布局中。</strong></p>
<h5 id="3-2-3-4-1-输入节基础（Input-Section-Basics）"><a href="#3-2-3-4-1-输入节基础（Input-Section-Basics）" class="headerlink" title="3.2.3.4.1 输入节基础（Input Section Basics）"></a>3.2.3.4.1 输入节基础（Input Section Basics）</h5><p>一个输入节描述包括了一个可选的文件名以及其后的括号中的节名列表。</p>
<p>文件名和节名可以是通配符模式，我们可以在 <a href="https://sourceware.org/binutils/docs/ld/Input-Section-Wildcards.html">Input Section Wildcard Patterns</a>中进一步描述。</p>
<p>最常用的输入节描述是在输出节中包含具有特定名称的所有输入端，例如，包含所有 <code>.text</code>节部分，可以这么写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*(.text)</span><br><span class="line"></span><br><span class="line">//*表示与任何文件名匹配的通配符。</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>为了排除与文件名通配符的匹配的文件列表，可以使用 <code>EXCLUDE_FILE</code>命令来匹配除了 <code>EXCLUDE_FILE</code>列表中指定的文件以外的所有文件。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">EXCLUDE_FILE (*crtend.o *otherfile.o) *(.ctors)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>将导致包含除 <code>crtend.o</code>和 <code>otherfile.o</code>之外所有文件中的所有 <code>.ctors</code>节。</p>
<p>结果与之前的示例相同。如果节列表包含不止一个节，那么使用 <code>EXCLUDE_FILE</code>的两种语法会非常有用，如下描述。</p>
<p>包含超过一个节的方式有两种。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*(.text .rdata)</span><br><span class="line">*(.text) *(.rdata)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>他们之间的区别 <strong>在于 <code>.text</code>与 <code>.rdata</code>的输入节出现在输出节中的顺序</strong> 。在第一个示例中，他们会混合在一起，出现的顺序与链接器输入过程中被发现的顺序相同。在第二个示例中，所有的 <code>.text</code>输入节会先出现，然后才是 <code>.rdata</code>。</p>
<p>对多个节使用 <code>EXCLUDE_FILE</code>命令，如果排除在节列表内，则排除仅适用于下一个紧跟的节，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*(EXCLUDE_FILE (*somefile.o) .text .rdata)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>会导致除 <code>somefile.o</code>外的所有文件中的 <code>.text</code>节会被包含，而包含 <code>somefile.o</code>在内的所有文件中的 <code>.rdata</code>节也会被包含。排除来自某个文件（<code>somefile.o</code>）中的 <code>.rdata</code>节，示例可以修改为以下格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*(EXCLUDE_FILE (*somefile.o) .text EXCLUDE_FILE (*somefile.o) .rdata)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>或者，在选择输入文件前，将 <code>EXCLUDE_FILE</code>命令放在节列表外，将导致排除适用于所有节。示例可以修改为以下格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">EXCLUDE_FILE (*somefile.o) *(.text .rdata)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>也可以指定一个文件名来包含一个具体文件中的节。如果一个或更多个文件中包含需要存放在内存中特定区域中的特殊数据，可以采取这种方式。如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data.o(.data)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>为了根据输入节的节标志来细化包含的节，可以使用 <code>INPUT_SECTION_FLAGS</code> 命令。</p>
<p>下面是一个为 <code>ELF</code>节使用节标题标志的简单实例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SECTIONS &#123;</span><br><span class="line">  .text : &#123; INPUT_SECTION_FLAGS (SHF_MERGE &amp; SHF_STRINGS) *(.text) &#125;</span><br><span class="line">  .text2 :  &#123; INPUT_SECTION_FLAGS (!SHF_WRITE) *(.text) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在本例中，输出节 <code>.text</code>由任意与名称 <code>*(.text)</code>匹配的输入节组成，该输入节的节标题标志 <code>SHF_MERGE</code>和 <code>SHF_STRINGS</code>已设置。输出节 <code>.text2</code>由任意与名称 <code>*(.text)</code>匹配的输入节组成，其节标题标志 <code>SHF_WRITE</code>已被清除。</p>
<blockquote>
<p>以下还有一些部分此处不做解释，对我们这里的内容没有太大影响。</p>
<p>可以看这个链接：<a href="https://sourceware.org/binutils/docs/ld/Input-Section-Basics.html">Input Section Basics (LD) (sourceware.org)</a></p>
</blockquote>
<h5 id="3-2-3-4-2-输入节通配符模式"><a href="#3-2-3-4-2-输入节通配符模式" class="headerlink" title="3.2.3.4.2 输入节通配符模式"></a>3.2.3.4.2 输入节通配符模式</h5><p>在一个输入节描述中，文件名或节名都可以是通配符模式。</p>
<p>在以上许多示例中，可以看到 <code>*</code>的文件名是一个简单的文件名通配符模式，通配符模式与在Unix Shell中使用的模式类似。</p>
<hr>
<p><strong><code>*</code></strong></p>
<p>匹配任意数量的字符。</p>
<p><strong><code>?</code></strong></p>
<p>匹配任意单个字符。</p>
<p><strong><code>[chars]</code></strong></p>
<p>匹配任意字符的单个实例，<code>-</code>字符可用于指定字符范围，如 <code>[a-z]</code>可以匹配任意小写字母。</p>
<p><strong><code>\</code></strong></p>
<p>引用（用引号······扩起？）以下字符。</p>
<hr>
<blockquote>
<p>中间还有一些部分此处不做解释，对我们这里的内容没有太大影响。</p>
<p>可以看这个链接：<a href="https://sourceware.org/binutils/docs/ld/Input-Section-Wildcards.html">Input Section Wildcards (LD) (sourceware.org)</a></p>
</blockquote>
<p>如果对输入节的去向感到困惑，可以使用链接器选项 <code>-M</code>来生成映射文件（<code>.map</code>），映射文件精确地显示了如何将输入节映射到输出节。</p>
<p>以下的示例和在哪个，显示了通配符模式如何对文件进行分区。此链接器脚本指示链接器放置所有的 <code>.text</code>节到 <code>.text</code>，所有的 <code>.bss</code>节到 <code>.bss</code>。链接器会将所有文件中以大写字母开头的 <code>.data</code>节放置在 <code>.DATA</code>中。对于其他文件，链接器将放置 <code>.data</code>节到 <code>.data</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SECTIONS &#123;</span><br><span class="line">  .text : &#123; *(.text) &#125;</span><br><span class="line">  .DATA : &#123; [A-Z]*(.data) &#125;</span><br><span class="line">  .data : &#123; *(.data) &#125;</span><br><span class="line">  .bss : &#123; *(.bss) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="3-2-3-4-3-通用符号（common-symbols）输入节"><a href="#3-2-3-4-3-通用符号（common-symbols）输入节" class="headerlink" title="3.2.3.4.3 通用符号（common symbols）输入节"></a>3.2.3.4.3 通用符号（common symbols）输入节</h5><p>通用符号需要特殊的符号，因为在许多目标文件格式中，通用符号并没有特定的输入节。<strong>链接器将通用符号视为位于名为 <code>COMMON</code>的输入节中。</strong></p>
<p>可以将文件名与 <code>COMMON</code>节一起使用，就像使用其他输入节一样，可以使用此选项将特定文件中的通用符号放置在一个节中，而其他输入文件的通用符号则放置在另一节中。</p>
<p>在绝大多数情况下，输入文件的通用符号放置在输出文件的 <code>.bss</code>节中。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.bss &#123; *(.bss) *(COMMON) &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>某些目标文件格式具有多种类型的通用符号。例如，<code>MIPS ELF</code>目标文件格式区分标准通用符号和小型通用符号。在这种情况下，链接器会为其他类型的通用符号使用不同的特殊节名。在 <code>MIPS ELF</code>的情况下，链接器使用 <code>COMMON</code>作为标准通用符号，使用 <code>scommon</code>作为小型通用符号。这允许将不同类型的通用符号映射到不同位置的内存中。</p>
<p>有时，可以在旧的链接器脚本中看到 <code>[COMMON]</code>，这种符号已经过时，相当于 <code>*(COMMON)</code>。</p>
<h5 id="3-2-3-4-4-输入节和垃圾收集（Input-Section-and-Garbage-Collection）"><a href="#3-2-3-4-4-输入节和垃圾收集（Input-Section-and-Garbage-Collection）" class="headerlink" title="3.2.3.4.4 输入节和垃圾收集（Input Section and Garbage Collection）"></a>3.2.3.4.4 输入节和垃圾收集（Input Section and Garbage Collection）</h5><p>当链接过程垃圾收集（<code>--gc-sections</code>）被使用时，标记不应删除的节通常很有用。这是通过使用 <code>KEEP()</code>包围输入节的通配符入口来实现的，如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">KEEP(*(.init))</span><br><span class="line">KEEP(SORT_BY_NAME(*)(.ctors))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="3-2-3-4-5-输入节例程"><a href="#3-2-3-4-5-输入节例程" class="headerlink" title="3.2.3.4.5 输入节例程"></a>3.2.3.4.5 输入节例程</h5><p>以下示例是一个完整的链接器脚本。</p>
<p>这个脚本告知链接器从文件 <code>all.o</code>中读取所有的节，并将他们放置在从地址 <code>0x10000</code>节开始的输出节 <code>outputa</code>的开始处。在相同的输出节内，紧跟的是来自 <code>foo.o</code>文件中的所有 <code>.input1</code>节。来自 <code>foo.o</code>文件中的所有 <code>.input2</code>节存入输出节 <code>outputb</code>中，后面的是来自 <code>foo1.o</code>文件中的所有 <code>.input1</code>节。所有的来自任意文件的剩余的 <code>.input1</code>节和 <code>.input2</code>节被写入到输出节 <code>outputc</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SECTIONS &#123;</span><br><span class="line">  outputa 0x10000 :</span><br><span class="line">    &#123;</span><br><span class="line">    all.o</span><br><span class="line">    foo.o (.input1)</span><br><span class="line">    &#125;</span><br><span class="line">  outputb :</span><br><span class="line">    &#123;</span><br><span class="line">    foo.o (.input2)</span><br><span class="line">    foo1.o (.input1)</span><br><span class="line">    &#125;</span><br><span class="line">  outputc :</span><br><span class="line">    &#123;</span><br><span class="line">    *(.input1)</span><br><span class="line">    *(.input2)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>如果输出节和输入节的名称相同，并可以用C标识符表示，那么链接器将自动发现 <code>PROVIDE</code>的两个符号：<code>__start_SECNAME</code>和 <code>__stop_CNAME</code>，其中 <code>SECNAME</code>是节的名称。它们分别知识输出节的起始地址和结束地址。</p>
<blockquote>
<p>注：大多数节名不能表示为C标识符，因为他们包含 <code>&quot;.&quot;</code>字符。</p>
</blockquote>
<h4 id="3-2-3-5-输出节数据（可选，Output-Section-Data）"><a href="#3-2-3-5-输出节数据（可选，Output-Section-Data）" class="headerlink" title="3.2.3.5 输出节数据（可选，Output Section Data）"></a>3.2.3.5 输出节数据（可选，<a href="https://sourceware.org/binutils/docs/ld/Output-Section-Data.html">Output Section Data</a>）</h4><p>暂不解释。</p>
<h4 id="3-2-3-6-输出节关键字（可选，Output-Section-Keywords）"><a href="#3-2-3-6-输出节关键字（可选，Output-Section-Keywords）" class="headerlink" title="3.2.3.6 输出节关键字（可选，Output Section Keywords）"></a>3.2.3.6 输出节关键字（可选，<a href="https://sourceware.org/binutils/docs/ld/Output-Section-Keywords.html">Output Section Keywords</a>）</h4><p>暂不解释。</p>
<h4 id="3-2-3-7-输出节丢弃（可选，Output-Section-Discarding）"><a href="#3-2-3-7-输出节丢弃（可选，Output-Section-Discarding）" class="headerlink" title="3.2.3.7 输出节丢弃（可选，Output Section Discarding）"></a>3.2.3.7 输出节丢弃（可选，<a href="https://sourceware.org/binutils/docs/ld/Output-Section-Discarding.html">Output Section Discarding</a>）</h4><p>暂不解释。</p>
<h4 id="3-2-3-8-输出节属性（可选，Output-Section-Attributes）"><a href="#3-2-3-8-输出节属性（可选，Output-Section-Attributes）" class="headerlink" title="3.2.3.8 输出节属性（可选，Output Section Attributes）"></a>3.2.3.8 输出节属性（可选，<a href="https://sourceware.org/binutils/docs/ld/Output-Section-Attributes.html">Output Section Attributes</a>）</h4><p>一个完整的输出节描述如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">section [address] [(type)] :</span><br><span class="line">  [AT(lma)]</span><br><span class="line">  [ALIGN(section_align) | ALIGN_WITH_INPUT]</span><br><span class="line">  [SUBALIGN(subsection_align)]</span><br><span class="line">  [constraint]</span><br><span class="line">  &#123;</span><br><span class="line">    output-section-command</span><br><span class="line">    output-section-command</span><br><span class="line">    …</span><br><span class="line">  &#125; [&gt;region] [AT&gt;lma_region] [:phdr :phdr …] [=fillexp]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在上面的内容已经描述了 <code>section</code>，<code>address</code>和 <code>output-section-command</code>，下面对其他内容进行描述。</p>
<h5 id="3-2-3-8-1-输出节类型（type）"><a href="#3-2-3-8-1-输出节类型（type）" class="headerlink" title="3.2.3.8.1 输出节类型（type）"></a>3.2.3.8.1 输出节类型（<code>type</code>）</h5><p>每一个输出节都有一个类型，也就是关键字 <code>type</code>，定义了以下类型：</p>
<ol>
<li><code>NOLOAD</code>：该节被标记为 <strong>不可加载</strong> ，以保证在程序运行过程中不会被加载到内存中。</li>
<li><code>READONLY</code>：该节被标记为 <strong>只读</strong> 。</li>
<li><code>DESCT</code>：</li>
<li><code>COPY</code>：</li>
<li><code>INFO</code>：</li>
<li><code>OVERLAY</code>：这些类型名用于向后（<code>backward</code>）兼容，很少使用，具有相同的效果，即该节应标记为 <strong>不可分配</strong> ，程序运行过程中也不会为该节分配内存。</li>
<li><code>TYPE = type</code>：设置节类型为整型 <code>type</code>。在生成 <code>ELF</code>输出文件，类型名称 <code>SHT_PROGBITS</code>，<code>SHT_STRTAB</code>，<code>SHT_NOTE</code>， <code>SHT_NOBITS</code>，<code>SHT_INIT_ARRAY</code>, <code>SHT_FINI_ARRAY</code>，和 <code>SHT_PREINIT_ARRAY</code>也可以用于 <code>type</code>。用户有责任确保节类型的任意特殊要求得到满足。</li>
<li><p><code>READONLY ( TYPE = type )</code>：这个语句形式通过 <code>type</code>将 <code>READONLY</code>类型和类型指定结合在一起。</p>
<p><strong>链接器通常按照映射到输出节的输入节的属性设置输出节的属性，可以通过使用节类型来重载这个过程。</strong> 例如，在以下的脚本示例中，<code>ROM</code>节位于内存地址 <code>0</code>处，且不需要在程序运行过程中被载入。</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SECTIONS &#123;</span><br><span class="line">  ROM 0 (NOLOAD) : &#123; … &#125;</span><br><span class="line">  …</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="3-2-3-8-2-输出节-LMA"><a href="#3-2-3-8-2-输出节-LMA" class="headerlink" title="3.2.3.8.2 输出节 LMA"></a>3.2.3.8.2 输出节 <code>LMA</code></h5><p>每个节都有一个虚拟地址（<code>VMA</code>）和一个加载地址（<code>LMA</code>）（ <a href="https://sourceware.org/binutils/docs/ld/Basic-Script-Concepts.html">Basic Linker Script Concepts</a>）。<code>VMA</code>可以参考 <a href="https://sourceware.org/binutils/docs/ld/Output-Section-Address.html">Output Section Address</a> ，也可以参考 <code>1.3.3</code>节。 <strong><code>LMA</code>通常由 <code>AT</code>和 <code>AT&gt;</code>关键字指定。</strong> 是否指定 <code>LMA</code>是可选的。</p>
<p><code>AT</code>关键字将表达式作为参数，这指定了节的确切加载地址。<code>AT&gt;</code>关键字以内存区域的名称作为参数（<a href="https://sourceware.org/binutils/docs/ld/MEMORY.html">MEMORY Command</a>），节的加载地址设置为区域内下一个空闲地址，按节的对齐要求对齐。</p>
<p>如果未为可分配部分指定 <code>AT</code>和 <code>AT&gt;</code>，链接器会使用以下的启发式方法来决定 <code>LMA</code>：</p>
<ol>
<li>如果该节具有特定的 <code>VMA</code>地址，那么这也用作 <code>LMA</code>地址；</li>
<li>如果该节不可分配，那么其 <code>LMA</code>被设置为 <code>VMA</code>；</li>
<li>否则，如果可以找到与当前节兼容的存储器区域，并且该区域包含至少一个节，则 <code>LMA</code>被设置为使得 <code>VMA</code>和 <code>LMA</code>之间的差异与定位区域中的最后一个节的 <code>VMA</code>和 <code>LMA</code>之间的差异相同；（Otherwise if a memory region can be found that is compatible with the current section, and this region contains at least one section, then the LMA is set so the difference between the VMA and LMA is the same as the difference between the VMA and LMA of the last section in the located region.）</li>
<li>如果没有声明内存区域，则使用在上一步中覆盖整个地址空间的默认区域；</li>
<li>如果没有找到合适的区域，或者没有找到先前的节，那么 <code>LMA</code>被设置为等于 <code>VMA</code>。</li>
</ol>
<p>这个功能旨在使构建 <code>ROM</code>映像更容易。例如，以下链接器脚本创建三个输出节：一个名为 <code>.text</code>的节，开始于 <code>0x1000</code>，一个名为 <code>.mdata</code>的节，在 <code>.text</code>节的末尾加载，即使它的 <code>VMA</code>是 <code>0x2000</code>，一个名为 <code>.bss</code>的节，保存地址 <code>0x3000</code>处的未初始化数据。符号 <code>_data</code>由值 <code>0x2000</code>定义，表明了位置计数器保存 <code>VMA</code>的值，而不是 <code>LMA</code>的值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SECTIONS</span><br><span class="line">  &#123;</span><br><span class="line">  .text 0x1000 : &#123; *(.text) _etext = . ; &#125;</span><br><span class="line">  .mdata 0x2000 :</span><br><span class="line">    AT ( ADDR (.text) + SIZEOF (.text) )</span><br><span class="line">    &#123; _data = . ; *(.data); _edata = . ;  &#125;</span><br><span class="line">  .bss 0x3000 :</span><br><span class="line">    &#123; _bstart = . ;  *(.bss) *(COMMON) ; _bend = . ;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>与使用此链接器脚本生成的程序一起使用的运行时间的初始化代码将包括以下内容，以将初始化数据从 <code>ROM</code>映像中复制到它运行时间的地址。注意此代码如何利用链接器脚本定义的符号。</p>
<h5 id="3-2-3-8-3-强制输出对齐（ALIGN）"><a href="#3-2-3-8-3-强制输出对齐（ALIGN）" class="headerlink" title="3.2.3.8.3 强制输出对齐（ALIGN）"></a>3.2.3.8.3 强制输出对齐（<code>ALIGN</code>）</h5><p>可以使用 <code>ALIGN</code>指令来增加一个输出节的对齐方式。作为替代方案，可以使用 <code>ALIGN_WITH_INPUT</code>属性来强制在整个输出节中的 <code>VMA</code>和 <code>LMA</code>之间的差异保持不变。</p>
<h5 id="3-2-3-8-4-强制输入对齐（SUBALIGN）"><a href="#3-2-3-8-4-强制输入对齐（SUBALIGN）" class="headerlink" title="3.2.3.8.4 强制输入对齐（SUBALIGN）"></a>3.2.3.8.4 强制输入对齐（<code>SUBALIGN</code>）</h5><p>可以使用 <code>SUBALIGN</code>在输出节中强制输入节对齐。指定的值将覆盖输入节给定的任何对齐方式，无论是较大还是较小。</p>
<h5 id="3-2-3-8-5-输出节约束（constraint）"><a href="#3-2-3-8-5-输出节约束（constraint）" class="headerlink" title="3.2.3.8.5 输出节约束（constraint）"></a>3.2.3.8.5 输出节约束（<code>constraint</code>）</h5><p>通过分别使用关键字 <code>ONLY_IF_RO</code>和 <code>ONLY_IF_RW</code>，可以指定仅当输出节的所有输入节都是只读的或所有输入部分是读写的时才创建输出节。</p>
<h5 id="3-2-3-8-6-输出节区域（-gt-region）"><a href="#3-2-3-8-6-输出节区域（-gt-region）" class="headerlink" title="3.2.3.8.6 输出节区域（&gt;region）"></a>3.2.3.8.6 输出节区域（<code>&gt;region</code>）</h5><p>可以使用 <code>&gt;region</code>将节分配给先前定义的内存区域。See <a href="https://sourceware.org/binutils/docs/ld/MEMORY.html">MEMORY Command</a>.</p>
<p>此处有一个例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MEMORY &#123; rom : ORIGIN = 0x1000, LENGTH = 0x1000 &#125;</span><br><span class="line">SECTIONS &#123; ROM : &#123; *(.text) &#125; &gt;rom &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="3-2-3-8-7-输出节Phdr（-phdr）"><a href="#3-2-3-8-7-输出节Phdr（-phdr）" class="headerlink" title="3.2.3.8.7 输出节Phdr（:phdr）"></a>3.2.3.8.7 输出节Phdr（<code>:phdr</code>）</h5><p>可以使用 <code>:phdr</code>将节分配给之前定义的程序节。See <a href="https://sourceware.org/binutils/docs/ld/PHDRS.html">PHDRS Command</a>.</p>
<p>如果一个节被分配给一个或多个部分，则所有后续分配的节也将分配给那些部分，除非它们显式使用了 <code>:phdr</code>修饰符。可以使用 <code>:NONE</code>告诉链接器不要将节任何部分中。</p>
<p>下面是一个简单的例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PHDRS &#123; text PT_LOAD ; &#125;</span><br><span class="line">SECTIONS &#123; .text : &#123; *(.text) &#125; :text &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="3-2-3-8-8-输出节填充（-fillexp）"><a href="#3-2-3-8-8-输出节填充（-fillexp）" class="headerlink" title="3.2.3.8.8 输出节填充（=fillexp）"></a>3.2.3.8.8 输出节填充（<code>=fillexp</code>）</h5><p>可以使用 <code>=fillexp</code>设置整个节的填充方式，<code>fillexp</code>是一个表达式（see <a href="https://sourceware.org/binutils/docs/ld/Expressions.html">Expressions in Linker Scripts</a>）。输出节中任何其他未指定的内存区域（例如，由于输入节需要对齐而留下的间隙）将填充该值，必要时重复该值。如果填充表达式是一个简单的十六进制表达式，即以 <code>0x</code>开头的十六进制数字字符串，并且后面没有 <code>k</code>或 <code>M</code>，则可以使用任意长的十六进制序列来指定填充方式；前导的零也成为方式的一部分。对于其他所有情况，包括额外的括号或一个一元的 <code>+</code>，填充方式是表达式值的四个最低有效字节。在所有情况下，数字都是大端结构。</p>
<p>此外，也可以使用 <code>output section commands</code>中的 <code>FILL&lt;span&gt; &lt;/span&gt;</code>命令更改填充值。（see <a href="https://sourceware.org/binutils/docs/ld/Output-Section-Data.html">Output Section Data</a>）</p>
<p>下面是一个简单的例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SECTIONS &#123; .text : &#123; *(.text) &#125; =0x90909090 &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="3-2-3-9-覆盖说明（可选，Overlay-Description）"><a href="#3-2-3-9-覆盖说明（可选，Overlay-Description）" class="headerlink" title="3.2.3.9 覆盖说明（可选，Overlay Description）"></a>3.2.3.9 覆盖说明（可选，Overlay Description）</h4><p>一个覆盖描述提供了一种简单的方式，来描述作为单个存储器映像的一部分被加载但将在同一存储器地址运行的节。在运行时，某种类型的覆盖管理器会根据需要将覆盖的部分从运行时的内存地址复制进去或复制出来，可能只需要简单地操作寻址位。例如当内存的某个区域比另一个区域快时，这种方法就会很有用。</p>
<p>使用 <code>Overlay</code>命令来描述覆盖。<code>Overlay</code>命令在 <code>SECTIONS</code>命令中使用，与输出节描述类似。<code>Overlay</code>命令的完整语法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OVERLAY [start] : [NOCROSSREFS] [AT ( ldaddr )]</span><br><span class="line">  &#123;</span><br><span class="line">    secname1</span><br><span class="line">      &#123;</span><br><span class="line">        output-section-command</span><br><span class="line">        output-section-command</span><br><span class="line">        …</span><br><span class="line">      &#125; [:phdr…] [=fill]</span><br><span class="line">    secname2</span><br><span class="line">      &#123;</span><br><span class="line">        output-section-command</span><br><span class="line">        output-section-command</span><br><span class="line">        …</span><br><span class="line">      &#125; [:phdr…] [=fill]</span><br><span class="line">    …</span><br><span class="line">  &#125; [&gt;region] [:phdr…] [=fill] [,]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>除了 <code>Overlay</code>（关键字）外，所有的内容都是可选的，并且每个节都必须有一个名称（如 <code>secname1</code>和 <code>secname2</code>）。<code>Overlay</code>结构中的节定义与通常的 <code>SECTIONS</code>结构中的定义相同(see <a href="https://sourceware.org/binutils/docs/ld/SECTIONS.html">SECTIONS Command</a>)，除了一点，<code>Overlay</code>中的节不能定义地址和内存区域。</p>
<p>如果使用了填充，并且 <code>sections-command</code>命令看起来像表达式的延续（？），则可能需要结尾处的逗号（<code>,</code>）。（The comma at the end may be required if a fill is used and the next sections-command looks like a continuation of the expression.）</p>
<p>这些节都是使用相同的起始地址定义的。这些节的 <code>LMA</code>的排列应使其在内存中从用于整个 <code>Overlay</code>的加载地址开始连续（与正常的节定义一样，加载地址是可选的，默认是起始地址；起始地址也是可选，并且默认为位置计数器的当前值）。</p>
<p>如果使用了 <code>NOCROSSREFS</code>关键字，并且节之间存在任何引用，链接器将报告错误。由于这些节都在同一地址运行，因此一个节直接引用另一个节通常没有意义。（See <a href="https://sourceware.org/binutils/docs/ld/Miscellaneous-Commands.html">NOCROSSREFS</a>.）</p>
<p>对于 <code>OVERLAY</code>中的每个节，链接器会自动提供两个符号。符号 <code>__load_start_secname</code>定义为节的起始加载地址。符号 <code>__load_stop_secname</code>定义为节的最终加载地址。<code>secname</code>中任何在 <code>C</code>标识符中不合法的字符都将被删除。<code>C</code>（或汇编程序）代码可以根据需要使用这些符号来移动重叠的部分。</p>
<p>在覆盖结束时，位置计数器的值设置为覆盖的起始地址加上最大部分的大小。</p>
<p>这里有一个例子。请记住，这将出现在 <code>SECTIONS</code>结构中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OVERLAY 0x1000 : AT (0x4000)</span><br><span class="line"> &#123;</span><br><span class="line">   .text0 &#123; o1/*.o(.text) &#125;</span><br><span class="line">   .text1 &#123; o2/*.o(.text) &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这定义了从地址 <code>0x1000</code>开始的 <code>.text0</code>和 <code>.text1</code>。<code>.text0</code>会被加载到地址 <code>0x4000</code>，而 <code>.text1</code>将被加载到 <code>.text0</code>后。如果被引用，将定义以下符号：<code>__load_start_text0</code>, <code>__load_stop_text0</code>, <code>__load_start_text1</code>, <code>__load_stop_text1</code>。</p>
<p>将覆盖 <code>.text1</code>复制到覆盖区域的C代码可能如下所示。</p>
<blockquote>
<p>注：<code>OVERLAY</code>命令只是语法糖，因为它所做的一切都可以使用更基本的命令来完成。上面的例子可以写成如下。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text0 0x1000 : AT (0x4000) &#123; o1/*.o(.text) &#125;</span><br><span class="line">PROVIDE (__load_start_text0 = LOADADDR (.text0));</span><br><span class="line">PROVIDE (__load_stop_text0 = LOADADDR (.text0) + SIZEOF (.text0));</span><br><span class="line">.text1 0x1000 : AT (0x4000 + SIZEOF (.text0)) &#123; o2/*.o(.text) &#125;</span><br><span class="line">PROVIDE (__load_start_text1 = LOADADDR (.text1));</span><br><span class="line">PROVIDE (__load_stop_text1 = LOADADDR (.text1) + SIZEOF (.text1));</span><br><span class="line">. = 0x1000 + MAX (SIZEOF (.text0), SIZEOF (.text1));</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="3-2-4-PROVIDE"><a href="#3-2-4-PROVIDE" class="headerlink" title="3.2.4 PROVIDE"></a>3.2.4 <code>PROVIDE</code></h3><p>参考：<a href="https://sourceware.org/binutils/docs/ld/PROVIDE.html">PROVIDE (LD) (sourceware.org)</a></p>
<p>在某些情况下，仅在符号被引用且未被链接中包含的任何对象定义时，链接器脚本才需要定义符号。例如，传统链接器定义了符号 <code>etext</code>。而 <code>ANSI C</code>中要求用户能够使用 <code>etext</code>作为函数名，而且不会遇到错误。<code>PROVIDE</code>关键字只能用于定义符号，如 <code>etext</code>，但前提是它被引用但未被定义。语法是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PROVIDE(symbol = expression)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>下面是使用 <code>PROVIDE</code>定义 <code>etext</code>的示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SECTIONS</span><br><span class="line">&#123;</span><br><span class="line">  .text :</span><br><span class="line">    &#123;</span><br><span class="line">      *(.text)</span><br><span class="line">      _etext = .;</span><br><span class="line">      PROVIDE(etext = .);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在本例中，如果程序中定义了 <code>_etext</code>（带前导下划线），链接器将给出一个多定义诊断提示。另一方面，如果程序中定义了 <code>etext</code>（不带前导下划线），链接器将在程序中无声地使用该定义。如果程序引用了 <code>etext</code>，但没有定义 <code>etext</code>，链接器将会使用链接器脚本中地定义。</p>
<blockquote>
<p>注：<code>PROVIDE</code>指令认为要定义通用符号，即使这样的符号可以与 <code>PROVIDE</code>指令将创建的符号组合。当考虑析构函数和析构函数列表符号（如 <code>__CTOR_LIST__</code>）时，这一点尤为重要，因为它们通常被定义为通用符号。</p>
</blockquote>
<h2 id="3-3-指定ROM和RAM"><a href="#3-3-指定ROM和RAM" class="headerlink" title="3.3 指定ROM和RAM"></a>3.3 指定ROM和RAM</h2><blockquote>
<p>如果需要使用外部存储器，如需要XIP和BootRom之类的功能，我们也需要设置存储Bank的区域和大小。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MEMORY</span><br><span class="line">&#123;</span><br><span class="line">    ROM (rx) : ORIGIN =0x08000000,LENGTH =128k</span><br><span class="line">    RAM (rw) : ORIGIN =0x24000000,LENGTH =512k</span><br><span class="line">&#125;COPY</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="3-4-指定程序入口"><a href="#3-4-指定程序入口" class="headerlink" title="3.4 指定程序入口"></a>3.4 指定程序入口</h2><p>将符号 <code>Reset_Handler</code>设置为入口地址，入口地址是进程执行的第一条指令在进程地址空间的地址，<code>ENTRY(Reset_Handler)</code>表示程序最开始从复位中断服务函数处开始执行。Reset_Handler定义在startup_stm32f407xx.s启动文件中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ENTRY(Reset_Handler)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="3-5-指定堆栈大小"><a href="#3-5-指定堆栈大小" class="headerlink" title="3.5 指定堆栈大小"></a>3.5 指定堆栈大小</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_system_stack_size = 0x200;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>指定栈大小，并结合后面的节的定义，设置栈顶和栈底。</p>
<p>此处由于使用的是RTT，因此多余的RAM会被内存堆管理器管理，无需分配堆。</p>
<h2 id="3-6-指定各个节定义"><a href="#3-6-指定各个节定义" class="headerlink" title="3.6 指定各个节定义"></a>3.6 指定各个节定义</h2><p>以下是完整的段定义。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SECTIONS</span><br><span class="line">&#123;</span><br><span class="line">    .text :                             /* 输出节名 */</span><br><span class="line">    &#123;</span><br><span class="line">        . = ALIGN(4);                   /* 四字节对齐, 位置计数器对齐到下一个对齐边界 */</span><br><span class="line">        _stext = .;                     /* 记录.text节的开始位置 */</span><br><span class="line">        KEEP(*(.isr_vector))            /* Startup code, 标记.isr_vector节的内容不应被消除，避免被编译器优化，</span><br><span class="line">                                            同时向量表放在.text段最开始的位置 */</span><br><span class="line"></span><br><span class="line">        . = ALIGN(4);           </span><br><span class="line">        *(.text)                        /* remaining code, 将匹配的输入节放入输出节中 */</span><br><span class="line">        *(.text.*)                      /* remaining code */</span><br><span class="line">        *(.rodata)                      /* read-only data (constants) */</span><br><span class="line">        *(.rodata*) </span><br><span class="line">        *(.glue_7)</span><br><span class="line">        *(.glue_7t)</span><br><span class="line">        *(.gnu.linkonce.t*)</span><br><span class="line"></span><br><span class="line">        /* section information for finsh shell */</span><br><span class="line">        . = ALIGN(4);</span><br><span class="line">        __fsymtab_start = .;</span><br><span class="line">        KEEP(*(FSymTab))</span><br><span class="line">        __fsymtab_end = .;</span><br><span class="line"></span><br><span class="line">        . = ALIGN(4);</span><br><span class="line">        __vsymtab_start = .;</span><br><span class="line">        KEEP(*(VSymTab))</span><br><span class="line">        __vsymtab_end = .;</span><br><span class="line"></span><br><span class="line">        /* section information for utest */</span><br><span class="line">        . = ALIGN(4);</span><br><span class="line">        __rt_utest_tc_tab_start = .;</span><br><span class="line">        KEEP(*(UtestTcTab))</span><br><span class="line">        __rt_utest_tc_tab_end = .;</span><br><span class="line"></span><br><span class="line">        /* section information for at server */</span><br><span class="line">        . = ALIGN(4);</span><br><span class="line">        __rtatcmdtab_start = .;</span><br><span class="line">        KEEP(*(RtAtCmdTab))</span><br><span class="line">        __rtatcmdtab_end = .;</span><br><span class="line">        . = ALIGN(4);</span><br><span class="line"></span><br><span class="line">        /* section information for initial. */</span><br><span class="line">        . = ALIGN(4);</span><br><span class="line">        __rt_init_start = .;</span><br><span class="line">        KEEP(*(SORT(.rti_fn*)))</span><br><span class="line">        __rt_init_end = .;</span><br><span class="line"></span><br><span class="line">        . = ALIGN(4);</span><br><span class="line"></span><br><span class="line">        PROVIDE(__ctors_start__ = .);           /* 提供__ctors_start__符号 */</span><br><span class="line">        KEEP (*(SORT(.init_array.*)))</span><br><span class="line">        KEEP (*(.init_array))</span><br><span class="line">        PROVIDE(__ctors_end__ = .);</span><br><span class="line"></span><br><span class="line">        . = ALIGN(4);</span><br><span class="line"></span><br><span class="line">        _etext = .;                             /* 记录.text节的结束地址 */</span><br><span class="line">    &#125; &gt; ROM = 0                                 /* .text节存入ROM */</span><br><span class="line"></span><br><span class="line">    /* .ARM.exidx is sorted, so has to go in its own output section.  */</span><br><span class="line">    __exidx_start = .;</span><br><span class="line">    .ARM.exidx :</span><br><span class="line">    &#123;</span><br><span class="line">        *(.ARM.exidx* .gnu.linkonce.armexidx.*)</span><br><span class="line"></span><br><span class="line">        /* This is used by the startup in order to initialize the .data secion */</span><br><span class="line">        _sidata = .;</span><br><span class="line">    &#125; &gt; ROM</span><br><span class="line">    __exidx_end = .;</span><br><span class="line"></span><br><span class="line">    /* .data section which is used for initialized data */</span><br><span class="line"></span><br><span class="line">    .data : AT (_sidata)</span><br><span class="line">    &#123;</span><br><span class="line">        . = ALIGN(4);</span><br><span class="line">        /* This is used by the startup in order to initialize the .data secion */</span><br><span class="line">        _sdata = . ;</span><br><span class="line"></span><br><span class="line">        *(.data)</span><br><span class="line">        *(.data.*)</span><br><span class="line">        *(.gnu.linkonce.d*)</span><br><span class="line"></span><br><span class="line">        PROVIDE(__dtors_start__ = .);</span><br><span class="line">        KEEP(*(SORT(.dtors.*)))</span><br><span class="line">        KEEP(*(.dtors))</span><br><span class="line">        PROVIDE(__dtors_end__ = .);</span><br><span class="line"></span><br><span class="line">        . = ALIGN(4);</span><br><span class="line">        /* This is used by the startup in order to initialize the .data secion */</span><br><span class="line">        _edata = . ;</span><br><span class="line">    &#125; &gt;RAM</span><br><span class="line"></span><br><span class="line">    .stack : </span><br><span class="line">    &#123;</span><br><span class="line">        . = ALIGN(4);</span><br><span class="line">        _sstack = .;</span><br><span class="line">        . = . + _system_stack_size;</span><br><span class="line">        . = ALIGN(4);</span><br><span class="line">        _estack = .;</span><br><span class="line">    &#125; &gt;RAM</span><br><span class="line"></span><br><span class="line">    __bss_start = .;</span><br><span class="line">    .bss :</span><br><span class="line">    &#123;</span><br><span class="line">        . = ALIGN(4);</span><br><span class="line">        /* This is used by the startup in order to initialize the .bss secion */</span><br><span class="line">        _sbss = .;</span><br><span class="line"></span><br><span class="line">        *(.bss)</span><br><span class="line">        *(.bss.*)</span><br><span class="line">        *(COMMON)</span><br><span class="line"></span><br><span class="line">        . = ALIGN(4);</span><br><span class="line">        /* This is used by the startup in order to initialize the .bss secion */</span><br><span class="line">        _ebss = . ;</span><br><span class="line"></span><br><span class="line">        *(.bss.init)</span><br><span class="line">    &#125; &gt; RAM</span><br><span class="line">    __bss_end = .;</span><br><span class="line"></span><br><span class="line">    _end = .;</span><br><span class="line"></span><br><span class="line">    /* 以下部分用于调试，即不可加载也不可分配  */</span><br><span class="line">    /* Stabs debugging sections.  */</span><br><span class="line">    .stab          0 : &#123; *(.stab) &#125;</span><br><span class="line">    .stabstr       0 : &#123; *(.stabstr) &#125;</span><br><span class="line">    .stab.excl     0 : &#123; *(.stab.excl) &#125;</span><br><span class="line">    .stab.exclstr  0 : &#123; *(.stab.exclstr) &#125;</span><br><span class="line">    .stab.index    0 : &#123; *(.stab.index) &#125;</span><br><span class="line">    .stab.indexstr 0 : &#123; *(.stab.indexstr) &#125;</span><br><span class="line">    .comment       0 : &#123; *(.comment) &#125;</span><br><span class="line">    /* DWARF debug sections.</span><br><span class="line">     * Symbols in the DWARF debugging sections are relative to the beginning</span><br><span class="line">     * of the section so we begin them at 0.  */</span><br><span class="line">    /* DWARF 1 */</span><br><span class="line">    .debug          0 : &#123; *(.debug) &#125;</span><br><span class="line">    .line           0 : &#123; *(.line) &#125;</span><br><span class="line">    /* GNU DWARF 1 extensions */</span><br><span class="line">    .debug_srcinfo  0 : &#123; *(.debug_srcinfo) &#125;</span><br><span class="line">    .debug_sfnames  0 : &#123; *(.debug_sfnames) &#125;</span><br><span class="line">    /* DWARF 1.1 and DWARF 2 */</span><br><span class="line">    .debug_aranges  0 : &#123; *(.debug_aranges) &#125;</span><br><span class="line">    .debug_pubnames 0 : &#123; *(.debug_pubnames) &#125;</span><br><span class="line">    /* DWARF 2 */</span><br><span class="line">    .debug_info     0 : &#123; *(.debug_info .gnu.linkonce.wi.*) &#125;</span><br><span class="line">    .debug_abbrev   0 : &#123; *(.debug_abbrev) &#125;</span><br><span class="line">    .debug_line     0 : &#123; *(.debug_line) &#125;</span><br><span class="line">    .debug_frame    0 : &#123; *(.debug_frame) &#125;</span><br><span class="line">    .debug_str      0 : &#123; *(.debug_str) &#125;</span><br><span class="line">    .debug_loc      0 : &#123; *(.debug_loc) &#125;</span><br><span class="line">    .debug_macinfo  0 : &#123; *(.debug_macinfo) &#125;</span><br><span class="line">    /* SGI/MIPS DWARF 2 extensions */</span><br><span class="line">    .debug_weaknames 0 : &#123; *(.debug_weaknames) &#125;</span><br><span class="line">    .debug_funcnames 0 : &#123; *(.debug_funcnames) &#125;</span><br><span class="line">    .debug_typenames 0 : &#123; *(.debug_typenames) &#125;</span><br><span class="line">    .debug_varnames  0 : &#123; *(.debug_varnames) &#125;</span><br><span class="line">&#125;COPY</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="3-7-完整的链接脚本示例"><a href="#3-7-完整的链接脚本示例" class="headerlink" title="3.7 完整的链接脚本示例"></a>3.7 完整的链接脚本示例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line"> * linker script for STM32H750XBHx with GNU ld</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">/* Program Entry, set to mark it as &quot;used&quot; and avoid gc */</span><br><span class="line">MEMORY</span><br><span class="line">&#123;</span><br><span class="line">ROM (rx) : ORIGIN =0x08000000,LENGTH =128k</span><br><span class="line">RAM (rw) : ORIGIN =0x24000000,LENGTH =512k</span><br><span class="line">&#125;</span><br><span class="line">ENTRY(Reset_Handler)</span><br><span class="line">_system_stack_size = 0x200;</span><br><span class="line"></span><br><span class="line">SECTIONS</span><br><span class="line">&#123;</span><br><span class="line">    .text :</span><br><span class="line">    &#123;</span><br><span class="line">        . = ALIGN(4);</span><br><span class="line">        _stext = .;</span><br><span class="line">        KEEP(*(.isr_vector))            /* Startup code, 向量表放在.text节最开始的部分 */</span><br><span class="line"></span><br><span class="line">        . = ALIGN(4);</span><br><span class="line">        *(.text)                        /* remaining code */</span><br><span class="line">        *(.text.*)                      /* remaining code */</span><br><span class="line">        *(.rodata)                      /* read-only data (constants) */</span><br><span class="line">        *(.rodata*)</span><br><span class="line">        *(.glue_7)</span><br><span class="line">        *(.glue_7t)</span><br><span class="line">        *(.gnu.linkonce.t*)</span><br><span class="line"></span><br><span class="line">        /* section information for finsh shell */</span><br><span class="line">        . = ALIGN(4);</span><br><span class="line">        __fsymtab_start = .;</span><br><span class="line">        KEEP(*(FSymTab))</span><br><span class="line">        __fsymtab_end = .;</span><br><span class="line"></span><br><span class="line">        . = ALIGN(4);</span><br><span class="line">        __vsymtab_start = .;</span><br><span class="line">        KEEP(*(VSymTab))</span><br><span class="line">        __vsymtab_end = .;</span><br><span class="line"></span><br><span class="line">        /* section information for utest */</span><br><span class="line">        . = ALIGN(4);</span><br><span class="line">        __rt_utest_tc_tab_start = .;</span><br><span class="line">        KEEP(*(UtestTcTab))</span><br><span class="line">        __rt_utest_tc_tab_end = .;</span><br><span class="line"></span><br><span class="line">        /* section information for at server */</span><br><span class="line">        . = ALIGN(4);</span><br><span class="line">        __rtatcmdtab_start = .;</span><br><span class="line">        KEEP(*(RtAtCmdTab))</span><br><span class="line">        __rtatcmdtab_end = .;</span><br><span class="line">        . = ALIGN(4);</span><br><span class="line"></span><br><span class="line">        /* section information for initial. */</span><br><span class="line">        . = ALIGN(4);</span><br><span class="line">        __rt_init_start = .;</span><br><span class="line">        KEEP(*(SORT(.rti_fn*)))</span><br><span class="line">        __rt_init_end = .;</span><br><span class="line"></span><br><span class="line">        . = ALIGN(4);</span><br><span class="line"></span><br><span class="line">        PROVIDE(__ctors_start__ = .);</span><br><span class="line">        KEEP (*(SORT(.init_array.*)))</span><br><span class="line">        KEEP (*(.init_array))</span><br><span class="line">        PROVIDE(__ctors_end__ = .);</span><br><span class="line"></span><br><span class="line">        . = ALIGN(4);</span><br><span class="line"></span><br><span class="line">        _etext = .;</span><br><span class="line">    &#125; &gt; ROM = 0</span><br><span class="line"></span><br><span class="line">    /* .ARM.exidx is sorted, so has to go in its own output section.  */</span><br><span class="line">    __exidx_start = .;</span><br><span class="line">    .ARM.exidx :</span><br><span class="line">    &#123;</span><br><span class="line">        *(.ARM.exidx* .gnu.linkonce.armexidx.*)</span><br><span class="line"></span><br><span class="line">        /* This is used by the startup in order to initialize the .data secion */</span><br><span class="line">        _sidata = .;</span><br><span class="line">    &#125; &gt; ROM</span><br><span class="line">    __exidx_end = .;</span><br><span class="line"></span><br><span class="line">    /* .data section which is used for initialized data */</span><br><span class="line"></span><br><span class="line">    .data : AT (_sidata)</span><br><span class="line">    &#123;</span><br><span class="line">        . = ALIGN(4);</span><br><span class="line">        /* This is used by the startup in order to initialize the .data secion */</span><br><span class="line">        _sdata = . ;</span><br><span class="line"></span><br><span class="line">        *(.data)</span><br><span class="line">        *(.data.*)</span><br><span class="line">        *(.gnu.linkonce.d*)</span><br><span class="line"></span><br><span class="line">        PROVIDE(__dtors_start__ = .);</span><br><span class="line">        KEEP(*(SORT(.dtors.*)))</span><br><span class="line">        KEEP(*(.dtors))</span><br><span class="line">        PROVIDE(__dtors_end__ = .);</span><br><span class="line"></span><br><span class="line">        . = ALIGN(4);</span><br><span class="line">        /* This is used by the startup in order to initialize the .data secion */</span><br><span class="line">        _edata = . ;</span><br><span class="line">    &#125; &gt;RAM</span><br><span class="line">     /* 初始化栈 */</span><br><span class="line">    .stack :                        </span><br><span class="line">    &#123;</span><br><span class="line">        . = ALIGN(4);</span><br><span class="line">        _sstack = .;</span><br><span class="line">        . = . + _system_stack_size;</span><br><span class="line">        . = ALIGN(4);</span><br><span class="line">        _estack = .;</span><br><span class="line">    &#125; &gt;RAM</span><br><span class="line"></span><br><span class="line">    __bss_start = .;</span><br><span class="line">    .bss :</span><br><span class="line">    &#123;</span><br><span class="line">        . = ALIGN(4);</span><br><span class="line">        /* This is used by the startup in order to initialize the .bss secion */</span><br><span class="line">        _sbss = .;</span><br><span class="line"></span><br><span class="line">        *(.bss)</span><br><span class="line">        *(.bss.*)</span><br><span class="line">        *(COMMON)</span><br><span class="line"></span><br><span class="line">        . = ALIGN(4);</span><br><span class="line">        /* This is used by the startup in order to initialize the .bss secion */</span><br><span class="line">        _ebss = . ;</span><br><span class="line"></span><br><span class="line">        *(.bss.init)</span><br><span class="line">    &#125; &gt; RAM</span><br><span class="line">    __bss_end = .;</span><br><span class="line"></span><br><span class="line">    _end = .;</span><br><span class="line"></span><br><span class="line">    /* Stabs debugging sections.  */</span><br><span class="line">    .stab          0 : &#123; *(.stab) &#125;</span><br><span class="line">    .stabstr       0 : &#123; *(.stabstr) &#125;</span><br><span class="line">    .stab.excl     0 : &#123; *(.stab.excl) &#125;</span><br><span class="line">    .stab.exclstr  0 : &#123; *(.stab.exclstr) &#125;</span><br><span class="line">    .stab.index    0 : &#123; *(.stab.index) &#125;</span><br><span class="line">    .stab.indexstr 0 : &#123; *(.stab.indexstr) &#125;</span><br><span class="line">    .comment       0 : &#123; *(.comment) &#125;</span><br><span class="line">    /* DWARF debug sections.</span><br><span class="line">     * Symbols in the DWARF debugging sections are relative to the beginning</span><br><span class="line">     * of the section so we begin them at 0.  */</span><br><span class="line">    /* DWARF 1 */</span><br><span class="line">    .debug          0 : &#123; *(.debug) &#125;</span><br><span class="line">    .line           0 : &#123; *(.line) &#125;</span><br><span class="line">    /* GNU DWARF 1 extensions */</span><br><span class="line">    .debug_srcinfo  0 : &#123; *(.debug_srcinfo) &#125;</span><br><span class="line">    .debug_sfnames  0 : &#123; *(.debug_sfnames) &#125;</span><br><span class="line">    /* DWARF 1.1 and DWARF 2 */</span><br><span class="line">    .debug_aranges  0 : &#123; *(.debug_aranges) &#125;</span><br><span class="line">    .debug_pubnames 0 : &#123; *(.debug_pubnames) &#125;</span><br><span class="line">    /* DWARF 2 */</span><br><span class="line">    .debug_info     0 : &#123; *(.debug_info .gnu.linkonce.wi.*) &#125;</span><br><span class="line">    .debug_abbrev   0 : &#123; *(.debug_abbrev) &#125;</span><br><span class="line">    .debug_line     0 : &#123; *(.debug_line) &#125;</span><br><span class="line">    .debug_frame    0 : &#123; *(.debug_frame) &#125;</span><br><span class="line">    .debug_str      0 : &#123; *(.debug_str) &#125;</span><br><span class="line">    .debug_loc      0 : &#123; *(.debug_loc) &#125;</span><br><span class="line">    .debug_macinfo  0 : &#123; *(.debug_macinfo) &#125;</span><br><span class="line">    /* SGI/MIPS DWARF 2 extensions */</span><br><span class="line">    .debug_weaknames 0 : &#123; *(.debug_weaknames) &#125;</span><br><span class="line">    .debug_funcnames 0 : &#123; *(.debug_funcnames) &#125;</span><br><span class="line">    .debug_typenames 0 : &#123; *(.debug_typenames) &#125;</span><br><span class="line">    .debug_varnames  0 : &#123; *(.debug_varnames) &#125;</span><br><span class="line">&#125;</span><br><span class="line">COPY</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>链接文件的主要作用是设定栈空间和堆空间（这也省略了启动文件中对堆栈空间的开辟），指定入口函数为Reset_Handler，指定输出段的布局。</p>
<p><img src="/2024/04/04/STM32%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image/1701432060896.png" alt="1701432060896"></p>
<h1 id="4-STM32的启动文件分析（基于MDK）"><a href="#4-STM32的启动文件分析（基于MDK）" class="headerlink" title="4 STM32的启动文件分析（基于MDK）"></a>4 STM32的启动文件分析（基于MDK）</h1><p>参考链接：<a href="https://blog.csdn.net/weixin_42328389/article/details/121855164">(3条消息) ARM 内核寄存器 和 基本汇编语言讲解_矜辰所致的博客-CSDN博客_arm汇编语言</a></p>
<p><a href="https://www.bilibili.com/video/BV1US4y1o7ok/?spm_id_from=pageDriver&amp;vd_source=b2294685dcc4b104a99f116c1c175bce">第4期BSP驱动教程：STM32H7从启动到运行过程全解析，电源域，复位，时钟，软硬件启动流程到堆栈，map和htm文件分析_哔哩哔哩_bilibili</a></p>
<p><a href="https://www.cnblogs.com/yucloud/p/stm32_startup.html">STM32启动代码分析及其汇编学习-ARM - 蓝天上的云℡ - 博客园 (cnblogs.com)</a></p>
<p>无论是是何种MCU，从简单的51，MSP430，到ARM9，ARM11，A7 都必须有启动文件，因为对于嵌入式开发，绝大部分情况都是使用C语言，而 <strong>C语言一般都是从main 函数开始</strong> ，但是对于MCU来说，他是<strong>如何找到并执行main函数</strong>的，就需要用到“ <strong>启动文件</strong> ”，就是各种 startup_xxxx.s 文件。</p>
<p>换句话说，启动文件是 <strong>使用机器认识的汇编语言</strong> ，经过一些必要的配置，最终能够调用 main 函数，使得用户程序能够在 MCU上正常运行起来的必备文件。</p>
<blockquote>
<p>STM32 总体启动顺序：</p>
<p><code>.s启动文件</code> -&gt; <code>中断处理函数外部定义</code> -&gt; <code>SystemInit()</code> -&gt; <code>SetSysClock</code> -&gt; <code>__main</code> -&gt; <code>main()</code></p>
</blockquote>
<p>以下我们需要参考一个 <code>startup_stm32h750xx.s</code>文件分析一下STM32的汇编启动文件。</p>
<h2 id="4-1-启动文件的主要作用"><a href="#4-1-启动文件的主要作用" class="headerlink" title="4.1 启动文件的主要作用"></a>4.1 启动文件的主要作用</h2><p>在每一款常用MCU的Pack包中，往往都会包含一个startup_xxx.s的汇编启动文件，以STM32为例，这个文件通常会被命名成startup_stm32xxxxx.s等格式。</p>
<p>在该汇编的头部通常会有一段注释，介绍了启动文件执行的主要工作：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;******************** (C) COPYRIGHT 2018 STMicroelectronics ********************</span><br><span class="line">;* File Name          : startup_stm32h750xx.s</span><br><span class="line">;* @author  MCD Application Team</span><br><span class="line">;* Description        : STM32H7xx devices vector table for MDK-ARM toolchain. </span><br><span class="line">;*                      This module performs:</span><br><span class="line">;*                      - Set the initial SP                        //初始化堆栈指针 SP=_initial_sp </span><br><span class="line">;*                      - Set the initial PC == Reset_Handler       //初始化 PC 指针=Reset_Handler</span><br><span class="line">;*                      - Set the vector table entries with the exceptions ISR address  //初始化中断向量表</span><br><span class="line">;*                      - Branches to __main in the C library (which eventually</span><br><span class="line">;*                        calls main()).                            // 调用C库函数_main初始化用户堆栈，最终调用main函数，转入C</span><br><span class="line">;*                      After Reset the Cortex-M processor is in Thread mode,</span><br><span class="line">;*                      priority is Privileged, and the Stack is set to Main.</span><br><span class="line">;* &lt;&lt;&lt; Use Configuration Wizard in Context Menu &gt;&gt;&gt;   </span><br><span class="line">;******************************************************************************</span><br><span class="line">;* @attention</span><br><span class="line">;*</span><br><span class="line">;* Copyright (c) 2018 STMicroelectronics.</span><br><span class="line">;* All rights reserved.</span><br><span class="line">;*</span><br><span class="line">;* This software component is licensed by ST under BSD 3-Clause license,</span><br><span class="line">;* the &quot;License&quot;; You may not use this file except in compliance with the</span><br><span class="line">;* License. You may obtain a copy of the License at:</span><br><span class="line">;*                        opensource.org/licenses/BSD-3-Clause</span><br><span class="line">;*</span><br><span class="line">;******************************************************************************</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="4-2-启动文件的常用MDK-ARM汇编伪指令"><a href="#4-2-启动文件的常用MDK-ARM汇编伪指令" class="headerlink" title="4.2 启动文件的常用MDK/ARM汇编伪指令"></a>4.2 启动文件的常用MDK/ARM汇编伪指令</h2><p>参考链接：<a href="https://blog.csdn.net/weixin_42328389/article/details/121855164">(3条消息) ARM 内核寄存器 和 基本汇编语言讲解_矜辰所致的博客-CSDN博客_arm汇编语言</a></p>
<p><a href="https://developer.arm.com/documentation/dui0473/m/directives-reference/space-or-fill">ARM Compiler armasm User Guide Version 5.06</a></p>
<p><a href="https://blog.csdn.net/zlmm741/article/details/105189487">(3条消息) 第七章 ARM 反汇编基础（五）（ARM 汇编指令集）_zlmm741的博客-CSDN博客</a></p>
<blockquote>
<p>ARM汇编伪指令是ARM公司的，GNU汇编伪指令是GNU平台的。他们有自己的汇编器，不同的汇编器的解释语法可以设成不同。</p>
</blockquote>
<p>汇编语言分成两块：标准指令集和非标准指令集。 伪指令属于非标准指令集。</p>
<p><strong>伪指令</strong>是类似于宏的东西，把复杂的有好几条指令进行跳转的完成的小功能级进行新的标签设定，这就是伪指令。</p>
<p>类似于学c语言的时候的预处理，在预处理的时候把它定义于一堆的宏转化为真正的c语言的代码。同样，伪指令是在定义好之后的汇编，汇编的时候会把它翻译成标准指令，也许一条简单的伪指令可以翻译成很多条标准的汇编指令集，所以这就是伪指令最重要的作用。</p>
<p>基本的指令可以做各类操作了，但操作起来太麻烦了。伪指令定义了一些类似于带参数的宏，能够更好的实现汇编程序逻辑。（比如我现在要设置一个值给寄存器R0，但下次我修改了寄存器R0之后又需要读出来刚才的值，那我们就要先临时保存值到SPSR,CPSR，然后不断切换。）</p>
<p>伪指令只是在汇编器之前作用，汇编以后翻译为标准的汇编令集。</p>
<p>《ARM Cortex-M3与Cortex-M4权威指南》第5.6节有具体的解释，当然我们也可以参考<a href="https://developer.arm.com/documentation/ka001328/latest">Documentation – Arm Developer</a>。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>指令名称</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>EQU</strong></td>
<td>给数字常量取一个符号名，相当于C语言中的 define</td>
</tr>
<tr>
<td><strong>AREA</strong></td>
<td>汇编一个新的代码段或者数据段</td>
</tr>
<tr>
<td><strong>ALIGN</strong></td>
<td>编译器对指令或者数据的存放地址进行对齐，一般需要跟一个立即数，缺省表示 4字节对齐。要注意的是，这个不是 ARM的指令，是编译器的，这里放到一起为了方便。</td>
</tr>
<tr>
<td><strong>SPACE</strong></td>
<td>分配内存空间</td>
</tr>
<tr>
<td><strong>PRESERVE8</strong></td>
<td>当前文件堆栈需要按照8字节对齐</td>
</tr>
<tr>
<td><strong>THUMB</strong></td>
<td>表示后面指令兼容 THUMB指令。在 ARM以前的指令集中有 16位的THUMBM指令，现在 Cortex-M系列使用的都是 THUMB-2指令集，THUMB-2是 32位的，兼容 16位和 32位的指令，是 THUMB的超级版。</td>
</tr>
<tr>
<td><strong>EXPORT</strong></td>
<td>声明一个标号具有全局属性，可被外部的文件使用</td>
</tr>
<tr>
<td><strong>DCD</strong></td>
<td>以字节为单位分配内存，要求4字节对齐，并要求初始化这些内存</td>
</tr>
<tr>
<td><strong>PROC</strong></td>
<td>定义子程序，与ENDP成对使用，表示子程序结束</td>
</tr>
<tr>
<td><strong>WEAK</strong></td>
<td>弱定义，如果外部文件声明了一个标号，则优先使用外部文件定义的标号，如果外部文件没有定义也不会出错。要注意的是，这个不是 ARM的指令，是编译器的，这里放到一起为了方便。</td>
</tr>
<tr>
<td><strong>IMPORT</strong></td>
<td>声明标号来自外部文件，跟C语言中的 <code>extern</code>关键字类似</td>
</tr>
<tr>
<td><strong>LDR</strong></td>
<td>从存储器中加载字到一个存储器中</td>
</tr>
<tr>
<td><strong>BLX</strong></td>
<td>跳转到由寄存器给出的地址，并根据寄存器的 LSE 确定处理器的状态，还要把跳转前的下条指令地址保存到 LR</td>
</tr>
<tr>
<td><strong>BX</strong></td>
<td>跳转到由寄存器 /标号给出的地址，不用返回</td>
</tr>
<tr>
<td><strong>B</strong></td>
<td>跳转到一个标号</td>
</tr>
<tr>
<td><strong>IF,ELSE,ENDIF</strong></td>
<td>汇编条件分支语句，跟C语言的类似</td>
</tr>
<tr>
<td><strong>END</strong></td>
<td>到达文件的末尾，文件结束</td>
</tr>
</tbody>
</table>
</div>
<p>关于其他更多的 ARM汇编指令，我们可以通过 MDK的索引搜索工具中搜索找到。打开索引搜索工具的方法：MDK-&gt;Help-&gt;uVision Help。</p>
<p><img src="/2024/04/04/STM32%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image/1701432149111.png" alt="1701432149111"></p>
<p>打开之后，我们以EQU为例，演示一下怎么使用，如下图。</p>
<p><img src="/2024/04/04/STM32%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image/1701432154455.png" alt="1701432154455"></p>
<p>搜索到的标题有很多，我们只需要看Assembler User Guide 这部分即可。</p>
<h2 id="4-3-Stack——栈"><a href="#4-3-Stack——栈" class="headerlink" title="4.3 Stack——栈"></a>4.3 Stack——栈</h2><p>注：类似RTT的嵌入式RTOS中提供了独立的内存管理实现方式（<code>rt_malloc()</code>、<code>rt_free()</code>），由于RTT是采用动态内存堆的内存管理方式，因此 <strong>不需要在启动文件中申请堆</strong> 。RT-Thread中的heap使用 <code>rt_system_heap_init</code>，把所有末使用的内存作为heap供 <code>rt_malloc</code>使用。</p>
<p><img src="/2024/04/04/STM32%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image/1701432160532.png" alt="1701432160532"></p>
<hr>
<blockquote>
<p>此处8字节对齐的原因可以参考这个链接：<a href="https://www.armbbs.cn/forum.php?mod=viewthread&amp;tid=109400&amp;highlight=%CE%DE%B7%A8%BB%D8%B1%DC%B5%C4%D7%D6%BD%DA%B6%D4%C6%EB%CE%CA%CC%E2">【烧脑技术贴】无法回避的字节对齐问题，从八个方向深入探讨(变量对齐，栈对齐，DMA对齐，结构体成对齐，Cache, RTOS双堆栈等) - STM32H7 - 硬汉嵌入式论坛 - Powered by Discuz! (armbbs.cn)</a></p>
<p><a href="https://www.armbbs.cn/forum.php?mod=viewthread&amp;tid=4916&amp;page=1">关于MDK中8字节对齐问题 - 编程语言 - 硬汉嵌入式论坛 - Powered by Discuz! (armbbs.cn)</a></p>
</blockquote>
<p>源码含义：开辟栈的大小为0x0000 0400(1KB)，段名为 <strong>STACK</strong> ，<strong>NOINIT</strong>表示不初始化，<strong>READWRITE</strong>表示可读可写，<strong>ALIGN=3</strong>表示按8（2^3）字节对齐 。</p>
<p> <strong>AREA</strong> ：告诉汇编器汇编一个新的代码段或者数据段，<strong>STACK</strong>表示段名，这个可以任意命名。</p>
<p> <strong>SPACE</strong> ：用于分配一定大小的内存空间，单位为字节，这里指定大小等于Stack_Size。</p>
<p><strong>__initial_sp</strong>紧挨着 SPACE放置，表示栈的结束地址，栈是从高往低生长，所以结束地址就是栈顶地址。</p>
<blockquote>
<p>栈的作用是用于局部变量，函数调用，函数形参等的开销，栈的大小不能超过内部SRAM的大小。如果编写的程序比较大，定义的局部变量很多，那么就需要在启动文件内修改栈的大小（Stack_Size）。</p>
<p>如果程序出现了莫名奇怪的错误，并进入了HardFault的时候，就要考虑下是不是栈不够大，溢出了。</p>
</blockquote>
<h2 id="4-4-Heap——堆"><a href="#4-4-Heap——堆" class="headerlink" title="4.4 Heap——堆"></a>4.4 Heap——堆</h2><p>源码含义：开辟堆的大小为0X00000200（512字节），名字为HEAP，NOINIT表示不初始化，READWRITE表示可读可写，ALIGN=3表示8（2^3）字节对齐。</p>
<p> <strong>PRESERVE8</strong> ：堆栈任何时候都得4字节对齐，在调用入口时需要8字节对齐，指定当前文件的堆栈按照8字节对齐。</p>
<p> <strong>THUMB</strong> ：表示后面指令兼容THUMB指令。THUBM是ARM以前的指令集，16bit，现在Cortex-M系列的都使用THUMB-2指令集，THUMB-2是32位的，兼容16位和32位的指令，是THUMB的超集。</p>
<p><strong>__heap_base</strong>表示堆的起始地址， <strong>__heap_limit</strong>表示堆的结束地址。堆是由低向高生长的，跟栈的生长方向相反。</p>
<blockquote>
<p>堆的作用是动态内存的分配，像 <code>malloc()</code>、<code>calloc()</code>和 <code>realloc()</code>函数申请的内存就在堆上面。堆中的内存一般由程序员分配和释放，若程序员不释放，程序结束时可能由操作系统回收，这个在STM32里面用的比较少，且一般是使用独立的而非系统提供的堆分配、释放函数，因此也可以考虑 <strong>将堆的大小设置为0</strong> ，以节省内存空间。</p>
</blockquote>
<h2 id="4-5-中断向量表"><a href="#4-5-中断向量表" class="headerlink" title="4.5 中断向量表"></a>4.5 中断向量表</h2><p> <strong>向量表作用：</strong> 当内核响应了一个发生的异常后，对应的异常服务例程(ESR)就会执行。为了决定 ESR的入口地址， 内核使用了向量表查表机制。这里使用一张向量表。向量表其实是一个WORD（32 位整数）数组，每个下标对应一种异常，该下标元素的值则是该 ESR 的入口地址。向量表在地址空间中的位置是可以设置的，通过 NVIC 中的一个重定位寄存器来指出向量表的地址。在复位后，该寄存器的值为 0。因此，在地址 0 （即 FLASH 地址 0） 处必须包含一张向量表，用于初始时的异常分配。要注意的是这里有个另类： 0 号类型并不是什么入口地址，而是给出了复位后 MSP 的初值。向量表从 FLASH 的 0 地址开始放置，以 4 个字节为一个单位，地址 0 存放的是栈顶地址， 0X04 存放的是复位程序的地址，以此类推。从代码上看，向量表中存放的都是中断服务函数的函数名，而我们也知道 C 语言中的函数名就是一个地址。</p>
<blockquote>
<p><strong>用人话说：</strong> 内核在异常时会访问这个表地址，并根据异常类型查表，按表跳转到异常处理函数执行。</p>
</blockquote>
<p>首先是，创建向量表空间。</p>
<p>源码含义：定义一个数据段，名字为RESET，READONLY表示可读。</p>
<p> <strong>EXPORT</strong> ：声明一个标号可被外部的文件使用，使标号具有全局属性。如果是IAR编译器，则使用的是GLOBAL这个指令。此处，声明<strong>Vectors、</strong>Vectors_End和__Vectors_Size这三个标号具有全局属性，可供外部的文件调用.</p>
<p><strong>我们通过检索map文件也可以检查到向量表的大小。</strong></p>
<p><img src="/2024/04/04/STM32%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image/1701432167951.png" alt="1701432167951"></p>
<p><strong>在RTT（GCC环境）下，我们也可以检索到类似内容。</strong></p>
<p><img src="/2024/04/04/STM32%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image/1701432173915.png" alt="1701432173915"></p>
<p><strong>可以发现向量表的位置对应的就是我们Code Flash的起始位置。</strong></p>
<p>当异常事件产生且被处理器内核接收后，对应的异常处理（ESR）就会执行。为了确定异常处理的起始地址，处理器利用了一种 <strong>向量表查表的机制</strong> 。向量表起始为一个WORD（32位整数）的数组，每一个下标对应一种异常，该下标元素的值则是该ESR的入口地址。向量表是可以重定位的，重定位由NVIC（Nested Vectored Interrupt Controllers）中名为向量偏移寄存器（VTOR）的可编程寄存器控制。复位后，VTOR默认为0，向量表则位于地址0x0000 0000处。</p>
<p><img src="[https://emoe-blog.oss-cn-hangzhou.aliyuncs.com/article_img/STM32%20%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F%E3%80%81%E5%90%AF%E5%8A%A8%E6%96%87%E4%BB%B6%E5%92%8C%E9%93%BE%E6%8E%A5%E8%84%9A%E6%9C%AC%E5%88%86%E6%9E%90_figures/image-20220926163905978.png](https://emoe-blog.oss-cn-hangzhou.aliyuncs.com/article_img/STM32%20%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F%E3%80%81%E5%90%AF%E5%8A%A8%E6%96%87%E4%BB%B6%E5%92%8C%E9%93%BE%E6%8E%A5%E8%84%9A%E6%9C%AC%E5%88%86%E6%9E%90_figures/image-20220926163905978.png" alt="image-20220926163905978"></p>
<p>因此，在地址0x0000 0000（即Flash地址0）处必须要包含一张向量表，用于初始时的异常分配。</p>
<blockquote>
<p>需要注意的是，地址0x0000 0000中的并不是程序入口地址，而是复位后给出的MSP初值。</p>
</blockquote>
<hr>
<p>以下为汇编文件中保存的中断向量表。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__Vectors       DCD     __initial_sp                      ; Top of Stack                // 首地址为栈顶地址</span><br><span class="line">                DCD     Reset_Handler                     ; Reset Handler               // 次地址为中断服务函数的地址</span><br><span class="line">                DCD     NMI_Handler                       ; NMI Handler</span><br><span class="line">                DCD     HardFault_Handler                 ; Hard Fault Handler</span><br><span class="line">                DCD     MemManage_Handler                 ; MPU Fault Handler</span><br><span class="line">                DCD     BusFault_Handler                  ; Bus Fault Handler</span><br><span class="line">                DCD     UsageFault_Handler                ; Usage Fault Handler</span><br><span class="line">                DCD     0                                 ; Reserved</span><br><span class="line">                DCD     0                                 ; Reserved</span><br><span class="line">                DCD     0                                 ; Reserved</span><br><span class="line">                DCD     0                                 ; Reserved</span><br><span class="line">                DCD     SVC_Handler                       ; SVCall Handler</span><br><span class="line">                DCD     DebugMon_Handler                  ; Debug Monitor Handler</span><br><span class="line">                DCD     0                                 ; Reserved</span><br><span class="line">                DCD     PendSV_Handler                    ; PendSV Handler</span><br><span class="line">                DCD     SysTick_Handler                   ; SysTick Handler</span><br><span class="line"></span><br><span class="line">                ; External Interrupts</span><br><span class="line">                DCD     WWDG_IRQHandler                   ; Window WatchDog interrupt ( wwdg1_it)</span><br><span class="line"></span><br><span class="line">                ...</span><br><span class="line"></span><br><span class="line">                DCD     CRS_IRQHandler                    ; Clock Recovery Global Interrupt                           </span><br><span class="line">                DCD     ECC_IRQHandler                    ; ECC diagnostic Global Interrupt                                      </span><br><span class="line">                DCD     SAI4_IRQHandler                   ; SAI4 global interrupt                                        </span><br><span class="line">                DCD     0                                 ; Reserved                         </span><br><span class="line">                DCD     0                                 ; Reserved                            </span><br><span class="line">                DCD     WAKEUP_PIN_IRQHandler             ; Interrupt for all 6 wake-up pins </span><br><span class="line"></span><br><span class="line">__Vectors_End</span><br><span class="line"></span><br><span class="line">__Vectors_Size  EQU  __Vectors_End - __Vectors</span><br><span class="line">                // 中断向量表大小</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>__Vectors</strong>为向量表起始地址，<strong>__Vectors_End</strong>为向量表结束地址，两个相减即可算出向量表大小， <strong><strong>Vectors <em>Size = \</em> _Vectors_End - </strong>Vectors</strong> 。</p>
<p> <strong>DCD</strong> ：分配一个或者多个以字（4字节）为单位的内存，以4字节对齐，并要求初始化这些内存。每行<strong>DCD</strong>都会生成一个4字节的二进制代码，中断向量表中存放的实际上只是中断服务程序的入口地址。也即使用<strong>DCD</strong>分配一堆内存，并以异常（中断事件）的入口地址初始化它们。当异常（中断事件）发生时，CPU的中断系统将会将相应的入口地址赋值给PC程序计数器，之后开始执行中断服务程序。</p>
<blockquote>
<p>向量表从FLASH的0地址开始放置，以4个字节为一个单位， <strong>地址0x0存放的是栈顶地址，0x4存放的是复位程序的地址</strong> ，以此类推。从代码上看，向量表中存放的都是中断服务函数的函数名，可我们知道C语言中的函数名就是一个地址。</p>
<p>上面的这段代码是 <strong>建立中断向量表</strong> ，<strong>中断向量表定位在代码段</strong>的最前面。 <strong>具体的物理地址由链接器的配置参数决定</strong> 。如果程序在 Flash 运行，则中断向量表的起始地址是 0x08000000（IROM1 的地址）。以MDK为例，就是如下配置选项：</p>
</blockquote>
<p><img src="/2024/04/04/STM32%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image/1701432187198.png" alt="1701432187198"></p>
<h2 id="4-6-复位中断服务程序"><a href="#4-6-复位中断服务程序" class="headerlink" title="4.6 复位中断服务程序"></a>4.6 复位中断服务程序</h2><p>在取出MSP后，PC指针寄存器指向 <code>Reset_Handler</code>，并调用以下程序。</p>
<blockquote>
<p>在GCC编译器下，语法结构会发生变化，如果是RTOS的话，也不一定是通过 <code>__main()</code>来实现跳转（如RT-Thread下跳转到entry()），但整体上启动文件实现的功能大体上是这些。</p>
<p>此__main()函数由MDK封装，并调用堆栈初始化部分的函数。</p>
<p>需要注意的是stm32f103的 <code>SystemInit()</code>较为简单，但stm32h7系列的单片机的 <code>SystemInit()</code>很复杂，在讨论到stm32h7时再做讨论。</p>
</blockquote>
<p>源码含义：在 CODE区定义一个名为 .text的只读的代码段。</p>
<p> <strong>PROC、ENDP</strong> ：定义子程序，这一对伪指令把程序段分为若干个过程，使程序的结构加清晰。</p>
<p>复位子程序是复位后第一个被执行的程序，主要是调用 <code>SystemInit()</code>（标准库函数，在system_stm32f1xx.c中定义）配置系统时钟，这里(stm32f103)调用这个函数之后，单片机的系统时钟配被配置为72M，还有就是初始化FSMC/FMC总线上外挂的 SRAM(可选 )。然后在调用 C 库函数 <code>__main</code>，最终调用 <code>main</code> 函数去到 C 的世界。</p>
<p> <strong>EXPORT</strong> ：声明复位中断向量 Reset_Handler为全局属性，这样外部文件就可以调用此复位中断服务。</p>
<p> <strong>WEAK</strong> ：表示弱定义，如果外部文件优先定义了该标号则首先引用该标号，如果外部文件没有声明也不会出错。这里表示复位子程序可以由用户在其他文件重新实现（重定向），这里并不是唯一的。</p>
<p> <strong>IMPORT</strong> ：表示该标号来自外部文件，跟C语言中的EXTERN关键字类似。这里表示 <code>SystemInit</code>和 <code>__main</code>这两个函数均来自外部的文件。</p>
<p>LDR、 BLX、 BX 是内核的指令，可在《 CM3 权威指南 CnR2》第四章 -指令集里面查询到。</p>
<p> <strong>LDR</strong> ：表示从存储器中加载字到一个存储器中。</p>
<p> <strong>BLX</strong> ：表示跳转到由寄存器给出的地址，并根据寄存器的 LSE 确定处理器的状态，还要把跳转前的下条指令地址保存到 LR。</p>
<p> <strong>BX</strong> ：表示 跳转到由寄存器/标号给出的地址，不用返回。这里表示切换到 __main地址，最终调用 main函数，不返回，进入C的世界。</p>
<blockquote>
<p><code>__main()</code>是一个标准的C库函数，主要作用是初始化用户堆栈，并在函数的最后调用 <code>main</code>函数去到C的世界。</p>
<p>关于 <code>__main()</code>的反汇编可以参考这些链接：<a href="https://www.cnblogs.com/yucloud/p/stm32_SystemInit_to_main.html">STM32_从SystemInit、__main到main() 已修正 - 蓝天上的云℡ - 博客园 (cnblogs.com)</a></p>
<p><a href="https://blog.csdn.net/hgsdfghdfsd/article/details/103812484">STM32启动过程详解_Dream_Chaser2015的博客-CSDN博客_rt_lib_init</a></p>
<p><a href="https://gcc.gnu.org/onlinedocs/gccint/Initialization.html">Initialization (GNU Compiler Collection (GCC) Internals)</a></p>
</blockquote>
<p> <strong>根据这篇链接里的文章，我们可以看到 <code>__main()</code>是一个标准的C库函数，<code>__main()</code>主要实现的功能有复制代码和数据，初始化 <code>RW</code>段（复制已初始化的数据）、初始化 <code>ZI</code>段（解压缩未初始化的数据），转入 <code>__rt_entry()</code>，初始化堆栈（<strong>user_initial_stackheap()，这个函数2.8节中提供）、初始化映像文件（`</strong>rt_lib_init()<code>）、以及转入</code>main()`。（这些我们都可以对应着在GCC版本中找到）</strong> 这也就是为什么我们写的程序都有一个 <code>main</code>函数的原因。因为这是由C/C++标准实时库所规定的——并且不能更改，因为C/C++标准实时库并不对外界开放源代码。在进入了 <code>main</code>函数后，我们就进入了C的世界，可以开始运行我们编写的应用程序。</p>
<p><img src="/2024/04/04/STM32%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image/1701432262861.png" alt="1701432262861"></p>
<p><img src="/2024/04/04/STM32%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image/1701432270090.png" alt="1701432270090"></p>
<h2 id="4-7-中断服务程序"><a href="#4-7-中断服务程序" class="headerlink" title="4.7 中断服务程序"></a>4.7 中断服务程序</h2><p>在启动文件中，已经帮我们写好了所有中断的中断服务函数，但跟用户写在应用程序中的中断服务函数不同，这些函数都是空的（都被 <code>WEAK</code>声明为弱定义函数，如果外部文件声明了一个标号，则优先使用外部文件定义的标号，如果外部文件没有定义也不会出错。），也即真正的中断复位服务程序 <strong>需要我们在外部的C文件里面重新实现，这里只是提前占了一个位置</strong> （都是声明为弱定义，所以真正的中断服务函数需要我们在外部实现），一般都留在stm32xxx_it.c中实现 <strong>重定向</strong> 。</p>
<p>如果我们在使用某个外设的时候，开启了某个中断，但是又 <strong>忘记编写配套的中断服务程序或者函数名写错</strong> ，那当中断来临的时，程序就会跳转到启动文件预先写好的空的中断服务程序中，并且在这个空函数中无线循环，即程序就死在这里。（原因是B指令的作用是跳转到一个标号，这里跳转到一个‘.’，表示无限循环。）</p>
<p>这里的系统异常中断部分是内核的，外部中断部分是外设的。</p>
<p><code>B .</code>所代表的意思为跳转到当前位置，也即当系统报了NMI_Handler、HardFault_Handler等异常时，若该中断函数未定义，则系统会卡死在相应中断函数内。</p>
<h2 id="4-8-用户堆栈初始化"><a href="#4-8-用户堆栈初始化" class="headerlink" title="4.8 用户堆栈初始化"></a>4.8 用户堆栈初始化</h2><blockquote>
<p>参考文档：《Libraries and Floating Point Support Guide》</p>
<p><a href="https://blog.csdn.net/OnlyLove_/article/details/119837369">rt-thread源码分析篇四：堆栈分配机制_lqonlylove的博客-CSDN博客</a></p>
</blockquote>
<p>《Libraries and Floating Point Support Guide》文档中对堆栈描述如下：</p>
<p><img src="/2024/04/04/STM32%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image/1701432372345.png" alt="1701432372345"></p>
<p><strong>堆栈模型有2种：</strong><br><strong>1、单内存区域模型（堆栈共用一片空间）；</strong><br><strong>2、双内存区域模型（堆和栈都有独立空间）。</strong></p>
<p>源码含义：</p>
<ul>
<li>首先判断是否定义了 <code>__MICROLIB</code>（ <strong>MDK特有的内容，自带的微库，是缺省，重新定义了标准C库中的常用函数，减小调用了标准C库中 <code>printf</code>、<code>scanf</code>等函数的文件生成的代码大小，但执行速度会比标准C库慢，功能也比缺省C库少，MicroLIB没有源码，只有库</strong> ），如果定义了这个宏则赋予标号 <code>__initial_sp</code>（栈顶地址）、<code>__heap_base</code>（堆起始地址）、<code>__heap_limit</code>（堆结束地址）全局属性，可供外部文件调用。有关这个宏我们在KEIL里面配置，具体见图使用微库。</li>
</ul>
<blockquote>
<p>关于MicroLIB更多知识可以看官方介绍 <a href="http://www.keil.com/arm/microlib.asp">http://www.keil.com/arm/microlib.asp</a> 。另外注意microlib只有库，没有源文件。下图是标准库和微库生成代码的比较。</p>
</blockquote>
<p><img src="/2024/04/04/STM32%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image/1701432391986.png" alt="1701432391986"></p>
<ul>
<li>如果没有定义 <code>__MICROLIB</code>，则才用双区域堆栈模型，且声明标号 <code>__user_initial_stackheap</code>具有全局属性，堆栈的初始化由 C库函数 <code>__main</code>来完成。</li>
<li><p>接下来进行堆栈空间初始化，堆是从低到高生长，栈是从高到低生长，是两个互相独立的数据段，并且不能交叉使用：</p>
<ol>
<li><code>LDR R0, = Heap_Mem</code>：保存堆起始地址；</li>
<li><code>LDR R1, =(Stack_Mem + Stack_Size)</code>：保存栈大小；</li>
<li><code>LDR R2, = (Heap_Mem + Heap_Size)</code>：保存堆大小；</li>
<li><code>LDR R3, = Stack_Mem</code>：保存栈顶指针；</li>
<li><code>BX LR</code>：跳转到 LR标号给出的地址（<code>main</code>函数），不用返回；</li>
<li><code>END</code>表示 到达文件的末尾，文件结束。</li>
</ol>
<p><strong>IF,ELSE,ENDIF</strong> ：汇编的条件分支语句，跟C语言的if,else类似。</p>
<p><strong>IMPORT</strong> ：声明 <code>__use_two_region_memory</code>标号来自外部文件。<br><strong>EXPORT</strong> ：声明 <code>__user_initial_stackheap</code>具有全局属性，可被外部的文件使用。</p>
<p><strong>ALIGN</strong> ：表示对指令或者数据的存放地址进行对齐，一般需要跟一个立即数，缺省表示 4字节对齐。要注意的是，这个不是 ARM的指令，是编译器的。</p>
<p><strong>END</strong> ：文件结束 。</p>
</li>
</ul>
<p><img src="/2024/04/04/STM32%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image/1701432403086.png" alt="1701432403086"></p>
<p>最后，堆栈的初始化就由C库函数__rt_entry()来完成，这也解释了， <strong>为什么在启动文件中，堆栈命名在前面，但实际上先执行的却是MSP和复位向量指针</strong> 。</p>
<p>当然，我们也可以结合实际情况，不选中 <code>microlib</code>，编译后分析 <code>map</code>文件。</p>
<p><img src="/2024/04/04/STM32%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image/1701432451975.png" alt="1701432451975"></p>
<p>或者，选中 <code>microlib</code>，编译后分析 <code>map</code>文件。</p>
<p><img src="/2024/04/04/STM32%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image/1701432458642.png" alt="1701432458642"></p>
<h1 id="5-STM32链接脚本分析（基于MDK）"><a href="#5-STM32链接脚本分析（基于MDK）" class="headerlink" title="5 STM32链接脚本分析（基于MDK）"></a>5 STM32链接脚本分析（基于MDK）</h1><p>参考链接：DUI0377G_02_mdk_armlink_user_guide.pdf（可以在keil的帮助文档中找到，主要参考这个）</p>
<p><a href="https://blog.csdn.net/qq_23274715/article/details/103445958">sct文件编写与使用_theboynoName的博客-CSDN博客_keil sct文件解析</a></p>
<p><a href="https://developer.arm.com/documentation/100070/0611/scatter-file-syntax/load-region-descriptions">Arm 编译器 armlink 用户指南 6.11 版</a></p>
<p>MDK环境下的STM32的链接脚本文件，又被称为分散加载文件，是由Keil自定义的链接文件，就我们常见的分散加载文件 <code>.sct</code>，通常十分简洁。</p>
<p>在MDK中，我们可以使用魔术棒中的工具，来实现分散加载文件的快速配置。</p>
<p><img src="/2024/04/04/STM32%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image/1701432481051.png" alt="1701432481051"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">; *************************************************************</span><br><span class="line">; *** Scatter-Loading Description File generated by uVision ***</span><br><span class="line">; *************************************************************</span><br><span class="line"></span><br><span class="line">LR_IROM1 0x08000000 0x00020000  &#123;    ; load region size_region，定义一个加载域，域基地址为0x08000000，域大小为0x00020000，对应实际 Flash 的大小</span><br><span class="line">  ER_IROM1 0x08000000 0x00020000  &#123;  ; load address = execution address 定义一个运行域，第一个运行域的基地址必须和加载域的基地址相同</span><br><span class="line">   *.o (RESET, +First)</span><br><span class="line">   *(InRoot$$Sections)</span><br><span class="line">   .ANY (+RO)</span><br><span class="line">   .ANY (+XO)</span><br><span class="line">  &#125;</span><br><span class="line">  RW_IRAM1 0x24000000 0x00080000  &#123;  ; AXI SRAM 512K</span><br><span class="line">   .ANY (+RW +ZI)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>一个分散加载文件由一个或者多个加载域描述(<code>load regions description</code>)组成。每个加载域描述由一个或者多个执行域描述(<code>execution regions description</code>)组成。执行域中又包含很多个输入节描述(<code>Input section description</code>)，关系图如下：</p>
<p><img src="/2024/04/04/STM32%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image/1701432488419.png" alt="1701432488419"></p>
<p>上图中的 <code>.sct</code>文件包含两个加载域描述。每个加载域描述中又都包含两个执行域描述。每个执行域描述中包含一个输入节描述。</p>
<blockquote>
<p>为什么要加上描述两个字呢？</p>
<p>因为这些并非真正的输入节和执行域，可重定位的目标文件中的输入节经过分散加载文件的描述映射到可执行或可共享的目标文件中的输出段/加载域。</p>
</blockquote>
<p>分散加载的好处在于我们可以将变量和代码精确地存放在某个位置，特别是像STM32H7这种MCU，拥有多个RAM块，外置SDRAM空间，以及内部Flash和外置内存映射的QSPI Flash。 我们可以把时间关键代码放到 <code>ITCM</code>里面运行，而占用空间超大，又不需要快速执行的代码放到 <code>QSPI Flash</code>运行，都可以方便的配置。</p>
<blockquote>
<p>后续3.1~3.3节翻译自DUI0377G_02_mdk_armlink_user_guide.pdf。</p>
</blockquote>
<p>此外，以下很大的一部分是自己阅读文件并翻译的内容，实际意义不大，也不需要费心真的把这些看完，仅做了解的话，看硬汉giegie的视频就行：<a href="https://www.bilibili.com/video/BV1MR4y157XS/">第7期BSP驱动教程：MDK专题高级进阶，重要的分散加载使用，通过各种实战案例来学习_哔哩哔哩_bilibili</a></p>
<h2 id="5-1-基本概念"><a href="#5-1-基本概念" class="headerlink" title="5.1 基本概念"></a>5.1 基本概念</h2><p>以下，我们先对MDK的分散加载文件的基本概念做一定的介绍。</p>
<h3 id="5-1-1-ARM-ELF映像（image）的结构"><a href="#5-1-1-ARM-ELF映像（image）的结构" class="headerlink" title="5.1.1 ARM ELF映像（image）的结构"></a>5.1.1 ARM ELF映像（<code>image</code>）的结构</h3><p>一个ARM ELF映像包括节、域和段，每个链接阶段具有不同的映像视图。</p>
<p>一个映像文件的结构被定义为：</p>
<ol>
<li>组成映像的域和输出节的数量；</li>
<li>加载映像时，这些域和节在内存中的位置；</li>
<li>执行映像时，这些域和节在内存中的位置。</li>
</ol>
<h3 id="5-1-2-每个链接阶段的映像视图"><a href="#5-1-2-每个链接阶段的映像视图" class="headerlink" title="5.1.2 每个链接阶段的映像视图"></a>5.1.2 每个链接阶段的映像视图</h3><p>每个链接阶段具有不同的映像视图。</p>
<h4 id="5-1-2-1-ELF目标文件视图（链接输入）"><a href="#5-1-2-1-ELF目标文件视图（链接输入）" class="headerlink" title="5.1.2.1 ELF目标文件视图（链接输入）"></a>5.1.2.1 ELF目标文件视图（链接输入）</h4><p>ELF目标文件视图包括输入节。ELF目标文件可以是：</p>
<ol>
<li>一个包含适用于与其他目标文件链接以创建可执行或可共享目标文件的代码和数据的可重定位文件；</li>
<li>一个保存代码和数据的可共享的目标文件。</li>
</ol>
<h4 id="5-1-2-2-链接视图"><a href="#5-1-2-2-链接视图" class="headerlink" title="5.1.2.2 链接视图"></a>5.1.2.2 链接视图</h4><p>链接器有两个程序程序地址空间视图，当存在重叠的、位置无关的和可重定位的程序片段（代码或数据）时，这两个程序地址空间视图会变得不同：</p>
<ol>
<li>一个程序片段的加载地址是链接器期望外部代理（如程序加载器、动态链接器或调试器）从ELF文件复制片段的目标地址，这可能不是片段的地址；</li>
<li>一个程序片段的执行地址是链接器在参与程序执行时期望片段驻留的目标地址。</li>
</ol>
<p>如果一个片段是位置无关或可重定位的，它的执行地址可以在执行期间变化。</p>
<h4 id="5-1-2-3-ELF映像文件视图（链接输出）"><a href="#5-1-2-3-ELF映像文件视图（链接输出）" class="headerlink" title="5.1.2.3 ELF映像文件视图（链接输出）"></a>5.1.2.3 ELF映像文件视图（链接输出）</h4><p>ELF映像文件视图包括程序段和输出节：</p>
<ol>
<li>一个加载域对应于一个程序段；</li>
<li>一个执行域包括一个或多个下列的输出节：<ul>
<li>RO节（只读）；</li>
<li>RW节（可读写）；</li>
<li>XO节（可执行）；</li>
<li>ZI节（初始化为0）。</li>
</ul>
</li>
</ol>
<p>一个或多个执行域组成一个加载域。</p>
<p>当描述一个内存视图时：</p>
<ol>
<li>根域意味着拥有相同的加载和执行地址的域；</li>
<li>加载域等同于ELF的段。</li>
</ol>
<p>下列图片显示了每个链接阶段的视图之间的关系：</p>
<p><img src="/2024/04/04/STM32%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image/1701432568048.png" alt="1701432568048"></p>
<h3 id="5-1-3-输入节、输出节、域和程序段"><a href="#5-1-3-输入节、输出节、域和程序段" class="headerlink" title="5.1.3 输入节、输出节、域和程序段"></a>5.1.3 输入节、输出节、域和程序段</h3><p>一个目标或映像文件由输入节、输出节、域和程序段的层次结构构成。</p>
<h4 id="5-1-3-1-输入节"><a href="#5-1-3-1-输入节" class="headerlink" title="5.1.3.1 输入节"></a>5.1.3.1 输入节</h4><p>一个输入节是来自于一个输入目标文件的一个独立节。输入节包含代码、初始化数据或描述在执行映像前未初始化或必须设置为0的内存片段。这些属性由RO、RW、XO和ZI等属性表示。armlink（armlink的链接器）使用这些属性将输入节分组为更大的构建块，称为输出节和域。</p>
<h4 id="5-1-3-2-输出节"><a href="#5-1-3-2-输出节" class="headerlink" title="5.1.3.2 输出节"></a>5.1.3.2 输出节</h4><p>一个输出节是一组具有相同RO、RW、XO或ZI属性的输入节，并且由链接器连续放置在内存中。输出节具有与组成它的输入节相同的属性。在输出节中，根据节放置规则对输入节进行排序。</p>
<h4 id="5-1-3-3-域"><a href="#5-1-3-3-域" class="headerlink" title="5.1.3.3 域"></a>5.1.3.3 域</h4><p>一个域最多包含四个输出节，具体取决于内容和具有不同属性的节的数量。默认情况下，域的输出节根据属性进行排序。首先是XO属性的输出节，然后是RO属性的输出节，最后是RW属性的输出节和ZI属性的输出节。域通常会映射到物理存储设备上，例如ROM、RAM或外围设备上，可以使用分散加载更改输出节的顺序。</p>
<h4 id="5-1-3-4-程序段"><a href="#5-1-3-4-程序段" class="headerlink" title="5.1.3.4 程序段"></a>5.1.3.4 程序段</h4><p>一个程序段对应于一个加载域，并且包含执行域。 程序段包含文本和数据等信息。</p>
<h4 id="5-1-3-5-存在只执行节（execute-only-sections）的注意事项"><a href="#5-1-3-5-存在只执行节（execute-only-sections）的注意事项" class="headerlink" title="5.1.3.5 存在只执行节（execute-only sections）的注意事项"></a>5.1.3.5 存在只执行节（execute-only sections）的注意事项</h4><ol>
<li>可以在一个执行域中混合XO和非XO节，但输出结果是一个RO节；</li>
<li>如果输入文件具有一个或多个XO节，则链接器将生成单独的XO ELF段，在最后的映像中，除非使用分散加载文件或 <code>--xo-base</code>选项另有指定，否则XO段紧接在RO段之后。</li>
</ol>
<h3 id="5-1-4-映像的加载视图和执行视图"><a href="#5-1-4-映像的加载视图和执行视图" class="headerlink" title="5.1.4 映像的加载视图和执行视图"></a>5.1.4 映像的加载视图和执行视图</h3><p>映像域在加载时被放置到系统内存映射中。在执行中，内存中域的位置可能会改变。</p>
<p>在执行映像前，可能必须将映像的某些域移动到它们的执行地址，并创建ZI输出节。比如，初始化的RW数据可能需要从ROM的加载地址复制到RAM的执行地址。</p>
<p>映像的内存映射有以下几种不同的视图。</p>
<h4 id="5-1-4-1-加载视图"><a href="#5-1-4-1-加载视图" class="headerlink" title="5.1.4.1 加载视图"></a>5.1.4.1 加载视图</h4><p>根据映像加载到内存中时所处的地址，即映像执行开始前的位置，描述每个映像的域和节。</p>
<h4 id="5-1-4-2-执行视图"><a href="#5-1-4-2-执行视图" class="headerlink" title="5.1.4.2 执行视图"></a>5.1.4.2 执行视图</h4><p>根据映像执行期间所处的地址，描述每个映像的域和节。</p>
<hr>
<p>下面的图像展示了一个不含只执行节（execute-only sections）的映像的加载和执行视图。</p>
<p><img src="/2024/04/04/STM32%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image/1701432580601.png" alt="1701432580601"></p>
<p>下面的图像展示了一个含一个只执行节（execute-only sections）的映像的加载和执行视图：</p>
<p><img src="/2024/04/04/STM32%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image/1701432590737.png" alt="1701432590737"></p>
<p>下表比较了加载和执行视图：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>加载</th>
<th>描述</th>
<th>执行</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>加载地址</td>
<td>在包含节或域的映像开始执行前，将其加载到内存中的地址。``节或非根域的加载地址可以与其执行地址不同。</td>
<td>执行地址</td>
<td>节或域所在的地址，其中包含了该节或域的映像正在执行。</td>
</tr>
<tr>
<td>加载域</td>
<td>一个加载域描述了加载地址空间中连续的内存块的布局。</td>
<td>执行域</td>
<td>一个执行域描述了在执行地址空间中连续的内存块的布局。</td>
</tr>
</tbody>
</table>
</div>
<h3 id="5-1-5-映像入口点"><a href="#5-1-5-映像入口点" class="headerlink" title="5.1.5 映像入口点"></a>5.1.5 映像入口点</h3><p>映像中的入口点是被加载到PC指针寄存器中的位置，是程序执行开始的位置。尽管一个映像中可以有多个入口点，但在链接过程中，只可以指定一个。</p>
<p>并不是每一个ELF文件都必须有一个入口点，一个ELF文件中不允许存在多个入口点。</p>
<blockquote>
<p>对于嵌入式 Cortex-M 内核的程序，程序的执行是从复位向量所在的位置（地址）开始执行。复位向量会被加载到 PC 寄存器中，且复位向量的位置（地址）并不固定。 通常，复位向量指向 CMSIS 的 Reset_Handler 函数。</p>
</blockquote>
<h4 id="5-1-5-1-入口点类型"><a href="#5-1-5-1-入口点类型" class="headerlink" title="5.1.5.1 入口点类型"></a>5.1.5.1 入口点类型</h4><p>有两种不同类型的入口点。</p>
<p><strong>初始化入口点：</strong></p>
<p>镜像的初始入口点是存储在 ELF 头文件中的单个值。 对于那些需要由操作系统或引导加载程序加载到 RAM 中的程序，加载程序通过将控制转移到镜像中的初始入口点来启动镜像执行。</p>
<p>一个镜像只能有一个初始化入口点。初始入口点可以是，但并不必须是，ENTRY 指令设置的入口点之一。</p>
<p><strong>ENTRY 指令指定的入口点：</strong></p>
<p>可以为一个镜像从多个可能的入口点中选择一个入口点。每个镜像只能有一个入口点。</p>
<p>可以在汇编程序文件中使用 ENTRY 指令在目标中创建入口点。 在嵌入式系统中，该指令的典型用途是标记进入处理器异常向量（例如 RESET，IRQ 和 FIQ）的代码。</p>
<p>该指令使用 ENTRY 关键字标记输出代码部分，该关键字指示链接器在执行未使用的部分消除时不删除该部分。</p>
<p>对于 C/C++ 程序，C 库 中的 __main() 函数就是入口点。</p>
<p>如果加载程序要使用一个嵌入式映像，则必须在标头中指定一个初始入口点。 使用 <code>--entry</code>命令行选项选择入口点。</p>
<h4 id="5-1-5-2-映像的初始入口点"><a href="#5-1-5-2-映像的初始入口点" class="headerlink" title="5.1.5.2 映像的初始入口点"></a>5.1.5.2 映像的初始入口点</h4><p>一个映像只能有一个初始入口点，否则会报 <code>L6305W</code>警告。</p>
<p>初始入口点必须满足以下条件：</p>
<ol>
<li>映像的入口点必须位于执行域中；</li>
<li>执行域必须不能覆盖另一个执行域，且必须是根执行域，即加载地址与执行地址相同。</li>
</ol>
<p>如果没有使用 <code>--entry</code>命令行选项来指定初始入口点，那么：</p>
<ol>
<li>如果输入目标值包含一个由 <code>ENTRY</code>指令定义的入口点，链接器使用该入口点作为映像的初始入口点；</li>
<li>在以下情况下，链接器生成一个不包含一个入口点的映像：<ul>
<li>使用 <code>ENTRY</code>指令来指定超过一个入口点；</li>
<li>没有使用 <code>ENTRY</code>指令指定入口点。</li>
</ul>
</li>
</ol>
<p>对于ROM为0的嵌入式应用使用 <code>--entry 0x0</code>命令，或对使用高矢量的处理器选择 <code>0xFFFF0000</code>。</p>
<h2 id="5-2-基本语法"><a href="#5-2-基本语法" class="headerlink" title="5.2 基本语法"></a>5.2 基本语法</h2><h3 id="5-2-1-BNF符号"><a href="#5-2-1-BNF符号" class="headerlink" title="5.2.1 BNF符号"></a>5.2.1 BNF符号</h3><p>分散加载描述语法使用了标准的BNF符号。</p>
<p>下表总结了用于描述分散加载描述的语法的巴科斯范式（Backus-Naur Form，BNF）符号。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>SYMBOL</th>
<th>DESCRIPTION</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&quot;</code></td>
<td>Quotation marks indicate that a character that is normally part of the BNF syntax is used as a literal character in the definition. The definition <code>B&quot;+&quot;C</code>, for example, can only be replaced by the pattern <code>B+C</code>. The definition <code>B+C</code> can be replaced by, for example, patterns <code>BC</code>, <code>BBC</code>, or <code>BBBC</code>.</td>
</tr>
<tr>
<td>A ::= B</td>
<td>Defines A as B. For example,`A::= B”+” \</td>
<td>C<code>means that A is equivalent to either</code>B+<code>or</code>C<code>. The</code>::=<code>notation defines a higher level construct in terms of its components. Each component might also have a</code>::=<code>definition that defines it in terms of even simpler components. For example,</code>A::= B<code>and</code>B::= C \</td>
<td>D<code>means that the definition A is equivalent to the patterns</code>C<code>or</code>D`.</td>
</tr>
<tr>
<td>[A]</td>
<td>Optional element A. For example,<code>A::= B[C]D</code> means that the definition <code>A</code> can be expanded into either <code>BD</code> or <code>BCD</code>.</td>
</tr>
<tr>
<td>A+</td>
<td>Element A can have one or more occurrences. For example,<code>A::= B+</code> means that the definition <code>A</code> can be expanded into <code>B,</code> <code>BB</code>, or <code>BBB</code>.</td>
</tr>
<tr>
<td>A*</td>
<td>Element A can have zero or more occurrences.</td>
</tr>
<tr>
<td>A</td>
<td>B</td>
</tr>
<tr>
<td>(A B)</td>
<td>Element A and B are grouped together. This is particularly useful when the</td>
</tr>
</tbody>
</table>
</div>
<h3 id="5-2-2-分散加载文件的语法"><a href="#5-2-2-分散加载文件的语法" class="headerlink" title="5.2.2 分散加载文件的语法"></a>5.2.2 分散加载文件的语法</h3><p>一个分散加载文件包括一个或多个加载域。每个加载域可以包含一个或多个执行域。</p>
<p>下列的图像显示了一个典型的分散加载文件的组成部分和组织结构：</p>
<p><img src="/2024/04/04/STM32%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image/1701432611257.png" alt="1701432611257"></p>
<h3 id="5-2-3-加载域描述"><a href="#5-2-3-加载域描述" class="headerlink" title="5.2.3 加载域描述"></a>5.2.3 加载域描述</h3><p><strong>加载域描述指定了其子执行域在内存区域内的放置方式。</strong></p>
<p><img src="/2024/04/04/STM32%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image/1701432619288.png" alt="1701432619288"></p>
<h4 id="5-2-3-1-加载域描述的语法"><a href="#5-2-3-1-加载域描述的语法" class="headerlink" title="5.2.3.1 加载域描述的语法"></a>5.2.3.1 加载域描述的语法</h4><p>加载域描述的组成部分允许独一无二地定义一个加载域和控制一个ELF文件的哪个部分放置在那个域中。</p>
<p>BNF下，加载域描述的语法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">load_region_description ::=</span><br><span class="line">    load_region_name (base_address | (&quot;+&quot; offset)) [attribute_list] [max_size]</span><br><span class="line">        &quot;&#123;&quot;</span><br><span class="line">        execution_region_description+</span><br><span class="line">        &quot;&#125;&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>一个加载域描述有以下的组成部分：</p>
<ol>
<li>名称（<code>load_region_name</code>）：命名加载域。可以使用带引号的名称，仅当使用任何域相关的链接器定义的符号时，名称才区分大小写；</li>
<li>基地址（<code>base_address</code>）：指定链接区域的对象的地址，<code>base_address</code>必须满足对齐要求；</li>
<li>偏移（<code>&quot;+&quot; offset</code>）：描述超过前一个加载域末尾 <code>offset</code>字节的一个基地址。<code>offset</code>的值必须按4字节对齐，如果是第一个加载域，<code>&quot;+&quot; offset</code>表示基址从0的 <code>offset</code>字节偏移处开始；<br>如果使用 <code>&quot;+&quot; offset</code>，则加载域可能会从先前的加载域继承某些属性。</li>
<li>属性列表（<code>attribute_list</code>）：指定加载域内内容的属性；</li>
<li>加载域大小（<code>max_size</code>，可选）：指定加载域的大小，这是在进行任何解压或零初始化之前的加载域大小，如果指定了可选的 <code>max_size</code>值，那么如果域分配了超过 <code>max_size</code>字节，<code>armlink</code>将生成错误；</li>
<li>执行域描述（<code>execution_region_description</code>）：指定执行域的名称，地址和内容，一个加载域包含一个或多个执行域描述。</li>
</ol>
<blockquote>
<p>BNF定义包含额外的行返回和空格，以提高可读性。分散加载描述中不需要它们，如果存在于分散文件中，则忽略它们。</p>
</blockquote>
<h3 id="5-2-4-执行域描述"><a href="#5-2-4-执行域描述" class="headerlink" title="5.2.4 执行域描述"></a>5.2.4 执行域描述</h3><p><strong>一个执行域描述指定了运行时放置映像部分的内存区域。</strong></p>
<p><img src="/2024/04/04/STM32%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image/1701432639809.png" alt="1701432639809"></p>
<h4 id="5-2-4-1-执行域描述的语法"><a href="#5-2-4-1-执行域描述的语法" class="headerlink" title="5.2.4.1 执行域描述的语法"></a>5.2.4.1 执行域描述的语法</h4><p>执行域描述的组成部分允许独一无二地标识每一个执行域及其在父加载域中的位置，并控制ELF文件的哪些部分放置在该执行域中。</p>
<p>BNF下，执行域描述的语法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">execution_region_description ::=</span><br><span class="line">    exec_region_name (base_address | &quot;+&quot; offset) [attribute_list] [max_size | length]</span><br><span class="line">        &quot;&#123;&quot;</span><br><span class="line">        input_section_description*</span><br><span class="line">        &quot;&#125;&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol>
<li>名称（<code>exec_region_name</code>）：命名执行域。可以使用带引号的名称，仅当使用任何域相关的链接器定义的符号时，名称才区分大小写；</li>
<li>基地址（<code>base_address</code>）：指定链接区域的对象的地址，<code>base_address</code>必须满足对齐要求；</li>
</ol>
<blockquote>
<p>在执行域上使用 <code>ALIGN</code>，使加载域和执行域一同对齐。</p>
</blockquote>
<ol>
<li>偏移（<code>&quot;+&quot; offset</code>）：描述超过前一个执行域末尾 <code>offset</code>字节的一个基地址。<code>offset</code>的值必须按4字节对齐，如果是第一个执行域，<code>&quot;+&quot; offset</code>表示基址从包含于的加载域的 <code>offset</code>字节偏移处开始；<br>如果使用 <code>&quot;+&quot; offset</code>，则执行域会从父加载域继承某些属性，或从统一加载域的前一个执行域继承某些属性。</li>
<li>属性列表（<code>attribute_list</code>）：指定执行域内内容的属性；</li>
<li>执行域大小（<code>max_size</code>，可选）：指定执行域的大小，对于标记为 <code>EMPTY</code>或 <code>FILL</code>的执行域，<code>max_size</code>值被解释为域的长度。否则，<code>max_size</code>值将被解释为执行域的最大大小；</li>
<li>长度（<code>length</code>）：只能与 <code>EMPTY</code>一起使用，以表示在内存中增长的堆栈。如果长度为负值，则将 <code>base_address</code>作为域的结束地址；</li>
<li>输入节描述（<code>input_section_description</code>）：指定输入节的内容。</li>
</ol>
<blockquote>
<p>BNF定义包含额外的行返回和空格，以提高可读性。分散加载描述中不需要它们，如果存在于分散文件中，则忽略它们。</p>
</blockquote>
<h3 id="5-2-5-输入节描述"><a href="#5-2-5-输入节描述" class="headerlink" title="5.2.5 输入节描述"></a>5.2.5 输入节描述</h3><p>输入节描述是标识输入节的模式。</p>
<p><img src="/2024/04/04/STM32%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image/1701432699712.png" alt="1701432699712"></p>
<h4 id="5-2-5-1-输入节描述的语法"><a href="#5-2-5-1-输入节描述的语法" class="headerlink" title="5.2.5.1 输入节描述的语法"></a>5.2.5.1 输入节描述的语法</h4><p>输入节描述指定将哪些输入节加载到父执行域中。</p>
<p>BNF下，输入节描述的语法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input_section_description ::=</span><br><span class="line">    module_select_pattern</span><br><span class="line">        [ &quot;(&quot; input_section_selector ( &quot;,&quot; input_section_selector )* &quot;)&quot; ]</span><br><span class="line">input_section_selector ::=</span><br><span class="line">        (&quot;+&quot; input_section_attr | input_section_pattern | input_symbol_pattern | section_properties)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol>
<li><p>模块匹配模式（<code>module_select_pattern</code>）：模式由字面文本构建。当程序块匹配模式与以下之一匹配时，输入节与程序块匹配模式匹配：</p>
<ul>
<li>包含该节的目标文件的名称；</li>
<li>库成员的名称（不带前导路径名）；</li>
<li>从中提取节的库的全名（包括路径名），如果名称包含空格，需要使用通配符，例如，使用 <code>*libname.lib</code>匹配 <code>C:\lib dir\libname.lib</code>。</li>
</ul>
<p>通配符 <code>*</code>匹配0个或多个字符，<code>?</code>匹配任意单个字符。<br>匹配不区分大小写，即使在区分大小写文件命名的主机上也是如此。<br><code>*.o</code> 匹配任何目标文件，使用 <code>*</code> 匹配任何目标文件或库。<br>可以使用被引用的文件名，如 <code>&quot;file one.o&quot;</code>。<br>分散文件中不能有两个 <code>*</code> 模块选择器。但可以使用两个修改后的模块选择器，如 <code>*A</code>和 <code>*B</code>，并且，可以同时使用一个有 <code>*</code> 选择器的 <code>.ANY</code>选择器。<br><code>*</code> 模块选择器拥有比 <code>.ANY</code> 模块选择器更高的优先级。<br>如果文件中包含 <code>*</code> 模块选择器的部分被删除，<code>.ANY</code>模块选择器将激活。</p>
</li>
<li><p>输入节属性（<code>input_section_attr</code>）：与输入节属性匹配的属性选择器（attribute selector）。每个 <code>input_section_attr</code>后跟一个 <code>+</code>。 如果要指定与输入节名称匹配的模式，则名称前面必须有 <code>+</code>。选择器不区分大小写。可识别以下选择器：</p>
<ul>
<li>RO-CODE</li>
<li>RO-DATA</li>
<li>RO，用来同时选择RO-CODE和RO-DATA</li>
<li>RW-DATA</li>
<li>RW-CODE</li>
<li>RW，用来同时选择 RW-CODE 和 RW-DATA</li>
<li>XO</li>
<li>ZI</li>
<li>ENTRY，包含 <code>ENTRY</code>点的节</li>
</ul>
<p>可以识别以下同义词：</p>
<ul>
<li>CODE for RO-CODE</li>
<li>CONST for RO-DATA</li>
<li>TEXT for RO</li>
<li>DATA for RW</li>
<li>BSS for ZI</li>
</ul>
<p>可以识别以下伪属性：</p>
<ul>
<li>FIRST</li>
<li>LAST</li>
</ul>
<p>如果放置顺序很重要，请用 <code>FIRST</code>和 <code>LAST</code>标记执行区域中的第一节和最后一节。例如，如果特定的输入节必须是域中的首位，而包含校验和的输入部分则必须是末位。一个执行区域只能有一个 <code>FIRST</code>或一个 <code>LAST</code>属性，并且它必须跟在一个 <code>input_section_attr</code>后面。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*(section, +FIRST)           # This pattern is correct.</span><br><span class="line">*(+FIRST, section)           # This pattern is incorrect and produces an error message.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>输入节模式（<code>input_section_pattern</code>）：与输入节名称匹配的模式，不区分大小写。它是由字面文本构成的。通配符 <code>*</code>匹配0个或多个字符，以及 <code>?</code>匹配任何单个字符，可以使用带引号的输入节名称。</p>
<blockquote>
<p>如果使用不止一个的输入节模式，请确保不同的执行域中没有重复的模式以避免歧义错误。</p>
</blockquote>
</li>
<li><p>输入符号模式（<code>input_symbol_pattern</code>）：可以通过节定义的全局符号的名字来选择输入节，这允许用户从部分链接的对象中选择具有相同名称的各个节。<br><code>:gdef:</code>前缀区分全局符号模式和节模式。例如使用 <code>:gdef:mysym</code>来选择定义为 <code>mysym</code>的节。以下的例子中显示了一个分散加载文件，其中 <code>ExecReg1</code>包含定义全局符号 <code>mysym1</code>的节和包含全局符号 <code>myym2</code>的节：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LoadRegion 0x8000</span><br><span class="line">&#123;</span><br><span class="line">ExecReg1 +0</span><br><span class="line">&#123;   </span><br><span class="line">       *(:gdef:mysym1)</span><br><span class="line">       *(:gdef:mysym2)</span><br><span class="line">&#125;</span><br><span class="line">        ; rest of scatter-loading description</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以使用一个引号引起的全局符号模式。<code>:gdef:</code>前缀可以在引号内或引号外。</p>
<blockquote>
<p>如果使用不止一个输入符号模式（<code>input_symbol_pattern</code>），请确保不同的执行域中没有重复的模式以避免歧义错误。</p>
<p>输入节描述符的顺序不重要。</p>
</blockquote>
</li>
<li><p>节特性（<code>section_properties</code>）： 可以是 <code>+FIRST</code>，<code>+LAST</code> 和 <code>OVERALIGN value</code>。其中，OVERALIGN 中的值必须为 2 的正幂，并且必须大于或等于 4。</p>
</li>
</ol>
<blockquote>
<ul>
<li>只有匹配 <code>module_select_pattern</code>和至少一个 <code>input_section_attr</code>或 <code>input_section_pattern</code>的输入节会被包含于执行域中。如果省略（<code>+input_section_attr</code>）或（input_section_pattern），则默认值为 <code>+RO</code>。</li>
<li>不要依赖于编译器生成或ARM库代码库代码使用的的输入节名。例如，使用不同的编译器选项，这些选项可能会在编译之间发生变化。此外，编译器使用的节命名约定不能保证在发行版之间保持不变。</li>
<li>BNF定义包含额外的行返回和空格，以提高可读性。分散加载描述中不需要它们，如果存在于分散文件中，则忽略它们。</li>
</ul>
</blockquote>
<h2 id="5-3-分散加载功能"><a href="#5-3-分散加载功能" class="headerlink" title="5.3 分散加载功能"></a>5.3 分散加载功能</h2><h3 id="5-3-1-分散加载机制"><a href="#5-3-1-分散加载机制" class="headerlink" title="5.3.1 分散加载机制"></a>5.3.1 分散加载机制</h3><p>分散加载机制允许用户使用文本文件中的描述指定映像到链接器的内存映射。</p>
<h4 id="5-3-1-1-分散加载概述"><a href="#5-3-1-1-分散加载概述" class="headerlink" title="5.3.1.1 分散加载概述"></a>5.3.1.1 分散加载概述</h4><p>分散加载使用户可以完全控制映像组成部分的分组和放置。</p>
<p>可以使用分散加载来创建简单的映像，但通常只用于具有复杂内存映射的映像。也就是说，在加载和执行时，多个内存区域分散在内存映射中。</p>
<p>映像内存映射由域和输出节组成，内存映射的每个域具有不同的加载和执行地址。</p>
<p>为了构建一个映像的内存映射，链接器必须有：</p>
<ol>
<li>描述输入节如何分组成输出节和域的分组信息；</li>
<li>描述域在内存映射中的地址的位置信息。</li>
</ol>
<p>当链接器创建一个使用分散加载文件的映像，它会创建一些域相关的符号。只有当用户代码引用它们时，链接器才会创建这些特殊符号。</p>
<h4 id="5-3-1-2-何时使用分散加载"><a href="#5-3-1-2-何时使用分散加载" class="headerlink" title="5.3.1.2 何时使用分散加载"></a>5.3.1.2 何时使用分散加载</h4><p>实现嵌入式系统通常需要分散加载，因为这些系统需要使用ROM、RAM和内存映射的外围设备。</p>
<p>需要分散加载或使用分散加载非常有用的情况：</p>
<ol>
<li>复杂的内存映射：必须放入许多不同内存区域的代码和数据，需要详细说明将这些部分放在内存空间中的哪些位置。</li>
<li>不同类型的内存：许多系统包含各种物理存储设备，如FLASH、ROM、SDRAM和快速SRAM。分散加载描述可以将代码和数据与最合适的内存类型匹配。例如，中断代码可以放入快速SRAM以提高中断响应时间，但不经常使用的配置信息可以被放入较慢的闪存中。</li>
<li>内存映射类型的外设：分散加载描述可以将一个数据节放置在内存映射的精确地址，以便可以访问内存映射的外围设备。</li>
<li>固定位置的函数：即使周围的应用程序已被修改和重新编译，函数也可以放在内存中的统一位置。这对于跳转表的实现非常有用。</li>
<li>使用符号标识堆和堆栈：链接应用程序时，可以为堆和堆栈位置定义符号。</li>
</ol>
<h3 id="5-3-2-根执行域"><a href="#5-3-2-根执行域" class="headerlink" title="5.3.2 根执行域"></a>5.3.2 根执行域</h3><p>根域是一个有相同的加载和执行地址的域。</p>
<h4 id="5-3-2-1-初始化入口点"><a href="#5-3-2-1-初始化入口点" class="headerlink" title="5.3.2.1 初始化入口点"></a>5.3.2.1 初始化入口点</h4><p>映像的初始化入口点必须是一个根域。</p>
<p>如果初始化入口点不是根域，链接会失败，链接器会给出错误信息。</p>
<p>以下就是一个根域的例子。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LR_1 0x040000           ; load region starts at 0x40000</span><br><span class="line">&#123;                       ; start of execution region descriptions</span><br><span class="line">    ER_RO 0x040000      ; load address = execution address</span><br><span class="line">    &#123;</span><br><span class="line">        * (+RO)         ; all RO sections (must include section with</span><br><span class="line">                        ; initial entry point)</span><br><span class="line">    &#125;</span><br><span class="line">    …                   ; rest of scatter-loading description</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="5-3-2-2-ABSOLUTE属性"><a href="#5-3-2-2-ABSOLUTE属性" class="headerlink" title="5.3.2.2 ABSOLUTE属性"></a>5.3.2.2 <code>ABSOLUTE</code>属性</h4><p>可以使用 <code>ABSOLUTE</code>属性指定根执行域。</p>
<p>将 <code>ABSOLUTE</code>指定为执行域的属性，可以显式指定，也可以允许其默认，并将相同的地址用于第一个执行域和封闭的加载域。</p>
<p>要使执行域地址与加载域地址相同，请执行以下任一操作：</p>
<ol>
<li>为执行域的基址和加载域的基地址指定相同的数值；</li>
<li>为加载域中的第一个执行域指定 <code>+0</code>偏移。</li>
</ol>
<p>如果为加载域中的所有后续执行域指定了零（<code>+0</code>）的偏移，则不在包含 <code>ZI</code>的执行域之后的所有执行域也是根域。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LR_1 0x040000       ; load region starts at 0x40000</span><br><span class="line">&#123;                   ; start of execution region descriptions</span><br><span class="line">    ER_RO 0x040000  ; load address = execution address</span><br><span class="line">    &#123;</span><br><span class="line">        * (+RO)     ; all RO sections (must include section with</span><br><span class="line">                    ; initial entry point)</span><br><span class="line">    &#125;</span><br><span class="line">    …               ; rest of scatter-loading description</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="5-3-2-3-FIXED属性"><a href="#5-3-2-3-FIXED属性" class="headerlink" title="5.3.2.3 FIXED属性"></a>5.3.2.3 <code>FIXED</code>属性</h4><p>可以使用分散加载文件中执行域的FIXED属性来创建在固定地址加载和执行的根域。</p>
<p>使用 <code>FIXED</code>执行域属性确保特定域的加载地址和执行地址相同，可以使用 <code>FIXED</code>属性将任何执行域放置在ROM中的特定地址。<br>例如，以下内存映射显示了固定的执行域：</p>
<p><img src="/2024/04/04/STM32%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image/1701432722326.png" alt="1701432722326"></p>
<p>以下示例显示了相应的分散加载描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LR_1 0x040000               ; load region starts at 0x40000</span><br><span class="line">    &#123;                       ; start of execution region descriptions</span><br><span class="line">    ER_RO 0x040000          ; load address = execution address</span><br><span class="line">    &#123;</span><br><span class="line">        * (+RO)             ; RO sections other than those in init.o</span><br><span class="line">    &#125;</span><br><span class="line">    ER_INIT 0x080000 FIXED  ; load address and execution address of this</span><br><span class="line">                            ; execution region are fixed at 0x80000</span><br><span class="line">    &#123;</span><br><span class="line">        init.o(+RO)         ; all RO sections from init.o</span><br><span class="line">    &#125;</span><br><span class="line">    …                       ; rest of scatter-loading description</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以使用它将函数或数据块（如常量表或校验和）放置在ROM中的固定地址，以便通过指针轻松访问。<br>例如，如果指定将一些初始化代码放在ROM的开头，将校验和放在ROM末尾，则某些内存内容可能未使用。使用 <code>*</code>或 <code>.ANY</code>模块选择器来填充初始化块结束和数据块开始之间的区域。<br>为了使代码更易于维护和调试，建议您在分散加载文件中使用最小数量的放置规范，并将函数和数据的详细放置留给链接器。</p>
<blockquote>
<p>在某些情况下，使用 <code>FIXED</code>和单个加载域是不合适的。指定固定位置的其他技术包括：</p>
<ul>
<li>如果加载器可以处理多个加载区域，请将RO代码或数据放置在其自己的加载域中。</li>
<li>如果不要求函数或数据位于ROM中的固定位置，请使用 <code>ABSOLUTE</code>而不是 <code>FIXED</code>。然后，加载器将数据从加载区域复制到RAM中的指定地址。<br>ABSOLUTE是默认属性。</li>
<li>要将数据结构放置在内存映射I/O的位置，请使用两个加载区域并指定 <code>UNINIT</code>。<code>UNINIT</code>确保内存位置未初始化为零。</li>
</ul>
</blockquote>
<h3 id="5-3-3-使用-ANY模块选择器放置未分配的部分"><a href="#5-3-3-使用-ANY模块选择器放置未分配的部分" class="headerlink" title="5.3.3 使用 .ANY模块选择器放置未分配的部分"></a>5.3.3 使用 <code>.ANY</code>模块选择器放置未分配的部分</h3><p>链接器试图将输入节放入特定的执行区域。对于任何无法解析的输入节，如果这些部分的位置不重要，可以在分散文件中使用 <code>.ANY</code>模块选择器。<br>在大多数情况下，使用单个 <code>.ANY</code>选择器等同于使用 <code>*</code>模块选择器。但是，与 <code>*</code>不同，您可以在多个执行域中指定 <code>.ANY</code>。</p>
<h4 id="5-3-3-1-使用多个-ANY模块选择器时的放置规则"><a href="#5-3-3-1-使用多个-ANY模块选择器时的放置规则" class="headerlink" title="5.3.3.1 使用多个 .ANY模块选择器时的放置规则"></a>5.3.3.1 使用多个 <code>.ANY</code>模块选择器时的放置规则</h4><p>当使用多个 <code>.ANY</code>选择器时，链接器具有放置节的默认规则。<br>当分散加载文件中存在多个 <code>.ANY</code>选择器时，链接器将按大小降序对节进行排序。然后，它获取大小最大的未分配节，并将该节分配给具有足够可用空间的任何特定执行域。（与 <code>*</code>模块选择器的主要不同，<code>*</code>不会做这种选择，<a href="https://www.bilibili.com/video/BV1MR4y157XS/">第7期BSP驱动教程：MDK专题高级进阶，重要的分散加载使用，通过各种实战案例来学习_哔哩哔哩_bilibili</a>）例如，<code>.ANY(.text)</code>被判断为比 <code>.ANY(+RO)</code>更具体。<br>如果多个执行区域同等特定，则将该节分配给剩余空间最多的执行域。<br>例如：</p>
<ol>
<li>如果您有两个同样特定的执行域，其中一个域的大小限制为0x2000，另一个域没有限制，那么所有节都将分配给第二个无界 <code>.ANY</code>域。</li>
<li>如果您有两个同样特定的执行域，其中一个区域的大小限制为0x2000，另一个区域为0x3000，则将要放置的第一个节分配给第二个 <code>.ANY</code>域大小限制为0x3000的区域，直到第二个 <code>.ANY</code>域的剩余大小将减小为0x2000。从此开始，在两个 <code>.ANY</code>执行区域之间交替分配节。</li>
</ol>
<p>可以使用执行域属性 <code>ANY_SIZE</code>指定用于未分配节的最大空间量。</p>
<h2 id="5-4-链接脚本分析"><a href="#5-4-链接脚本分析" class="headerlink" title="5.4 链接脚本分析"></a>5.4 链接脚本分析</h2><p>我们可以回到我们的链接脚本文件，并对其做一定的分析。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">; *************************************************************</span><br><span class="line">; *** Scatter-Loading Description File generated by uVision ***</span><br><span class="line">; *************************************************************</span><br><span class="line"></span><br><span class="line">LR_IROM1 0x08000000 0x00020000  &#123;    ; load region size_region，定义一个加载域，域基地址为0x08000000，域大小为0x00020000，对应实际 Flash 的大小</span><br><span class="line">  ER_IROM1 0x08000000 0x00020000  &#123;  ; load address = execution address 定义一个运行域，第一个运行域的基地址必须和加载域的基地址相同，这是一个根域</span><br><span class="line">   *.o (RESET, +First)      </span><br><span class="line">   *(InRoot$$Sections)</span><br><span class="line">   .ANY (+RO)</span><br><span class="line">   .ANY (+XO)</span><br><span class="line">  &#125;</span><br><span class="line">  RW_IRAM1 0x24000000 0x00080000  &#123;  ; AXI SRAM 512K</span><br><span class="line">   .ANY (+RW +ZI)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="/2024/04/04/STM32%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image/1701432735069.png" alt="1701432735069"></p>
<h3 id="5-4-1-加载域"><a href="#5-4-1-加载域" class="headerlink" title="5.4.1 加载域"></a>5.4.1 加载域</h3><p><code>LR_IROM1 0x08000000 0x00020000</code>定义了一个加载域，加载域的名称是 <code>LR_IROM1</code> ，域基地址为0x08000000，域大小为0x00020000，对应实际 Flash 的大小。</p>
<h3 id="5-4-2-执行域"><a href="#5-4-2-执行域" class="headerlink" title="5.4.2 执行域"></a>5.4.2 执行域</h3><p><code>ER_IROM1 0x08000000 0x00020000</code>定义一个执行域，第一个执行域的基地址必须和加载域的基地址相同，这是一个根域。</p>
<p><code>*.o</code>匹配所有以 <code>.o</code>结尾的文件，<code>(RESET, +First)</code>限制了必须含有 <code>RESET</code>节（以下内容），且将该节内容放在根域的起始地址内。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">; Vector Table Mapped to Address 0 at Reset</span><br><span class="line">                AREA    RESET, DATA, READONLY</span><br><span class="line">                EXPORT  __Vectors</span><br><span class="line">                EXPORT  __Vectors_End</span><br><span class="line">                EXPORT  __Vectors_Size</span><br><span class="line"></span><br><span class="line">// EXPORT：声明一个标号可被外部的文件使用，使标号具有全局属性。如果是IAR编译器，则使用的是GLOBAL这个指令，如果是GCC编译器，则使用的是.global。COPY</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>*(InRoot$$Sections)</code>匹配的是IDE自带的部分函数（MDK的一些库文件），比如 <code>__main.o</code>，<code>_scatter*.o</code>，<code>_dc*.o</code>，必须放置在根域中。</p>
<p><code>.ANY (+RO)</code>匹配所有具有RO只读属性的数据。</p>
<p><code>.ANY (+XO)</code>匹配所有XO属性的数据（只可执行的代码）的内容。关于XO节，可以参考<a href="https://www.armbbs.cn/forum.php?mod=viewthread&amp;tid=110924&amp;highlight=execute">MDK的Option选择中execute-only code区的作用 - 开发环境 - 硬汉嵌入式论坛 - Powered by Discuz! (armbbs.cn)</a></p>
<p><code>RW_IRAM1 0x24000000 0x00080000</code>定义一个执行域，这个域是一个存放RW和ZI数据的域，域基地址为0x24000000，域大小为0x00080000，对应实际 SRAM的大小。</p>
<p><code>.ANY (+RW +ZI)</code>匹配任意RW和ZI属性的数据。</p>
<h1 id="6-参考链接"><a href="#6-参考链接" class="headerlink" title="6 参考链接"></a>6 参考链接</h1><p><a href="https://blog.csdn.net/weixin_42328389/article/details/121855164">ARM 内核寄存器 和 基本汇编语言讲解_矜辰所致的博客-CSDN博客_arm汇编语言</a></p>
<p><a href="https://blog.csdn.net/weixin_42328389/article/details/121067474">FreeRTOS记录（三、RTOS任务调度原理解析_Systick、PendSV、SVC）_矜辰所致的博客-CSDN博客_freertos任务调度原理</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/109057983">ARM汇编语言入门 - 知乎 (zhihu.com)</a></p>
<p><a href="https://azeria-labs.com/writing-arm-assembly-part-1/">Writing ARM Assembly (Part 1) | Azeria Labs (azeria-labs.com)</a></p>
<p>MiniPro STM32H750 开发指南_V1.1.pdf</p>
<p><a href="https://www.bilibili.com/video/BV1AN411R7Be/">【蛋饼嵌入式】我提着鞋带拎自己？嵌入式芯片启动过程全解析，彻底理解bootloader_哔哩哔哩_bilibili</a></p>
<p><a href="https://www.st.com/content/ccc/resource/technical/document/application_note/b9/9b/16/3a/12/1e/40/0c/CD00167594.pdf/files/CD00167594.pdf/jcr:content/translations/en.CD00167594.pdf">AN2606 PDF</a>）</p>
<p><a href="https://www.armbbs.cn/forum.php?mod=viewthread&amp;tid=109321">【不是问题的问题】为什么STM32的Flash地址要设置到0x08000000 - STM32H7 - 硬汉嵌入式论坛 - Powered by Discuz! (armbbs.cn)</a></p>
<p><a href="https://developer.arm.com/documentation/ka001328/latest">Documentation – Arm Developer</a></p>
<p><a href="https://www.cnblogs.com/solo666/p/16639842.html">gcc链接脚本ld 实例讲解 - solonj - 博客园 (cnblogs.com)</a></p>
<p><a href="https://fmrt.gitbooks.io/riscv-spec-v2-cn/content/index.html">介紹 | RISC-V 指令集手册（卷一） (gitbooks.io)</a></p>
<p>AAPCS:《Procedure Call Standard for the ARM Architecture》</p>
<p>DUI0377G_02_mdk_armlink_user_guide.pdf</p>
<p><a href="https://www.armbbs.cn/forum.php?mod=viewthread&amp;tid=110924&amp;highlight=execute">MDK的Option选择中execute-only code区的作用 - 开发环境 - 硬汉嵌入式论坛 - Powered by Discuz! (armbbs.cn)</a></p>
<p><a href="https://developer.arm.com/documentation/ddi0489/f/">Arm Cortex-M7 Processor Technical Reference Manual r1p2</a></p>
<p><a href="https://developer.arm.com/documentation/ddi0403/ee">ARMv7-M Architecture Reference Manual</a></p>
]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>单片机</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32系统时钟</title>
    <url>/2024/04/04/STM32%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%92%9F/</url>
    <content><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><h2 id="1-1-什么是时钟"><a href="#1-1-什么是时钟" class="headerlink" title="1.1 什么是时钟"></a>1.1 什么是时钟</h2><p>时钟是单片机运行的基础，时钟信号推动单片机内各个部分执行相应的指令。时钟系统就是CPU的脉搏，决定cpu速率，像人的心跳一样 只有有了心跳，人才能做其他的事情，而单片机有了时钟，才能够运行执行指令，才能够做其他的处理 (点灯，串口，ADC)，时钟的重要性不言而喻。</p>
<h2 id="1-2-为什么-STM32-要有多个时钟源呢？"><a href="#1-2-为什么-STM32-要有多个时钟源呢？" class="headerlink" title="1.2 为什么 STM32 要有多个时钟源呢？"></a>1.2 为什么 STM32 要有多个时钟源呢？</h2><p>STM32本身十分复杂，外设非常多  但我们实际使用的时候只会用到有限的几个外设，使用任何外设都需要时钟才能启动，但并不是所有的外设都需要系统时钟那么高的频率，为了兼容不同速度的设备，有些高速，有些低速，如果都用高速时钟，势必造成浪费   并且，同一个电路，时钟越快功耗越快，同时抗电磁干扰能力也就越弱，所以较为复杂的MCU都是采用多时钟源的方法来解决这些问题。所以便有了STM32的时钟系统和时钟树</p>
<h2 id="1-3-总括"><a href="#1-3-总括" class="headerlink" title="1.3 总括"></a>1.3 总括</h2><ul>
<li>STM32时钟系统主要的目的就是<strong>给相对独立的外设模块提供时钟</strong>，也是<strong>为了降低整个芯片的耗能</strong>。</li>
<li>系统时钟，是处理器运行时间基准（每一条机器指令一个时钟周期）</li>
<li><strong>时钟是单片机运行的基础，时钟信号推动单片机内各个部分执行相应的指令</strong>。</li>
<li>一个单片机内提供多个不同的系统时钟，可以适应更多的应用场合。</li>
<li><strong>不同的功能模块会有不同的时钟上限，因此提供不同的时钟，也能在一个单片机内放置更多的功能模块。对不同模块的时钟增加开启和关闭功能，可以降低单片机的功耗</strong></li>
<li>STM32为了低功耗，他将所有的外设时钟都设置为disable(不使能)，用到什么外设，只要打开对应外设的时钟就可以， 其他的没用到的可以还是disable(不使能)，这样耗能就会减少。  这就是为什么<strong>不管你配置什么功能都需要先打开对应的时钟的原因</strong></li>
</ul>
<h1 id="二、STM32的时钟系统框图"><a href="#二、STM32的时钟系统框图" class="headerlink" title="二、STM32的时钟系统框图"></a>二、STM32的时钟系统框图</h1><p><img src="/2024/04/04/STM32%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%92%9F/image/1704527146976.png" alt="1704527146976"></p>
<p><img src="/2024/04/04/STM32%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%92%9F/image/1704529893529.png" alt="1704529893529"></p>
<p><img src="/2024/04/04/STM32%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%92%9F/image/1704530896581.png" alt="1704530896581"></p>
<p>可以看出系统时钟SYSCLK 的左边  系统时钟有很多种选择，而左边的部分就是设置系统时钟使用那个时钟源，系统时钟SYSCLK 的右边，则是系统时钟通过AHB预分频器，给相对应的外设设置相对应的时钟频率从左到右可以简单理解为  <strong>各个时钟源—-&gt;系统时钟来源的设置—-&gt;各个外设时钟的设置</strong></p>
<h1 id="三、时钟系统"><a href="#三、时钟系统" class="headerlink" title="三、时钟系统"></a>三、时钟系统</h1><h2 id="3-1-各个时钟源-左边的部分"><a href="#3-1-各个时钟源-左边的部分" class="headerlink" title="3.1 各个时钟源    (左边的部分)"></a>3.1 各个时钟源    (左边的部分)</h2><p>STM32 有4个独立时钟源:HSI、HSE、LSI、LSE。</p>
<p>①、HSI是高速内部时钟，RC振荡器，频率为8MHz，精度不高。<br>②、HSE是高速外部时钟，可接石英/陶瓷谐振器，或者接外部时钟源，频率范围为4MHz~16MHz。<br>③、LSI是低速内部时钟，RC振荡器，频率为40kHz，提供低功耗时钟。　<br>④、LSE是低速外部时钟，接频率为32.768kHz的石英晶体。</p>
<p>其中LSI是作为IWDGCLK(独立看门狗)时钟源和RTC时钟源 而独立使用而HSI高速内部时钟 HSE高速外部时钟 PLL锁相环时钟  这三个经过分频或者倍频 作为系统时钟来使用PLL为锁相环倍频输出，其时钟输入源可选择为HSI/2、HSE或者HSE/2。倍频可选择为2~16倍，但是其输出频率最大不得超过72MHz。  通过倍频之后作为系统时钟的时钟源。</p>
<blockquote>
<p><strong>举个例子：</strong>Keil编写程序是默认的时钟为72Mhz，其实是这么来的：外部晶振(HSE)提供的8MHz（与电路板上的晶振的相关）通过PLLXTPRE分频器后，进入PLLSRC选择开关，进而通过PLLMUL锁相环进行倍频（x9）后，为系统提供72MHz的系统时钟（SYSCLK）。之后是AHB预分频器对时钟信号进行分频，然后为低速外设提供时钟。或者内部RC振荡器(HSI) 为8MHz  /2 为4MHz 进入PLLSRC选择开关，通过PLLMUL锁相环进行倍频（x18）后 为72MHz</p>
<p><strong>PS:</strong>  网上有很多人说是5个时钟源，这种说法有点问题，学习之后就会发现PLL并不是自己产生的时钟源，而是通过其他三个时钟源倍频得到的时钟</p>
</blockquote>
<h2 id="3-2-系统时钟SYSCLK"><a href="#3-2-系统时钟SYSCLK" class="headerlink" title="3.2 系统时钟SYSCLK"></a>3.2 系统时钟SYSCLK</h2><p>系统时钟SYSCLK可来源于三个时钟源：</p>
<p>①、HSI振荡器时钟<br>②、HSE振荡器时钟<br>③、PLL时钟</p>
<p>最大为72Mhz</p>
<p><img src="/2024/04/04/STM32%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%92%9F/image/1704527483565.png" alt="1704527483565"></p>
<h2 id="3-3-USB时钟"><a href="#3-3-USB时钟" class="headerlink" title="3.3 USB时钟"></a>3.3 USB时钟</h2><p><img src="/2024/04/04/STM32%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%92%9F/image/1704527515393.png" alt="1704527515393"></p>
<p>STM32中有一个全速功能的USB模块，其串行接口引擎需要一个频率为48MHz的时钟源。该时钟源只能从PLL输出端获取（唯一的），，可以选择为1.5分频或者1分频，也就是，当需要使用USB模块时，PLL必须使能，并且时钟频率配置为48MHz或72MHz。</p>
<h2 id="3-4-把时钟信号输出到外部"><a href="#3-4-把时钟信号输出到外部" class="headerlink" title="3.4 把时钟信号输出到外部"></a>3.4 把时钟信号输出到外部</h2><p><img src="/2024/04/04/STM32%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%92%9F/image/1704527552500.png" alt="1704527552500"></p>
<p>STM32可以选择一个时钟信号输出到MCO脚(PA8)上，可以选择为PLL输出的2分频、HSI、HSE、或者系统时钟。可以把时钟信号输出供外部使用</p>
<h2 id="3-5-系统时钟通过AHB分频器给外设提供时钟-右边的部分-重点"><a href="#3-5-系统时钟通过AHB分频器给外设提供时钟-右边的部分-重点" class="headerlink" title="3.5 系统时钟通过AHB分频器给外设提供时钟(右边的部分)  重点"></a>3.5 系统时钟通过AHB分频器给外设提供时钟(右边的部分)  重点</h2><p><strong>从左到右可以简单理解为  系统时钟—-&gt;AHB分频器—-&gt;各个外设分频倍频器 —-&gt;   外设时钟的设置</strong></p>
<p>右边部分为：系统时钟SYSCLK通过AHB分频器分频后送给各模块使用，AHB分频器可选择1、2、4、8、16、64、128、256、512分频。其中AHB分频器输出的时钟送给5大模块使用：</p>
<p>　①内核总线：送给AHB总线、内核、内存和DMA使用的HCLK时钟。</p>
<p>　②Tick定时器：通过8分频后送给Cortex的系统定时器时钟。</p>
<p>　③I2S总线：直接送给Cortex的空闲运行时钟FCLK。</p>
<p>　④APB1外设：送给APB1分频器。APB1分频器可选择1、2、4、8、16分频，其输出一路供APB1外设使用(PCLK1，最大频率36MHz)，另一路送给通用定时器使用。该倍频器可选择1或者2倍频，时钟输出供定时器2-7使用。</p>
<p>　⑤APB2外设：送给APB2分频器。APB2分频器可选择1、2、4、8、16分频，其输出一路供APB2外设使用(PCLK2，最大频率72MHz)，另一路送给高级定时器。该倍频器可选择1或者2倍频，时钟输出供定时器1和定时器8使用。</p>
<p>另外，APB2分频器还有一路输出供ADC分频器使用，分频后送给ADC模块使用。ADC分频器可选择为2、4、6、8分频。</p>
<p>需要注意的是，如果 APB 预分频器分频系数是 1，则定时器时钟频率 (TIMxCLK) 为 PCLKx。否则，定时器时钟频率将为 APB 域的频率的两倍：<code>TIMxCLK = 2xPCLKx</code></p>
<h3 id="3-5-1-APB1和APB2的对应外设"><a href="#3-5-1-APB1和APB2的对应外设" class="headerlink" title="3.5.1 APB1和APB2的对应外设"></a>3.5.1 APB1和APB2的对应外设</h3><h4 id="F1系列"><a href="#F1系列" class="headerlink" title="F1系列"></a>F1系列</h4><p><img src="/2024/04/04/STM32%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%92%9F/image/1704527942686.png" alt="1704527942686"></p>
<p>APB1上面连接的是低速外设，包括电源接口、备份接口、CAN、USB、I2C1、I2C2、USART2、USART3、UART4、UART5、SPI2、SP3等；</p>
<p>而APB2上面连接的是高速外设，包括UART1、SPI1、Timer1、ADC1、ADC2、ADC3、所有的普通I/O口（PA-PE）、第二功能I/O（AFIO）口等。</p>
<h4 id="F4系列"><a href="#F4系列" class="headerlink" title="F4系列"></a>F4系列</h4><p><img src="/2024/04/04/STM32%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%92%9F/image/1704527973454.png" alt="1704527973454"></p>
<p>这个和F1系列类似，我们就举几个特殊的</p>
<p> <strong>APB2总线：</strong>高级定时器timer1, timer8以及通用定时器timer9, timer10, timer11   UTART1,USART6</p>
<p> <strong>APB1总线：</strong>通用定时器timer2-timer5，通用定时器timer12-timer14以及基本定时器timer6,timer7  UTART2-UTART5</p>
<p>F4系列的系统时钟频率最高能到168M</p>
<p><strong>具体  可以在 stm32f10x_rcc.h  和stm32f40x_rcc.h   中查看，或者通过 STM32参考手册搜索“系统架构”或者“系统结构”  查看外设挂在哪个时钟下</strong> </p>
<h2 id="3-6-时钟监视系统（CSS）"><a href="#3-6-时钟监视系统（CSS）" class="headerlink" title="3.6 时钟监视系统（CSS）"></a>3.6 时钟监视系统（CSS）</h2><p><img src="/2024/04/04/STM32%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%92%9F/image/1704529499885.png" alt="1704529499885"></p>
<p>STM32还提供了一个时钟监视系统（CSS），用于监视高速外部时钟（HSE）的工作状态。倘若HSE失效，会自动切换（高速内部时钟）HSI作为系统时钟的输入，保证系统的正常运行。</p>
<h1 id="四、时钟配置"><a href="#四、时钟配置" class="headerlink" title="四、时钟配置"></a>四、时钟配置</h1><h2 id="4-1-配置流程"><a href="#4-1-配置流程" class="headerlink" title="4.1 配置流程"></a>4.1 配置流程</h2><h4 id="①-在STM32单片机复位之后，首先进入-startup-程序："><a href="#①-在STM32单片机复位之后，首先进入-startup-程序：" class="headerlink" title="①. 在STM32单片机复位之后，首先进入 startup 程序："></a>①. 在STM32单片机复位之后，首先进入 <strong>startup</strong> 程序：</h4><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="comment">; Reset handler</span></span><br><span class="line"><span class="symbol">Reset_Handler</span>    <span class="meta">PROC</span></span><br><span class="line">                 <span class="meta">EXPORT</span>  Reset_Handler             [WEAK]</span><br><span class="line">        <span class="meta">IMPORT</span>  SystemInit</span><br><span class="line">        <span class="meta">IMPORT</span>  __main</span><br><span class="line"></span><br><span class="line">                 <span class="keyword">LDR</span>     <span class="built_in">R0</span>, <span class="symbol">=SystemInit</span></span><br><span class="line">                 <span class="keyword">BLX</span>     <span class="built_in">R0</span></span><br><span class="line">                 <span class="keyword">LDR</span>     <span class="built_in">R0</span>, <span class="symbol">=__main</span></span><br><span class="line">                 <span class="keyword">BX</span>      <span class="built_in">R0</span></span><br><span class="line">                 <span class="meta">ENDP</span></span><br></pre></td></tr></table></figure>
<p>可以看出，在进入main主程序之前，先触发了 <strong>SystemInit()</strong> 函数（打开相应的时钟晶振，分频选择），这样就可以保证不需要每次都把时钟配置程序写入main.c文件了；</p>
<p>同样，当你想要执行自定义时钟配置程序时也可以改动这个部分。</p>
<h4 id="②-SystemInit"><a href="#②-SystemInit" class="headerlink" title="②. SystemInit()"></a>②. SystemInit()</h4><p>该函数位于 <strong>system_stm32f4xx.c</strong> 文件中</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  Setup the microcontroller system</span></span><br><span class="line"><span class="comment">  *         Initialize the Embedded Flash Interface, the PLL and update the </span></span><br><span class="line"><span class="comment">  *         SystemFrequency variable.</span></span><br><span class="line"><span class="comment">  * @param  None</span></span><br><span class="line"><span class="comment">  * @retval None</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SystemInit</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">/* FPU settings ------------------------------------------------------------*/</span></span><br><span class="line">  <span class="meta">#<span class="keyword">if</span> (__FPU_PRESENT == 1) &amp;&amp; (__FPU_USED == 1)</span></span><br><span class="line">    SCB-&gt;CPACR |= ((<span class="number">3UL</span> &lt;&lt; <span class="number">10</span>*<span class="number">2</span>)|(<span class="number">3UL</span> &lt;&lt; <span class="number">11</span>*<span class="number">2</span>));  <span class="comment">/* set CP10 and CP11 Full Access */</span></span><br><span class="line">  <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  <span class="comment">/* Reset the RCC clock configuration to the default reset state ------------*/</span></span><br><span class="line">  <span class="comment">/* Set HSION bit */</span></span><br><span class="line">  RCC-&gt;CR |= (<span class="type">uint32_t</span>)<span class="number">0x00000001</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Reset CFGR register */</span></span><br><span class="line">  RCC-&gt;CFGR = <span class="number">0x00000000</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Reset HSEON, CSSON and PLLON bits */</span></span><br><span class="line">  RCC-&gt;CR &amp;= (<span class="type">uint32_t</span>)<span class="number">0xFEF6FFFF</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Reset PLLCFGR register */</span></span><br><span class="line">  RCC-&gt;PLLCFGR = <span class="number">0x24003010</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Reset HSEBYP bit */</span></span><br><span class="line">  RCC-&gt;CR &amp;= (<span class="type">uint32_t</span>)<span class="number">0xFFFBFFFF</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Disable all interrupts */</span></span><br><span class="line">  RCC-&gt;CIR = <span class="number">0x00000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined (DATA_IN_ExtSRAM) || defined (DATA_IN_ExtSDRAM)</span></span><br><span class="line">  <span class="built_in">SystemInit_ExtMemCtl</span>(); </span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */</span></span></span><br><span class="line">       </span><br><span class="line">  <span class="comment">/* Configure the System clock source, PLL Multiplier and Divider factors, </span></span><br><span class="line"><span class="comment">     AHB/APBx prescalers and Flash settings ----------------------------------*/</span></span><br><span class="line">  <span class="built_in">SetSysClock</span>();</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到，SystemInit()函数的作用就是使RCC_CR寄存器Bit0 置1，即开启 16MHz HSI 振荡器，复位其他的时钟，然后转到SetSysClock()函数中。<br>对于系统时钟，默认情况下就是SystemInit 函数的 SetSysClock() 函数中间判断的</p>
<h4 id="③-SetSysClock"><a href="#③-SetSysClock" class="headerlink" title="③. SetSysClock()"></a>③. SetSysClock()</h4><p>该函数位于 <strong>system_stm32f4xx.c</strong> 文件中</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">SetSysClock</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined (STM32F40_41xxx) || defined (STM32F427_437xx) || defined (STM32F429_439xx) || defined (STM32F401xx)</span></span><br><span class="line"><span class="comment">/******************************************************************************/</span></span><br><span class="line"><span class="comment">/*            PLL (clocked by HSE) used as System clock source                */</span></span><br><span class="line"><span class="comment">/******************************************************************************/</span></span><br><span class="line">  __IO <span class="type">uint32_t</span> StartUpCounter = <span class="number">0</span>, HSEStatus = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* Enable HSE */</span></span><br><span class="line">  RCC-&gt;CR |= ((<span class="type">uint32_t</span>)RCC_CR_HSEON);</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* Wait till HSE is ready and if Time out is reached exit */</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    HSEStatus = RCC-&gt;CR &amp; RCC_CR_HSERDY;</span><br><span class="line">    StartUpCounter++;</span><br><span class="line">  &#125; <span class="keyword">while</span>((HSEStatus == <span class="number">0</span>) &amp;&amp; (StartUpCounter != HSE_STARTUP_TIMEOUT));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ((RCC-&gt;CR &amp; RCC_CR_HSERDY) != RESET)</span><br><span class="line">  &#123;</span><br><span class="line">    HSEStatus = (<span class="type">uint32_t</span>)<span class="number">0x01</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    HSEStatus = (<span class="type">uint32_t</span>)<span class="number">0x00</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (HSEStatus == (<span class="type">uint32_t</span>)<span class="number">0x01</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/* Select regulator voltage output Scale 1 mode */</span></span><br><span class="line">    RCC-&gt;APB1ENR |= RCC_APB1ENR_PWREN;</span><br><span class="line">    PWR-&gt;CR |= PWR_CR_VOS;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* HCLK = SYSCLK / 1*/</span></span><br><span class="line">    RCC-&gt;CFGR |= RCC_CFGR_HPRE_DIV1;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined (STM32F40_41xxx) || defined (STM32F427_437xx) || defined (STM32F429_439xx)    </span></span><br><span class="line">    <span class="comment">/* PCLK2 = HCLK / 2*/</span></span><br><span class="line">    RCC-&gt;CFGR |= RCC_CFGR_PPRE2_DIV2;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/* PCLK1 = HCLK / 4*/</span></span><br><span class="line">    RCC-&gt;CFGR |= RCC_CFGR_PPRE1_DIV4;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* STM32F40_41xxx || STM32F427_437x || STM32F429_439xx */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined (STM32F401xx)</span></span><br><span class="line">    <span class="comment">/* PCLK2 = HCLK / 2*/</span></span><br><span class="line">    RCC-&gt;CFGR |= RCC_CFGR_PPRE2_DIV1;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/* PCLK1 = HCLK / 4*/</span></span><br><span class="line">    RCC-&gt;CFGR |= RCC_CFGR_PPRE1_DIV2;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* STM32F401xx */</span></span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">/* Configure the main PLL */</span></span><br><span class="line">    RCC-&gt;PLLCFGR = PLL_M | (PLL_N &lt;&lt; <span class="number">6</span>) | (((PLL_P &gt;&gt; <span class="number">1</span>) <span class="number">-1</span>) &lt;&lt; <span class="number">16</span>) |</span><br><span class="line">                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q &lt;&lt; <span class="number">24</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Enable the main PLL */</span></span><br><span class="line">    RCC-&gt;CR |= RCC_CR_PLLON;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Wait till the main PLL is ready */</span></span><br><span class="line">    <span class="keyword">while</span>((RCC-&gt;CR &amp; RCC_CR_PLLRDY) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined (STM32F427_437xx) || defined (STM32F429_439xx)</span></span><br><span class="line">    <span class="comment">/* Enable the Over-drive to extend the clock frequency to 180 Mhz */</span></span><br><span class="line">    PWR-&gt;CR |= PWR_CR_ODEN;</span><br><span class="line">    <span class="keyword">while</span>((PWR-&gt;CSR &amp; PWR_CSR_ODRDY) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    PWR-&gt;CR |= PWR_CR_ODSWEN;</span><br><span class="line">    <span class="keyword">while</span>((PWR-&gt;CSR &amp; PWR_CSR_ODSWRDY) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="comment">/* Configure Flash prefetch, Instruction cache, Data cache and wait state */</span></span><br><span class="line">    FLASH-&gt;ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* STM32F427_437x || STM32F429_439xx  */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined (STM32F40_41xxx)   </span></span><br><span class="line">    <span class="comment">/* Configure Flash prefetch, Instruction cache, Data cache and wait state */</span></span><br><span class="line">    FLASH-&gt;ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* STM32F40_41xxx  */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined (STM32F401xx)</span></span><br><span class="line">    <span class="comment">/* Configure Flash prefetch, Instruction cache, Data cache and wait state */</span></span><br><span class="line">    FLASH-&gt;ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* STM32F401xx */</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Select the main PLL as system clock source */</span></span><br><span class="line">    RCC-&gt;CFGR &amp;= (<span class="type">uint32_t</span>)((<span class="type">uint32_t</span>)~(RCC_CFGR_SW));</span><br><span class="line">    RCC-&gt;CFGR |= RCC_CFGR_SW_PLL;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Wait till the main PLL is used as system clock source */</span></span><br><span class="line">    <span class="keyword">while</span> ((RCC-&gt;CFGR &amp; (<span class="type">uint32_t</span>)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123; <span class="comment">/* If HSE fails to start-up, the application will have wrong clock</span></span><br><span class="line"><span class="comment">         configuration. User can add here some code to deal with this error */</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>不要被上面的长度吓到了，其实无非就是对RCC几个寄存器的赋值，里面注释很详细，对着寄存器功能表，可以很容易理解其意思！</p>
<p>主要有耐心去看，很容易就搞明白怎么回事了！</p>
<h2 id="4-2-配置寄存器（STMF4为例）"><a href="#4-2-配置寄存器（STMF4为例）" class="headerlink" title="4.2 配置寄存器（STMF4为例）"></a>4.2 配置寄存器（STMF4为例）</h2><p>STM32中，对时钟的配置，即是对  <strong>RCC</strong> （Reset Clocl Control，复位和时钟寄存器）的配置，时钟寄存器包含如下几个：</p>
<h4 id="4-2-1-时钟控制寄存器（RCC-CR）"><a href="#4-2-1-时钟控制寄存器（RCC-CR）" class="headerlink" title="4.2.1 时钟控制寄存器（RCC_CR）"></a>4.2.1 时钟控制寄存器（RCC_CR）</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">偏移地址：0x00</span></span><br><span class="line"><span class="string">复位值：0x0000</span> <span class="string">XX83，其中</span> <span class="string">X</span> <span class="string">未定义。</span></span><br><span class="line"><span class="string">访问：无等待周期，按字、半字和字节访问</span></span><br></pre></td></tr></table></figure>
<p><img src="/2024/04/04/STM32%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%92%9F/image/1704529210374.png" alt="1704529210374"></p>
<p><img src="/2024/04/04/STM32%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%92%9F/image/1704529234919.png" alt="1704529234919"></p>
<p><img src="/2024/04/04/STM32%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%92%9F/image/1704529283002.png" alt="1704529283002"></p>
<p><img src="/2024/04/04/STM32%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%92%9F/image/1704529293529.png" alt="1704529293529"></p>
<h4 id="4-3-2-RCC-时钟配置寄存器-RCC-CFGR"><a href="#4-3-2-RCC-时钟配置寄存器-RCC-CFGR" class="headerlink" title="4.3.2 RCC 时钟配置寄存器 (RCC_CFGR)"></a>4.3.2 RCC 时钟配置寄存器 (RCC_CFGR)</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">偏移地址：0x08</span></span><br><span class="line"><span class="string">复位值：0x0000</span> <span class="number">0000</span></span><br><span class="line"><span class="string">访问：0</span> <span class="string"></span> <span class="string">等待周期</span> <span class="string"></span> <span class="number">2</span><span class="string">，按字、半字和字节访问</span></span><br><span class="line"><span class="string">只有在时钟源切换期间进行访问时才会插入</span> <span class="number">1</span> <span class="string">或</span> <span class="number">2</span> <span class="string">个等待周期。</span></span><br></pre></td></tr></table></figure>
<p><img src="/2024/04/04/STM32%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%92%9F/image/1704529339090.png" alt="1704529339090"></p>
<p><img src="/2024/04/04/STM32%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%92%9F/image/1704529355941.png" alt="1704529355941"></p>
<p><img src="/2024/04/04/STM32%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%92%9F/image/1704529366930.png" alt="1704529366930"></p>
<p><img src="/2024/04/04/STM32%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%92%9F/image/1704529386175.png" alt="1704529386175"></p>
<p><img src="/2024/04/04/STM32%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%92%9F/image/1704529393757.png" alt="1704529393757"></p>
]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>单片机</tag>
      </tags>
  </entry>
  <entry>
    <title>文件系统</title>
    <url>/2024/04/04/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p><img src="/2024/04/04/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image/1698746511013.png" alt="1698746511013"><img src="/2024/04/04/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image/1698756153909.png" alt="1698756153909"></p>
<h1 id="一、文件系统的基本组成"><a href="#一、文件系统的基本组成" class="headerlink" title="一、文件系统的基本组成"></a>一、文件系统的基本组成</h1><p>文件系统是操作系统中负责管理持久数据的子系统，说简单点，就是负责把用户的文件存到磁盘硬件中，因为即使计算机断电了，磁盘里的数据并不会丢失，所以可以持久化的保存文件。</p>
<p>文件系统的基本数据单位是文件，它的目的是对磁盘上的文件进行组织管理，那组织的方式不同，就会形成不同的文件系统。</p>
<p>Linux 最经典的一句话是： <strong>「一切皆文件」</strong> ，不仅普通的文件和目录，就连块设备、管道、socket 等，也都是统一交给文件系统管理的。</p>
<p>Linux 文件系统会为每个文件分配两个数据结构：<strong>索引节点（index node）</strong> 和  <strong>目录项（directory entry）</strong> ，它们主要用来记录文件的元信息和目录层次结构。</p>
<ul>
<li>索引节点，也就是 <code>inode</code>，用来记录文件的元信息，比如 inode 编号、文件大小、访问权限、创建时间、修改时间、数据在磁盘的位置等等。索引节点是文件的唯一标识，它们之间一一对应，也同样都会被存储在硬盘中，所以索引节点同样占用磁盘空间。</li>
<li>目录项，也就是 <code>dentry</code>，用来记录文件的名字、索引节点指针以及与其他目录项的层级关联关系。多个目录项关联起来，就会形成目录结构，但它与索引节点不同的是，目录项是由内核维护的一个数据结构，不存放于磁盘，而是缓存在内存。</li>
</ul>
<p>由于索引节点唯一标识一个文件，而目录项记录着文件的名，所以目录项和索引节点的关系是多对一，也就是说，一个文件可以有多个别字。比如，硬链接的实现就是多个目录项中的索引节点指向同一个文件。</p>
<p>注意，目录也是文件，也是用索引节点唯一标识，和普通文件不同的是，普通文件在磁盘里面保存的是文件数据，而目录文件在磁盘里面保存子目录或文件。</p>
<blockquote>
<p><strong>目录项和目录是一个东西吗？</strong></p>
<p>虽然名字很相近，但是它们不是一个东西，目录是个文件，持久化存储在磁盘，而目录项是内核一个数据结构，缓存在内存。</p>
<p>如果查询目录频繁从磁盘读，效率会很低，所以内核会把已经读过的目录用目录项这个数据结构缓存在内存，下次再次读到相同的目录时，只需从内存读就可以，大大提高了文件系统的效率。</p>
<p>注意，目录项这个数据结构不只是表示目录，也是可以表示文件的。</p>
<p><strong>那文件数据是如何存储在磁盘的呢？</strong></p>
<p>磁盘读写的最小单位是<strong>扇区</strong>，扇区的大小只有 512B 大小，很明显，如果每次读写都以这么小为单位，那这读写的效率会非常低。</p>
<p>所以，文件系统把多个扇区组成了一个<strong>逻辑块</strong>，每次读写的最小单位就是逻辑块（数据块），Linux 中的逻辑块大小为 4KB，也就是一次性读写 8 个扇区，这将大大提高了磁盘的读写的效率。</p>
</blockquote>
<p>以上就是索引节点、目录项以及文件数据的关系，下面这个图就很好的展示了它们之间的关系：</p>
<p><img src="/2024/04/04/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image/1698756258672.png" alt="1698756258672"></p>
<p>索引节点是存储在硬盘上的数据，那么为了加速文件的访问，通常会把索引节点加载到内存中。</p>
<p>另外，磁盘进行格式化的时候，会被分成三个存储区域，分别是 <strong>超级块</strong> 、<strong>索引节点区</strong>和 <strong>数据块区</strong> 。</p>
<ul>
<li><strong>超级块</strong> ，用来存储文件系统的详细信息，比如块个数、块大小、空闲块等等。</li>
<li><strong>索引节点区</strong> ，用来存储索引节点；</li>
<li><strong>数据块区</strong> ，用来存储文件或目录数据；</li>
</ul>
<p>我们不可能把超级块和索引节点区全部加载到内存，这样内存肯定撑不住，所以只有当需要使用的时候，才将其加载进内存，它们加载进内存的时机是不同的：</p>
<ul>
<li><strong>超级块</strong> ：当文件系统挂载时进入内存；</li>
<li><strong>索引节点区</strong> ：当文件被访问时进入内存；</li>
</ul>
<h1 id="二、虚拟文件系统"><a href="#二、虚拟文件系统" class="headerlink" title="二、虚拟文件系统"></a>二、虚拟文件系统</h1><p>文件系统的种类众多，而操作系统希望 <strong>对用户提供一个统一的接口</strong> ，于是在用户层与文件系统层引入了中间层，这个中间层就称为 <strong>虚拟文件系统（Virtual File System，VFS）</strong> 。</p>
<p>VFS 定义了一组所有文件系统都支持的数据结构和标准接口，这样程序员不需要了解文件系统的工作原理，只需要了解 VFS 提供的统一接口即可。</p>
<p>在 Linux 文件系统中，用户空间、系统调用、虚拟机文件系统、缓存、文件系统以及存储之间的关系如下图：</p>
<p><img src="/2024/04/04/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image/1698756275943.png" alt="1698756275943"></p>
<p>Linux 支持的文件系统也不少，根据存储位置的不同，可以把文件系统分为三类：</p>
<ul>
<li><strong>磁盘的文件系统</strong> ，它是直接把数据存储在磁盘中，比如 Ext 2/3/4、XFS 等都是这类文件系统。</li>
<li><strong>内存的文件系统</strong> ，这类文件系统的数据不是存储在硬盘的，而是占用内存空间，我们经常用到的 /proc 和 /sys 文件系统都属于这一类，读写这类文件，实际上是读写内核中相关的数据数据。</li>
<li><strong>网络的文件系统</strong> ，用来访问其他计算机主机数据的文件系统，比如 NFS、SMB 等等。</li>
</ul>
<p>文件系统首先要先挂载到某个目录才可以正常使用，比如 Linux 系统在启动时，会把文件系统挂载到根目录。</p>
<h1 id="三、文件的使用"><a href="#三、文件的使用" class="headerlink" title="三、文件的使用"></a>三、文件的使用</h1><p>我们从用户角度来看文件的话，就是我们要怎么使用文件？首先，我们得通过系统调用来打开一个文件。</p>
<p><img src="/2024/04/04/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image/1698756308228.png" alt="1698756308228"></p>
<p>write 的过程</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">fd = open(name, flag); # 打开文件</span><br><span class="line">...</span><br><span class="line">write(fd,...);         # 写数据</span><br><span class="line">...</span><br><span class="line">close(fd);             # 关闭文件</span><br></pre></td></tr></table></figure>
<p>上面简单的代码是读取一个文件的过程：</p>
<ul>
<li>首先用 <code>open</code> 系统调用打开文件，<code>open</code> 的参数中包含文件的路径名和文件名。</li>
<li>使用 <code>write</code> 写数据，其中 <code>write</code> 使用 <code>open</code> 所返回的文件描述符，并不使用文件名作为参数。</li>
<li>使用完文件后，要用 <code>close</code> 系统调用关闭文件，避免资源的泄露。</li>
</ul>
<p>我们打开了一个文件后，操作系统会跟踪进程打开的所有文件，所谓的跟踪呢，就是操作系统为每个进程维护一个打开文件表，文件表里的每一项代表  <strong>「文件描述符」</strong> ，所以说文件描述符是打开文件的标识。</p>
<p><img src="/2024/04/04/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image/1698756353829.png" alt="1698756353829"></p>
<p>操作系统在打开文件表中维护着打开文件的状态和信息：</p>
<ul>
<li><strong>文件指针</strong>：系统跟踪上次读写位置作为当前文件位置指针，这种指针对打开文件的某个进程来说是唯一的；</li>
<li><strong>文件打开计数器</strong>：文件关闭时，操作系统必须重用其打开文件表条目，否则表内空间不够用。因为多个进程可能打开同一个文件，所以系统在删除打开文件条目之前，必须等待最后一个进程关闭文件，该计数器跟踪打开和关闭的数量，当该计数为 0 时，系统关闭文件，删除该条目；</li>
<li><strong>文件磁盘位置</strong>：绝大多数文件操作都要求系统修改文件数据，该信息保存在内存中，以免每个操作都从磁盘中读取；</li>
<li><strong>访问权限</strong>：每个进程打开文件都需要有一个访问模式（创建、只读、读写、添加等），该信息保存在进程的打开文件表中，以便操作系统能允许或拒绝之后的 I/O 请求</li>
</ul>
<p><img src="/2024/04/04/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image/1701509098206.png" alt="1701509098206"></p>
<p>在用户视角里，文件就是一个持久化的数据结构，但操作系统并不会关心你想存在磁盘上的任何的数据结构，操作系统的视角是如何把文件数据和磁盘块对应起来。</p>
<p>所以，用户和操作系统对文件的读写操作是有差异的，用户习惯以字节的方式读写文件，而操作系统则是以数据块来读写文件，那屏蔽掉这种差异的工作就是文件系统了。</p>
<p>我们来分别看一下，读文件和写文件的过程：</p>
<ul>
<li>当用户进程从文件读取 1 个字节大小的数据时，文件系统则需要获取字节所在的数据块，再返回数据块对应的用户进程所需的数据部分。</li>
<li>当用户进程把 1 个字节大小的数据写进文件时，文件系统则找到需要写入数据的数据块的位置，然后修改数据块中对应的部分，最后再把数据块写回磁盘。</li>
</ul>
<p>所以说， <strong>文件系统的基本操作单位是数据块</strong> 。</p>
<h1 id="四、文件的存储"><a href="#四、文件的存储" class="headerlink" title="四、文件的存储"></a>四、文件的存储</h1><p>文件的数据是要存储在硬盘上面的，数据在磁盘上的存放方式，就像程序在内存中存放的方式那样，有以下两种：</p>
<ul>
<li>连续空间存放方式</li>
<li>非连续空间存放方式</li>
</ul>
<p>其中，非连续空间存放方式又可以分为「<a href="https://link.zhihu.com/?target=https%3A//so.csdn.net/so/search%3Fq%3D%25E9%2593%25BE%25E8%25A1%25A8%26spm%3D1001.2101.3001.7020">链表</a>方式」和「索引方式」。</p>
<p>不同的存储方式，有各自的特点，重点是要分析它们的存储效率和读写性能，接下来分别对每种存储方式说一下。</p>
<h2 id="4-1-连续空间存放方式"><a href="#4-1-连续空间存放方式" class="headerlink" title="4.1 连续空间存放方式"></a>4.1 连续空间存放方式</h2><p>连续空间存放方式顾名思义，<strong>文件存放在磁盘「连续的」物理空间中</strong>。这种模式下，文件的数据都是紧密相连，<strong>读写效率很高</strong>，因为一次磁盘寻道就可以读出整个文件。</p>
<p>使用连续存放的方式有一个前提，必须先知道一个文件的大小，这样文件系统才会根据文件的大小在磁盘上找到一块连续的空间分配给文件。</p>
<p>所以，<strong>文件头里需要指定「起始块的位置」和「长度」</strong>，有了这两个信息就可以很好的表示文件存放方式是一块连续的磁盘空间。</p>
<p>注意，此处说的文件头，就类似于 Linux 的 inode。</p>
<p><img src="/2024/04/04/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image/1698756506172.png" alt="1698756506172"></p>
<p>连续空间存放的方式虽然读写效率高，<strong>但是有「磁盘空间碎片」和「文件长度不易扩展」的缺陷。</strong></p>
<p>如下图，如果文件 B 被删除，磁盘上就留下一块空缺，这时，如果新来的文件小于其中的一个空缺，我们就可以将其放在相应空缺里。但如果该文件的大小大于所有的空缺，但却小于空缺大小之和，则虽然磁盘上有足够的空缺，但该文件还是不能存放。当然了，我们可以通过将现有文件进行挪动来腾出空间以容纳新的文件，但是这个在磁盘挪动文件是非常耗时，所以这种方式不太现实。</p>
<p><img src="/2024/04/04/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image/1698756523589.png" alt="1698756523589"></p>
<p>另外一个缺陷是文件长度扩展不方便，例如上图中的文件 A 要想扩大一下，需要更多的磁盘空间，唯一的办法就只能是挪动的方式，前面也说了，这种方式效率是非常低的。</p>
<p>那么有没有更好的方式来解决上面的问题呢？答案当然有，既然连续空间存放的方式不太行，那么我们就改变存放的方式，使用非连续空间存放方式来解决这些缺陷。</p>
<h2 id="4-2-非连续空间存放方式"><a href="#4-2-非连续空间存放方式" class="headerlink" title="4.2 非连续空间存放方式"></a>4.2 非连续空间存放方式</h2><p>非连续空间存放方式分为「链表方式」和「索引方式」。</p>
<h3 id="4-2-1-链表方式"><a href="#4-2-1-链表方式" class="headerlink" title="4.2.1 链表方式"></a>4.2.1 链表方式</h3><p>链表的方式存放是<strong>离散的，不用连续的</strong>，于是就可以<strong>消除磁盘碎片</strong>，可大大提高磁盘空间的利用率，同时<strong>文件的长度可以动态扩展</strong>。根据实现的方式的不同，链表可分为<strong>「隐式链表」</strong>和<strong>「显式链接」</strong>两种形式。</p>
<p>文件要以<strong>「隐式链表」</strong>的方式存放的话，<strong>实现的方式是文件头要包含「第一块」和「最后一块」的位置，并且每个数据块里面留出一个指针空间，用来存放下一个数据块的位置</strong>，这样一个数据块连着一个数据块，从链头开是就可以顺着指针找到所有的数据块，所以存放的方式可以是不连续的。</p>
<p><img src="/2024/04/04/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image/1698756612470.png" alt="1698756612470"></p>
<p>隐式链表的存放方式的<strong>缺点在于无法直接访问数据块，只能通过指针顺序访问文件，以及数据块指针消耗了一定的存储空间</strong>。隐式链接分配的稳定性较差，系统在运行过程中由于软件或者硬件错误<strong>导致链表中的指针丢失或损坏，会导致文件数据的丢失</strong>。</p>
<p>如果取出每个磁盘块的指针，把它放在内存的一个表中，就可以解决上述隐式链表的两个不足。那么，这种实现方式是<strong>「显式链接」</strong>，它指<strong>把用于链接文件各数据块的指针，显式地存放在内存的一张链接表中</strong>，该表在整个磁盘仅设置一张，<strong>每个表项中存放链接指针，指向下一个数据块号。</strong></p>
<p>对于显式链接的工作方式，我们举个例子，文件 A 依次使用了磁盘块 4、7、2、10 和 12 ，文件 B 依次使用了磁盘块 6、3、11 和 14 。利用下图中的表，可以从第 4 块开始，顺着链走到最后，找到文件 A 的全部磁盘块。同样，从第 6 块开始，顺着链走到最后，也能够找出文件 B 的全部磁盘块。最后，这两个链都以一个不属于有效磁盘编号的特殊标记（如 -1 ）结束。内存中的这样一个表格称为  <strong>文件分配表（File Allocation Table，FAT）</strong> 。</p>
<p><img src="/2024/04/04/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image/1698756655342.png" alt="1698756655342"></p>
<p>由于查找记录的过程是在内存中进行的，因而不仅显著地<strong>提高了检索速度</strong>，而且<strong>大大减少了访问磁盘的次数</strong>。但也正是整个表都存放在内存中的关系，它的主要的缺点是<strong>不适用于大磁盘</strong>。</p>
<p>比如，对于 200GB 的磁盘和 1KB 大小的块，这张表需要有 2 亿项，每一项对应于这 2 亿个磁盘块中的一个块，每项如果需要 4 个字节，那这张表要占用 800MB 内存，很显然 FAT 方案对于大磁盘而言不太合适。</p>
<h3 id="4-2-2-索引方式"><a href="#4-2-2-索引方式" class="headerlink" title="4.2.2 索引方式"></a>4.2.2 索引方式</h3><p>链表的方式解决了连续分配的磁盘碎片和文件动态扩展的问题，但是不能有效支持直接访问（FAT除外），索引的方式可以解决这个问题。</p>
<p><strong>索引的实现是为每个文件创建一个「索引数据块」，里面存放的是指向文件数据块的指针列表</strong>，说白了就像书的目录一样，要找哪个章节的内容，看目录查就可以。</p>
<p>另外，<strong>文件头需要包含指向「索引数据块」的指针</strong>，这样就可以通过文件头知道索引数据块的位置，再通过索引数据块里的索引信息找到对应的数据块。</p>
<p>创建文件时，索引块的所有指针都设为空。当首次写入第 i 块时，先从空闲空间中取得一个块，再将其地址写到索引块的第 i 个条目。</p>
<p><img src="/2024/04/04/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image/1698757246533.png" alt="1698757246533"></p>
<p>索引的方式优点在于：</p>
<ul>
<li>文件的创建、增大、缩小很方便；</li>
<li>不会有碎片的问题；</li>
<li>支持顺序读写和随机读写；</li>
</ul>
<p>由于索引数据也是存放在磁盘块的，如果文件很小，明明只需一块就可以存放的下，但还是需要额外分配一块来存放索引数据，所以缺陷之一就是存储索引带来的开销。</p>
<p>如果文件很大，大到一个索引数据块放不下索引信息，这时又要如何处理大文件的存放呢？我们可以通过组合的方式，来处理大文件的存。</p>
<p>先来看看<strong>链表 + 索引的组合，这种组合称为「链式索引块」</strong>，它的实现方式是<strong>在索引数据块留出一个存放下一个索引数据块的指针</strong>，于是当一个索引数据块的索引信息用完了，就可以通过指针的方式，找到下一个索引数据块的信息。那这种方式也会出现前面提到的链表方式的问题，万一某个指针损坏了，后面的数据也就会无法读取了。</p>
<p><img src="/2024/04/04/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image/1698757310413.png" alt="1698757310413"></p>
<p>还有另外一种组合方式是<strong>索引 + 索引的方式，这种组合称为「多级索引块」</strong>，实现方式是<strong>通过一个索引块来存放多个索引数据块</strong>，一层套一层索引，像极了俄罗斯套娃是吧。</p>
<p><img src="/2024/04/04/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image/1698757327790.png" alt="1698757327790"></p>
<h1 id="五、Unix-文件的实现方式"><a href="#五、Unix-文件的实现方式" class="headerlink" title="五、Unix 文件的实现方式"></a>五、Unix 文件的实现方式</h1><p>我们先把前面提到的文件实现方式，做个比较：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>方式</th>
<th>访问磁盘次数</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td>顺序分配</td>
<td>需访问磁盘1次</td>
<td>顺序存取速度快，当文件是定长时可以根据文件起始地址及记录长度进行随机访问</td>
<td>要求连续的存储空间，会产生外部碎片，不利于文件的动态扩充</td>
</tr>
<tr>
<td>链表分配</td>
<td>需访问磁盘n次</td>
<td>无外部碎片，提供了外存空间的利用率，动态增长较方便</td>
<td>只能按照文件的指针链顺序访问，查找效率低，指针信息存放消耗内存或磁盘空间</td>
</tr>
<tr>
<td>索引分配</td>
<td>m级需访问磁盘m+1次</td>
<td>可以随机访问，易于文件的增删</td>
<td>索引表增加存储空间的开销，索引表的查找策略对文件系统效率影响较大</td>
</tr>
</tbody>
</table>
</div>
<p><img src="/2024/04/04/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image/1698757337984.png" alt="1698757337984"></p>
<p>那早期 Unix 文件系统是组合了前面的文件存放方式的优点，如下图：</p>
<p><img src="/2024/04/04/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image/1698757347621.png" alt="1698757347621"></p>
<p>它是根据文件的大小，存放的方式会有所变化：</p>
<ul>
<li>如果存放文件所需的数据块小于 10 块，则采用直接查找的方式；</li>
<li>如果存放文件所需的数据块超过 10 块，则采用一级间接索引方式；</li>
<li>如果前面两种方式都不够存放大文件，则采用二级间接索引方式；</li>
<li>如果二级间接索引也不够存放大文件，这采用三级间接索引方式；</li>
</ul>
<p>那么，文件头（<strong>Inode</strong>）就需要包含 13 个指针：</p>
<ul>
<li>10 个指向数据块的指针；</li>
<li>第 11 个指向索引块的指针；</li>
<li>第 12 个指向二级索引块的指针；</li>
<li>第 13 个指向三级索引块的指针；</li>
</ul>
<p>所以，这种方式能很灵活地支持小文件和大文件的存放：</p>
<ul>
<li>对于小文件使用直接查找的方式可减少索引数据块的开销；</li>
<li>对于大文件则以多级索引的方式来支持，所以大文件在访问数据块时需要大量查询；</li>
</ul>
<p>这个方案就用在了 Linux Ext 2/3 文件系统里，虽然解决大文件的存储，但是对于大文件的访问，需要大量的查询，效率比较低。</p>
<p>为了解决这个问题，Ext 4 做了一定的改变，具体怎么解决的，本文就不展开了。</p>
<h1 id="六、空闲空间管理"><a href="#六、空闲空间管理" class="headerlink" title="六、空闲空间管理"></a>六、空闲空间管理</h1><p>前面说到的文件的存储是针对已经被占用的数据块组织和管理，接下来的问题是，如果我要保存一个数据块，我应该放在硬盘上的哪个位置呢？难道需要将所有的块扫描一遍，找个空的地方随便放吗？</p>
<p>那这种方式效率就太低了，所以针对磁盘的空闲空间也是要引入管理的机制，接下来介绍几种常见的方法：</p>
<ul>
<li>空闲表法</li>
<li>空闲链表法</li>
<li>位图法</li>
</ul>
<h2 id="6-1-空闲表法"><a href="#6-1-空闲表法" class="headerlink" title="6.1 空闲表法"></a>6.1 空闲表法</h2><p>空闲表法就是为所有空闲空间建立一张表，表内容包括空闲区的第一个块号和该空闲区的块个数，注意，这个方式是连续分配的。如下图：</p>
<p><img src="/2024/04/04/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image/1698757401267.png" alt="1698757401267"></p>
<p>当请求分配磁盘空间时，系统依次扫描空闲表里的内容，直到找到一个合适的空闲区域为止。当用户撤销一个文件时，系统回收文件空间。这时，也需顺序扫描空闲表，寻找一个空闲表条目并将释放空间的第一个物理块号及它占用的块数填到这个条目中。</p>
<p>这种方法仅当有少量的空闲区时才有较好的效果。因为，如果存储空间中有着大量的小的空闲区，则空闲表变得很大，这样查询效率会很低。另外，这种分配技术适用于建立连续文件。</p>
<h2 id="6-2-空闲链表法"><a href="#6-2-空闲链表法" class="headerlink" title="6.2 空闲链表法"></a>6.2 空闲链表法</h2><p>我们也可以使用<strong>「链表」的方式来管理空闲空间，每一个空闲块里有一个指针指向下一个空闲块</strong>，这样也能很方便的找到空闲块并管理起来。如下图：</p>
<p><img src="/2024/04/04/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image/1698757424352.png" alt="1698757424352"></p>
<p>当创建文件需要一块或几块时，就从链头上依次取下一块或几块。反之，当回收空间时，把这些空闲块依次接到链头上。</p>
<p>这种技术只要在主存中保存一个指针，令它指向第一个空闲块。其特点是简单，但不能随机访问，工作效率低，因为每当在链上增加或移动空闲块时需要做很多 I/O 操作，同时数据块的指针消耗了一定的存储空间。</p>
<p>空闲表法和空闲链表法都不适合用于大型文件系统，因为这会使空闲表或空闲链表太大。</p>
<h2 id="6-3-位图法"><a href="#6-3-位图法" class="headerlink" title="6.3 位图法"></a>6.3 位图法</h2><p>位图是利用二进制的一位来表示磁盘中一个盘块的使用情况，磁盘上所有的盘块都有一个二进制位与之对应。</p>
<p>当值为 0 时，表示对应的盘块空闲，值为 1 时，表示对应的盘块已分配。它形式如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">1111110011111110001110110111111100111 ...</span><br></pre></td></tr></table></figure>
<p>在 Linux 文件系统就采用了位图的方式来管理空闲空间，不仅用于数据空闲块的管理，还用于 inode 空闲块的管理，因为 inode 也是存储在磁盘的，自然也要有对其管理。</p>
<h1 id="七、文件系统的结构"><a href="#七、文件系统的结构" class="headerlink" title="七、文件系统的结构"></a>七、文件系统的结构</h1><p>前面提到 Linux 是用位图的方式管理空闲空间，用户在创建一个新文件时，Linux 内核会通过 inode 的位图找到空闲可用的 inode，并进行分配。要存储数据时，会通过块的位图找到空闲的块，并分配，但仔细计算一下还是有问题的。</p>
<p>数据块的位图是放在磁盘块里的，假设是放在一个块里，一个块 4K，每位表示一个数据块，共可以表示 <code>4 * 1024 * 8 = 2^15</code>个空闲块，由于 1 个数据块是 4K 大小，那么最大可以表示的空间为 <code>2^15 * 4 * 1024 = 2^27</code>个 byte，也就是 128M。</p>
<p>也就是说按照上面的结构，如果采用「一个块的位图 + 一系列的块」，外加「一个块的 inode 的位图 + 一系列的 inode 的结构」能表示的最大空间也就 128M，这太少了，现在很多文件都比这个大。</p>
<p>在 Linux 文件系统，把这个结构称为一个<strong>块组</strong>，那么有 N 多的块组，就能够表示 N 大的文件。</p>
<p>下图给出了 Linux Ext2 整个文件系统的结构和块组的内容，文件系统都由大量块组组成，在硬盘上相继排布：</p>
<p><img src="/2024/04/04/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image/1698757451418.png" alt="1698757451418"></p>
<p>最前面的第一个块是引导块，在系统启动时用于启用引导，接着后面就是一个一个连续的块组了，块组的内容如下：</p>
<ul>
<li><strong>超级块</strong>，包含的是文件系统的重要信息，比如 inode 总个数、块总个数、每个块组的 inode 个数、每个块组的块个数等等。</li>
<li><strong>块组描述符</strong>，包含文件系统中各个块组的状态，比如块组中空闲块和 inode 的数目等，每个块组都包含了文件系统中「所有块组的组描述符信息」。</li>
<li><strong>数据位图和 inode 位图</strong>， 用于表示对应的数据块或 inode 是空闲的，还是被使用中。</li>
<li><strong>inode 列表</strong>，包含了块组中所有的 inode，inode 用于保存文件系统中与各个文件和目录相关的所有元数据。</li>
<li><strong>数据块</strong>，包含文件的有用数据。</li>
</ul>
<p>你可以会发现每个块组里有很多重复的信息，比如<strong>超级块和块组描述符表，这两个都是全局信息，而且非常的重要</strong>，这么做是有两个原因：</p>
<ul>
<li>如果系统崩溃破坏了超级块或块组描述符，有关文件系统结构和内容的所有信息都会丢失。如果有冗余的副本，该信息是可能恢复的。</li>
<li>通过使文件和管理数据尽可能接近，减少了磁头寻道和旋转，这可以提高文件系统的性能。</li>
</ul>
<p>不过，Ext2 的后续版本采用了稀疏技术。该做法是，超级块和块组描述符表不再存储到文件系统的每个块组中，而是只写入到块组 0、块组 1 和其他 ID 可以表示为 3、 5、7 的幂的块组中。</p>
<h1 id="八、目录的存储"><a href="#八、目录的存储" class="headerlink" title="八、目录的存储"></a>八、目录的存储</h1><p>在前面，我们知道了一个普通文件是如何存储的，但还有一个特殊的文件，经常用到的目录，它是如何保存的呢？</p>
<p>基于 Linux 一切皆文件的设计思想，目录其实也是个文件，你甚至可以通过 vim 打开它，它也有 inode，inode 里面也是指向一些块。</p>
<p>和普通文件不同的是，<strong>普通文件的块里面保存的是文件数据，而目录文件的块里面保存的是目录里面一项一项的文件信息。</strong></p>
<p>在目录文件的块中，最简单的保存格式就是<strong>列表</strong>，就是一项一项地将目录下的文件信息（如文件名、文件 inode、文件类型等）列在表里。</p>
<p>列表中每一项就代表该目录下的文件的文件名和对应的 inode，通过这个 inode，就可以找到真正的文件。</p>
<p><img src="/2024/04/04/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image/1698757494170.png" alt="1698757494170"></p>
<p>通常，第一项是「<code>.</code>」，表示当前目录，第二项是「<code>..</code>」，表示上一级目录，接下来就是一项一项的文件名和 inode。</p>
<p>如果一个目录有超级多的文件，我们要想在这个目录下找文件，按照列表一项一项的找，效率就不高了。</p>
<p>于是，保存目录的格式改成<strong>哈希表</strong>，对文件名进行哈希计算，把哈希值保存起来，如果我们要查找一个目录下面的文件名，可以通过名称取哈希。如果哈希能够匹配上，就说明这个文件的信息在相应的块里面。</p>
<p>Linux 系统的 ext 文件系统就是采用了哈希表，来保存目录的内容，这种方法的优点是查找非常迅速，插入和删除也较简单，不过需要一些预备措施来避免哈希冲突。</p>
<p>目录查询是通过在磁盘上反复搜索完成，需要不断地进行 I/O 操作，开销较大。所以，为了减少 I/O 操作，把当前使用的文件目录缓存在内存，以后要使用该文件时只要在内存中操作，从而降低了磁盘操作次数，提高了文件系统的访问速度。</p>
<h1 id="九、软链接和硬链接"><a href="#九、软链接和硬链接" class="headerlink" title="九、软链接和硬链接"></a>九、软链接和<strong>硬链接</strong></h1><p>有时候我们希望给某个文件取个别名，那么在 Linux 中可以通过<strong>硬链接（Hard Link）</strong> 和<strong>软链接（Symbolic Link）</strong> 的方式来实现，它们都是比较特殊的文件，但是实现方式也是不相同的。</p>
<p><strong>硬链接是多个目录项中的「索引节点」指向一个文件，也就是指向同一个 inode</strong>，但是 inode 是不可能跨越文件系统的，每个文件系统都有各自的 inode 数据结构和列表，所以<strong>硬链接是不可用于跨文件系统的</strong>。由于多个目录项都是指向一个 inode，那么<strong>只有删除文件的所有硬链接以及源文件时，系统才会彻底删除该文件。</strong></p>
<p><img src="/2024/04/04/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image/1698757530614.png" alt="1698757530614"></p>
<p><strong>软链接相当于重新创建一个文件，这个文件有独立的 inode</strong>，但是这个<strong>文件的内容是另外一个文件的路径</strong>，所以访问软链接的时候，实际上相当于访问到了另外一个文件，所以<strong>软链接是可以跨文件系统的，甚至目标文件被删除了，链接文件还是在的，只不过指向的文件找不到了而已。</strong></p>
<p><img src="/2024/04/04/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image/1698757557687.png" alt="1698757557687"></p>
<h1 id="十、文件-I-O"><a href="#十、文件-I-O" class="headerlink" title="十、文件 I/O"></a>十、文件 I/O</h1><p>文件的读写方式各有千秋，对于文件的 I/O 分类也非常多，常见的有</p>
<ul>
<li>缓冲与非缓冲 I/O</li>
<li>直接与非直接 I/O</li>
<li>阻塞与非阻塞 I/O VS 同步与异步 I/O</li>
</ul>
<p>接下来，分别对这些分类讨论讨论。</p>
<h1 id="十一、缓冲与非缓冲-I-O"><a href="#十一、缓冲与非缓冲-I-O" class="headerlink" title="十一、缓冲与非缓冲 I/O"></a>十一、缓冲与非缓冲 I/O</h1><p>文件操作的标准库是可以实现数据的缓存，那么<strong>根据「是否利用标准库缓冲」，可以把文件 I/O 分为缓冲 I/O 和非缓冲 I/O：</strong></p>
<ul>
<li>缓冲 I/O，利用的是标准库的缓存实现文件的加速访问，而标准库再通过系统调用访问文件。</li>
<li>非缓冲 I/O，直接通过系统调用访问文件，不经过标准库缓存。</li>
</ul>
<p>这里所说的「缓冲」特指标准库内部实现的缓冲。</p>
<p>比方说，很多程序遇到换行时才真正输出，而换行前的内容，其实就是被标准库暂时缓存了起来，这样做的目的是，减少系统调用的次数，毕竟系统调用是有 CPU 上下文切换的开销的。</p>
<h1 id="十二、直接与非直接-I-O"><a href="#十二、直接与非直接-I-O" class="headerlink" title="十二、直接与非直接 I/O"></a>十二、直接与非直接 I/O</h1><p>我们都知道磁盘 I/O 是非常慢的，所以 Linux 内核为了减少磁盘 I/O 次数，在系统调用后，会把用户数据拷贝到内核中缓存起来，这个内核缓存空间也就是「页缓存」，只有当缓存满足某些条件的时候，才发起磁盘 I/O 的请求。</p>
<p>那么，<strong>根据是「否利用操作系统的缓存」，可以把文件 I/O 分为直接 I/O 与非直接 I/O：</strong></p>
<ul>
<li>直接 I/O，不会发生内核缓存和用户程序之间数据复制，而是直接经过文件系统访问磁盘。</li>
<li>非直接 I/O，读操作时，数据从内核缓存中拷贝给用户程序，写操作时，数据从用户程序拷贝给内核缓存，再由内核决定什么时候写入数据到磁盘。</li>
</ul>
<p>如果你在使用文件操作类的系统调用函数时，指定了 <code>O_DIRECT</code> 标志，则表示使用直接 I/O。如果没有设置过，默认使用的是非直接 I/O。</p>
<blockquote>
<p>如果用了非直接 I/O 进行写数据操作，内核什么情况下才会把缓存数据写入到磁盘？<br>以下几种场景会触发内核缓存的数据写入磁盘：</p>
</blockquote>
<ul>
<li>在调用 <code>write</code> 的最后，当发现内核缓存的数据太多的时候，内核会把数据写到磁盘上；</li>
<li>用户主动调用 <code>sync</code>，内核缓存会刷到磁盘上；</li>
<li>当内存十分紧张，无法再分配页面时，也会把内核缓存的数据刷到磁盘上；</li>
<li>内核缓存的数据的缓存时间超过某个时间时，也会把数据刷到磁盘上；</li>
</ul>
<h1 id="十三、阻塞与非阻塞-I-O-VS-同步与异步-I-O"><a href="#十三、阻塞与非阻塞-I-O-VS-同步与异步-I-O" class="headerlink" title="十三、阻塞与非阻塞 I/O VS 同步与异步 I/O"></a>十三、阻塞与非阻塞 I/O VS 同步与异步 I/O</h1><p>为什么把阻塞 / 非阻塞与同步与异步放一起说的呢？因为它们确实非常相似，也非常容易混淆，不过它们之间的关系还是有点微妙的。</p>
<p>先来看看<strong>阻塞 I/O</strong>，当用户程序执行 <code>read</code> ，线程会被阻塞，一直等到内核数据准备好，并把数据从内核缓冲区拷贝到应用程序的缓冲区中，当拷贝过程完成，<code>read</code> 才会返回。</p>
<p>注意，<strong>阻塞等待的是「内核数据准备好」和「数据从内核态拷贝到用户态」这两个过程</strong>。过程如下图：</p>
<p><img src="/2024/04/04/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image/1698757629510.png" alt="1698757629510"></p>
<p>知道了阻塞 I/O ，来看看<strong>非阻塞 I/O</strong>，非阻塞的 read 请求在数据未准备好的情况下立即返回，可以继续往下执行，此时应用程序不断轮询内核，直到数据准备好，内核将数据拷贝到应用程序缓冲区，read 调用才可以获取到结果。过程如下图：</p>
<p><img src="/2024/04/04/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image/1698757642815.png" alt="1698757642815"></p>
<p>注意，<strong>这里最后一次 read 调用，获取数据的过程，是一个同步的过程，是需要等待的过程。这里的同步指的是内核态的数据拷贝到用户程序的缓存区这个过程。</strong></p>
<p>举个例子，访问管道或 socket 时，如果设置了 <code>O_NONBLOCK</code> 标志，那么就表示使用的是非阻塞 I/O 的方式访问，而不做任何设置的话，默认是阻塞 I/O。</p>
<p>应用程序每次轮询内核的 I/O 是否准备好，感觉有点傻乎乎，因为轮询的过程中，应用程序啥也做不了，只是在循环。</p>
<p>为了解决这种傻乎乎轮询方式，于是 <strong>I/O 多路复用</strong>技术就出来了，如 select、poll，它是通过 I/O 事件分发，当内核数据准备好时，再以事件通知应用程序进行操作。</p>
<p>这个做法大大改善了 CPU 的利用率，因为当调用了 I/O 多路复用接口，如果没有事件发生，那么当前线程就会发生阻塞，这时 CPU 会切换其他线程执行任务，等内核发现有事件到来的时候，会唤醒阻塞在 I/O 多路复用接口的线程，然后用户可以进行后续的事件处理。</p>
<p>整个流程要比阻塞 IO 要复杂，似乎也更浪费性能。但  <strong>I/O 多路复用接口最大的优势在于，用户可以在一个线程内同时处理多个 socket 的 IO 请求</strong> （参见：<a href="https://xiaolincoding.com/os/8_network_system/selete_poll_epoll.html">I/O 多路复用：select/poll/epoll <strong>(opens new window)</strong></a>）。用户可以注册多个 socket，然后不断地调用 I/O 多路复用接口读取被激活的 socket，即可达到在同一个线程内同时处理多个 IO 请求的目的。而在同步阻塞模型中，必须通过多线程的方式才能达到这个目的。</p>
<p>下图是使用 select I/O 多路复用过程。注意，<code>read</code> 获取数据的过程（数据从内核态拷贝到用户态的过程），也是一个 <strong>同步的过程</strong> ，需要等待：</p>
<p><img src="/2024/04/04/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image/1698757714839.png" alt="1698757714839"></p>
<p>实际上，无论是阻塞 I/O、非阻塞 I/O，还是基于非阻塞 I/O 的多路复用<strong>都是同步调用。因为它们在 read 调用时，内核将数据从内核空间拷贝到应用程序空间，过程都是需要等待的，也就是说这个过程是同步的，如果内核实现的拷贝效率不高，read 调用就会在这个同步过程中等待比较长的时间。</strong></p>
<p>而真正的<strong>异步 I/O</strong> 是「内核数据准备好」和「数据从内核态拷贝到用户态」这两个过程都不用等待。</p>
<p>当我们发起 <code>aio_read</code> 之后，就立即返回，内核自动将数据从内核空间拷贝到应用程序空间，这个拷贝过程同样是异步的，内核自动完成的，和前面的同步操作不一样，应用程序并不需要主动发起拷贝动作。过程如下图：</p>
<p><img src="/2024/04/04/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image/1698757737449.png" alt="1698757737449"></p>
<p>下面这张图，总结了以上几种 I/O 模型：</p>
<p><img src="/2024/04/04/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image/1698757743317.png" alt="1698757743317"></p>
<p>在前面我们知道了，I/O 是分为两个过程的：</p>
<ol>
<li>数据准备的过程</li>
<li>数据从内核空间拷贝到用户进程缓冲区的过程</li>
</ol>
<p>阻塞 I/O 会阻塞在「过程 1 」和「过程 2」，而非阻塞 I/O 和基于非阻塞 I/O 的多路复用只会阻塞在「过程 2」，所以这三个都可以认为是同步 I/O。</p>
<p>异步 I/O 则不同，「过程 1 」和「过程 2 」都不会阻塞。</p>
<blockquote>
<p>用故事去理解这几种 I/O 模型</p>
</blockquote>
<p>举个你去饭堂吃饭的例子，你好比用户程序，饭堂好比操作系统。</p>
<p>阻塞 I/O 好比，你去饭堂吃饭，但是饭堂的菜还没做好，然后你就一直在那里等啊等，等了好长一段时间终于等到饭堂阿姨把菜端了出来（数据准备的过程），但是你还得继续等阿姨把菜（内核空间）打到你的饭盒里（用户空间），经历完这两个过程，你才可以离开。</p>
<p>非阻塞 I/O 好比，你去了饭堂，问阿姨菜做好了没有，阿姨告诉你没，你就离开了，过几十分钟，你又来饭堂问阿姨，阿姨说做好了，于是阿姨帮你把菜打到你的饭盒里，这个过程你是得等待的。</p>
<p>基于非阻塞的 I/O 多路复用好比，你去饭堂吃饭，发现有一排窗口，饭堂阿姨告诉你这些窗口都还没做好菜，等做好了再通知你，于是等啊等（<code>select</code> 调用中），过了一会阿姨通知你菜做好了，但是不知道哪个窗口的菜做好了，你自己看吧。于是你只能一个一个窗口去确认，后面发现 5 号窗口菜做好了，于是你让 5 号窗口的阿姨帮你打菜到饭盒里，这个打菜的过程你是要等待的，虽然时间不长。打完菜后，你自然就可以离开了。</p>
<p>异步 I/O 好比，你让饭堂阿姨将菜做好并把菜打到饭盒里后，把饭盒送到你面前，整个过程你都不需要任何等待。</p>
]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>文件系统</tag>
      </tags>
  </entry>
  <entry>
    <title>GDB调试</title>
    <url>/2024/04/05/GDB%E8%B0%83%E8%AF%95/</url>
    <content><![CDATA[<h1 id="GDB调试（常见指令）"><a href="#GDB调试（常见指令）" class="headerlink" title="GDB调试（常见指令）"></a>GDB调试（常见指令）</h1><p><a href="https://www.cnblogs.com/lvdongjie/p/8994092.html">【Linux】GDB用法详解(5小时快速教程) - Avatarx - 博客园</a></p>
<h1 id="1-GDB-概述"><a href="#1-GDB-概述" class="headerlink" title="1. GDB 概述"></a><strong>1. GDB</strong> <strong>概述</strong></h1><p>GDB是GNU开源组织发布的一个强大的UNIX下的程序调试工具。或许，各位比较喜欢那种图形界面方式的，像VC、BCB等IDE的调试，但如果你是在 UNIX平台下做软件，你会发现GDB这个调试工具有比VC、BCB的图形化调试器更强大的功能。所谓“寸有所长，尺有所短”就是这个道理。</p>
<p>一般来说，GDB主要帮忙你完成下面四个方面的功能：</p>
<ol>
<li>启动你的程序，可以按照你的自定义的要求随心所欲的运行程序。</li>
<li>可让被调试的程序在你所指定的调置的断点处停住。（断点可以是条件表达式）</li>
<li>当程序被停住时，可以检查此时你的程序中所发生的事。</li>
<li>动态的改变你程序的执行环境。</li>
</ol>
<p>从上面看来，GDB和一般的调试工具没有什么两样，基本上也是完成这些功能，不过在细节上，你会发现GDB这个调试工具的强大，大家可能比较习惯了图形化的调试工具，但有时候，命令行的调试工具却有着图形化工具所不能完成的功能。</p>
<h1 id="2-使用GDB"><a href="#2-使用GDB" class="headerlink" title="2. 使用GDB"></a><strong>2. 使用GDB</strong></h1><p>一般来说GDB主要调试的是C/C++的程序。要调试C/C++的程序，首先在编译时，我们必须要把调试信息加到可执行文件中。使用编译器（cc/gcc/g++）的 -g 参数可以做到这一点。如：</p>
<blockquote>
<p>gcc -g hello.c -o hello</p>
<p>g++ -g hello.cpp -o hello</p>
</blockquote>
<p>如果没有-g，你将看不见程序的函数名、变量名，所代替的全是运行时的内存地址。当你用-g把调试信息加入之后，并成功编译目标代码以后，让我们来看看如何用gdb来调试他。</p>
<h2 id="2-1-启动GDB的方法有以下几种："><a href="#2-1-启动GDB的方法有以下几种：" class="headerlink" title="2.1 启动GDB的方法有以下几种："></a>2.1 <strong>启动GDB的方法有以下几种：</strong></h2><ol>
<li><strong>gdb program</strong></li>
</ol>
<p>program 也就是你的执行文件，一般在当前目录下。</p>
<ol>
<li><strong>gdb program core</strong></li>
</ol>
<p>用gdb同时调试一个运行程序和core文件，core是程序非法执行后core dump后产生的文件。</p>
<ol>
<li><strong>gdb program 1234</strong></li>
</ol>
<p>如果你的程序是一个服务程序，那么你可以指定这个服务程序运行时的进程ID。gdb会自动attach上去，并调试他。program应该在PATH环境变量中搜索得到。</p>
<h2 id="2-2-GDB的启动开关"><a href="#2-2-GDB的启动开关" class="headerlink" title="2.2 GDB的启动开关"></a>2.2 GDB的启动开关</h2><p>GDB启动时，可以加上一些GDB的启动开关，详细的开关可以用gdb -help查看。下面只列举一些比较常用的参数：</p>
<ul>
<li><strong>-symbols=SYMFILE</strong></li>
</ul>
<p>从指定文件中读取符号表。</p>
<ul>
<li><strong>-se=FILE</strong></li>
</ul>
<p>从指定文件中读取符号表信息，并把他用在可执行文件中。</p>
<ul>
<li><strong>-core=COREFILE</strong></li>
</ul>
<p>调试时core dump的core文件。</p>
<ul>
<li><strong>-directory=DIR</strong></li>
</ul>
<p>加入一个源文件的搜索路径。默认搜索路径是环境变量中PATH所定义的路径。</p>
<h1 id="3-GDB-的命令概貌"><a href="#3-GDB-的命令概貌" class="headerlink" title="3 GDB 的命令概貌"></a><strong>3 GDB</strong> <strong>的命令概貌</strong></h1><p>启动gdb后，就进入gdb的调试环境中，就可以使用gdb的命令开始调试程序了，gdb的命令可以使用help命令来查看，如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">root@linux:/home/benben# **gdb**</span><br><span class="line">GNU gdb <span class="number">5.1</span><span class="number">.1</span></span><br><span class="line">Copyright <span class="number">2002</span> Free Software Foundation, Inc.</span><br><span class="line">GDB is free software, covered by the GNU General Public License, <span class="keyword">and</span> you are</span><br><span class="line">welcome to change it <span class="keyword">and</span>/<span class="keyword">or</span> distribute copies of it under certain conditions.</span><br><span class="line">Type <span class="string">&quot;show copying&quot;</span> to see the conditions.</span><br><span class="line">There is absolutely no warranty <span class="keyword">for</span> GDB. Type <span class="string">&quot;show warranty&quot;</span> <span class="keyword">for</span> details.</span><br><span class="line">This GDB was configured as <span class="string">&quot;i386-suse-linux&quot;</span>.</span><br><span class="line">**(gdb) help**</span><br><span class="line">List of classes of commands:</span><br><span class="line"> </span><br><span class="line">aliases -- Aliases of other commands</span><br><span class="line">breakpoints -- Making program stop at certain points</span><br><span class="line">data -- Examining data</span><br><span class="line">files -- Specifying <span class="keyword">and</span> examining files</span><br><span class="line">internals -- Maintenance commands</span><br><span class="line">obscure -- Obscure features</span><br><span class="line">running -- Running the program</span><br><span class="line">stack -- Examining the stack</span><br><span class="line">status -- Status inquiries</span><br><span class="line">support -- Support facilities</span><br><span class="line">tracepoints -- Tracing of program execution without stopping the program</span><br><span class="line">user-defined -- User-defined commands</span><br><span class="line"> </span><br><span class="line">Type <span class="string">&quot;help&quot;</span> followed by a <span class="keyword">class</span> <span class="title class_">name</span> <span class="keyword">for</span> a list of commands in that <span class="keyword">class</span>.</span><br><span class="line">Type <span class="string">&quot;help&quot;</span> followed by command name <span class="keyword">for</span> full documentation.</span><br><span class="line">Command name abbreviations are allowed <span class="keyword">if</span> unambiguous.</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure>
<p>gdb的命令很多，gdb把之分成许多个种类。help命令只是例出gdb的命令种类，如果要看种类中的命令，可以使用 help 命令，如：help breakpoints，查看设置断点的所有命令。也可以直接help 来查看命令的帮助。</p>
<p>gdb中，输入命令时，可以不用打全命令，只用打命令的前几个字符就可以了，当然，命令的前几个字符应该要标志着一个唯一的命令，在Linux下，你可以敲击两次TAB键来补齐命令的全称，如果有重复的，那么gdb会把其列出来。</p>
<p><strong>示例一：</strong> 在进入函数func时，设置一个断点。可以敲入break func，或是直接就是b func</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">(gdb) b func</span><br><span class="line">Breakpoint <span class="number">1</span> at <span class="number">0x8048458</span>: file hello.c, line <span class="number">10.</span></span><br></pre></td></tr></table></figure>
<p><strong>示例二：</strong> 敲入b按两次TAB键，你会看到所有b打头的命令：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">(gdb) b</span><br><span class="line">backtrace <span class="keyword">break</span> bt</span><br></pre></td></tr></table></figure>
<p><strong>示例三：</strong> 只记得函数的前缀，可以这样：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">(gdb) b make_ &lt;按TAB键&gt;</span><br><span class="line">（再按下一次TAB键，你会看到:）</span><br><span class="line">make_a_section_from_file make_environ</span><br><span class="line">make_abs_section make_function_type</span><br><span class="line">make_blockvector make_pointer_type</span><br><span class="line">make_cleanup make_reference_type</span><br><span class="line">make_command make_symbol_completion_list</span><br></pre></td></tr></table></figure>
<p>GDB把所有make开头的函数全部例出来给你查看。</p>
<p>要退出gdb时，只用发quit或命令简称q就行了。</p>
<h1 id="4-GDB-中运行UNIX的shell程序"><a href="#4-GDB-中运行UNIX的shell程序" class="headerlink" title="4 GDB 中运行UNIX的shell程序"></a><strong>4 GDB</strong> <strong>中运行UNIX的shell程序</strong></h1><h2 id="4-1-shell"><a href="#4-1-shell" class="headerlink" title="4.1 shell"></a>4.1 shell</h2><p>在gdb环境中，你可以执行UNIX的shell的命令，使用gdb的shell命令来完成：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">shell</span><br></pre></td></tr></table></figure>
<p>调用UNIX的shell来执行，环境变量SHELL中定义的UNIX的shell将会被用来执行，如果SHELL没有定义，那就使用UNIX的标准shell：/bin/sh。</p>
<p>退出用exit命令，回到gdb提示符</p>
<h2 id="4-2-make"><a href="#4-2-make" class="headerlink" title="4.2 make"></a>4.2 make</h2><p>还有一个gdb命令是make：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure>
<p>可以在gdb中执行make命令来重新build自己的程序。这个命令等价于“shell make ”。</p>
<h1 id="5-在GDB中运行程序"><a href="#5-在GDB中运行程序" class="headerlink" title="5 在GDB中运行程序"></a>5 <strong>在GDB中运行程序</strong></h1><p>当以 gdb 方式启动gdb后，gdb会在PATH路径和当前目录中搜索源文件。如要确认gdb是否读到源文件，可使用l或list命令，看看gdb是否能列出源代码。</p>
<p>在gdb中，运行程序使用r或是run命令。程序的运行，你有可能需要设置下面四方面的事。</p>
<h2 id="5-1-程序运行参数。"><a href="#5-1-程序运行参数。" class="headerlink" title="5.1 程序运行参数。"></a>5.<strong>1 程序运行参数。</strong></h2><p>set args 可指定运行时参数。（如：set args <em>10 20 30 40 50</em> ）</p>
<p>show args 命令可以查看设置好的运行参数。</p>
<h2 id="5-2-运行环境。"><a href="#5-2-运行环境。" class="headerlink" title="5.2 运行环境。"></a>5.<strong>2 运行环境。</strong></h2><p>path</p>
<p>可设定程序的运行路径。</p>
<p>show paths 查看程序的运行路径。</p>
<p>set env <em>environmentVarname=value</em> 设置环境变量。如：set env <em>USER=benben</em>show env <em>[varname]</em> 查看环境变量，不带varname，打印出当前所有环境变量。</p>
<h2 id="5-3-工作目录。"><a href="#5-3-工作目录。" class="headerlink" title="5.3 工作目录。"></a>5.<strong>3 工作目录。</strong></h2><p>cd 相当于shell的cd命令。</p>
<p>pwd 显示当前的所在目录。</p>
<h2 id="5-4-程序的输入输出。"><a href="#5-4-程序的输入输出。" class="headerlink" title="5.4 程序的输入输出。"></a>5.<strong>4 程序的输入输出。</strong></h2><p>info terminal 显示你程序用到的终端的模式。</p>
<p>使用重定向控制程序输出。如：run &gt; outfile</p>
<p>tty命令可以设置输入输出使用的终端设备。如：tty /dev/tty1</p>
<h2 id="5-5-调试已运行的程序"><a href="#5-5-调试已运行的程序" class="headerlink" title="5.5 调试已运行的程序"></a>5.<strong>5 调试已运行的程序</strong></h2><p>两种方法：</p>
<ol>
<li>在UNIX下用ps查看正在运行的程序的PID（进程ID），然后用gdb PID <em>process-id</em> 格式挂接正在运行的程序。</li>
<li>先用gdb 关联上源代码，并进行gdb，在gdb中用attach <em>process-id</em> 命令来挂接进程的PID。并用detach来取消挂接的进程。</li>
</ol>
<h1 id="6-暂停-恢复程序运行"><a href="#6-暂停-恢复程序运行" class="headerlink" title="6 暂停 / 恢复程序运行"></a><strong>6</strong> <strong>暂停 / 恢复程序运行</strong></h1><p><strong>调试程序中，暂停程序运行是必须的，GDB可以方便地暂停程序的运行</strong>。你可以设置程序的在哪行停住，在什么条件下停住，在收到什么信号时停往等等。以便于你查看运行时的变量，以及运行时的流程。</p>
<p>当进程被gdb停住时，你可以使用info program 来查看程序的是否在运行，进程号，被暂停的原因。</p>
<p>在gdb中，我们可以有以下几种暂停方式：断点（BreakPoint）、观察点（WatchPoint）、捕捉点（CatchPoint）、信号（Signals）、线程停止（Thread Stops）。如果要恢复程序运行，可以使用c或是continue命令。</p>
<h1 id="7-常见指令"><a href="#7-常见指令" class="headerlink" title="7 常见指令"></a>7 常见指令</h1><h2 id="7-1-设置断点（BreakPoint）"><a href="#7-1-设置断点（BreakPoint）" class="headerlink" title="7.1 设置断点（BreakPoint）"></a>7.1 <strong>设置断点（BreakPoint）</strong></h2><p>我们用break命令来设置断点。正面有几点设置断点的方法：</p>
<ol>
<li><p><strong>break <em>function</em></strong><br>在进入指定函数时停住。C++中可以使用class::function或function(type,type)格式来指定函数名。</p>
</li>
<li><p><strong>break <em>linenum</em></strong><br>在指定行号停住。</p>
</li>
<li><p><strong>break <em>+offset /</em> break -<em>offset</em></strong></p>
<ol>
<li>break <em>+offset</em></li>
<li>break <em>-offset</em></li>
</ol>
<p>在当前行号的前面或后面的offset行停住。offset为自然数。</p>
</li>
<li><p><strong>break <em>filename:linenum</em></strong><br>在源文件filename的linenum行处停住。</p>
</li>
<li><p><strong>break <em>filename:function</em></strong><br>在源文件filename的function函数的入口处停住。</p>
</li>
<li><p><strong>break </strong>address<em>*</em><br>在程序运行的内存地址处停住。</p>
</li>
<li><p><strong>break</strong><br>break命令没有参数时，表示在下一条指令处停住。</p>
</li>
<li><p><strong>break … if <em>cond</em></strong><br>…可以是上述的参数，condition表示条件，在条件成立时停住。比如在循环境体中，可以设置break if i=100，表示当i为100时停住程序。</p>
</li>
</ol>
<p>查看断点时，可使用info命令，如下所示：（注：n表示断点号）</p>
<ol>
<li>info breakpoints [n]</li>
<li>info break [n]</li>
<li>info watchpoints [n]</li>
</ol>
<h2 id="7-2-设置观察点（WatchPoint）"><a href="#7-2-设置观察点（WatchPoint）" class="headerlink" title="7.2 设置观察点（WatchPoint）"></a>7.2 <strong>设置观察点（WatchPoint）</strong></h2><p>观察点一般来观察某个表达式（变量也是一种表达式）的值是否有变化了，如果有变化，马上停住程序。我们有下面的几种方法来设置观察点：</p>
<ol>
<li><strong>watch <em>expr</em></strong><br>为表达式（变量）expr设置一个观察点。一量表达式值有变化时，马上停住程序。</li>
<li><strong>rwatch <em>expr</em></strong><br>当表达式（变量）expr被读时，停住程序。</li>
<li><strong>awatch <em>expr</em></strong><br>当表达式（变量）的值被读或被写时，停住程序。</li>
<li>info watchpoints<br>查看观察点、断点和捕捉点信息，同<strong>info break</strong> 一样.</li>
</ol>
<h2 id="7-3-设置捕捉点（CatchPoint）"><a href="#7-3-设置捕捉点（CatchPoint）" class="headerlink" title="7.3 设置捕捉点（CatchPoint）"></a>7.3 <strong>设置捕捉点（CatchPoint）</strong></h2><p>你可设置捕捉点来补捉程序运行时的一些事件。如：载入共享库（动态链接库）或是C++的异常。设置捕捉点的格式为：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">catch</span> *event*</span><br></pre></td></tr></table></figure>
<p>当event发生时，停住程序。event可以是下面的内容：</p>
<ol>
<li><strong>throw</strong> 一个C++抛出的异常。（throw为关键字）</li>
<li><strong>catch</strong> 一个C++捕捉到的异常。（catch为关键字）</li>
<li><strong>exec</strong> 调用系统调用exec时。（exec为关键字，目前此功能只在HP-UX下有用）</li>
<li><strong>fork</strong> 调用系统调用fork时。（fork为关键字，目前此功能只在HP-UX下有用）</li>
<li><strong>vfork</strong> 调用系统调用vfork时。（vfork为关键字，目前此功能只在HP-UX下有用）</li>
<li><strong>load</strong> 或 load 载入共享库（动态链接库）时。（load为关键字，目前此功能只在HP-UX下有用）</li>
<li><strong>unload</strong> 或 unload 卸载共享库（动态链接库）时。（unload为关键字，目前此功能只在HP-UX下有用）</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">tcatch *event*</span><br></pre></td></tr></table></figure>
<p>只设置一次捕捉点，当程序停住以后，应点被自动删除。</p>
<h2 id="7-4-维护停止点"><a href="#7-4-维护停止点" class="headerlink" title="7.4 维护停止点"></a>7.4 <strong>维护停止点</strong></h2><p>上面说了如何设置程序的停止点，GDB中的停止点也就是上述的三类。在GDB中，如果你觉得已定义好的停止点没有用了，你可以使用delete、clear、disable、enable这几个命令来进行维护。</p>
<ol>
<li><strong>clear</strong><br>清除所有的已定义的停止点。</li>
<li><strong>clear <em>function</em></strong><br>清除所有设置在函数上的停止点。</li>
<li><strong>clear <em>linenum</em></strong><br>清除所有设置在指定行上的停止点。</li>
<li><strong>clear <em>filename:linenum</em></strong><br>清除所有设置在指定文件：指定行上的停止点。</li>
<li><strong>delete <em>[breakpoints] [range…]</em></strong><br>删除指定的断点，breakpoints为断点号。如果不指定断点号，则表示删除所有的断点。range 表示断点号的范围（如：3-7）。其简写命令为d。<br>比删除更好的一种方法是disable停止点，disable了的停止点，GDB不会删除，当你还需要时，enable即可，就好像回收站一样。</li>
<li><strong>disable <em>[breakpoints] [range…]</em></strong><br>disable所指定的停止点，breakpoints为停止点号。如果什么都不指定，表示disable所有的停止点。简写命令是dis.</li>
<li><strong>enable <em>[breakpoints] [range…]</em></strong><br>enable所指定的停止点，breakpoints为停止点号。</li>
<li><strong>enable <em>[breakpoints] once range…</em></strong><br>enable所指定的停止点一次，当程序停止后，该停止点马上被GDB自动disable。</li>
<li><strong>enable <em>[breakpoints] delete range…</em></strong><br>enable所指定的停止点一次，当程序停止后，该停止点马上被GDB自动删除。</li>
</ol>
<h2 id="7-5-停止条件维护"><a href="#7-5-停止条件维护" class="headerlink" title="7.5 停止条件维护"></a>7.5 <strong>停止条件维护</strong></h2><p>前面在说到设置断点时，我们提到过可以设置一个条件，当条件成立时，程序自动停止，这是一个非常强大的功能，这里，我想专门说说这个条件的相关维护命令。一般来说，为断点设置一个条件，我们使用if关键词，后面跟其断点条件。并且，条件设置好后，我们可以用condition命令来修改断点的条件。（只有 break和watch命令支持if，catch目前暂不支持if）</p>
<ol>
<li><strong>condition <em>bnum expression</em></strong><br>修改断点号为bnum的停止条件为expression。</li>
<li><strong>condition <em>bnum</em></strong><br>清除断点号为bnum的停止条件。</li>
<li><strong>ignore <em>bnum count</em></strong><br>表示忽略断点号为bnum的停止条件count次。</li>
</ol>
<h2 id="7-6-为停止点设定运行命令"><a href="#7-6-为停止点设定运行命令" class="headerlink" title="7.6 为停止点设定运行命令"></a>7.6 <strong>为停止点设定运行命令</strong></h2><p>我们可以 <strong>使用GDB提供的command命令来设置停止点的运行命令</strong> 。也就是说，当运行的程序在被停止住时，我们可以让其自动运行一些别的命令，这很有利行自动化调试。对基于GDB的自动化调试是一个强大的支持。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">commands [bnum]</span><br><span class="line"></span><br><span class="line">... command-list ...</span><br><span class="line"></span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>为断点号bnum指写一个命令列表。当程序被该断点停住时，gdb会依次运行命令列表中的命令。</p>
<p>例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">break</span> foo <span class="keyword">if</span> x &gt; <span class="number">0</span></span><br><span class="line"></span><br><span class="line">commands</span><br><span class="line"></span><br><span class="line">printf <span class="string">&quot;x is %d &quot;</span>,x</span><br><span class="line"></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>断点设置在函数foo中，断点条件是x&gt;0，如果程序被断住后，也就是，一旦x的值在foo函数中大于0，GDB会自动打印出x的值，并继续运行程序。</p>
<p>如果你要清除断点上的命令序列，那么只要简单的执行一下commands命令，并直接在打个end就行了。</p>
<h2 id="7-7-断点菜单"><a href="#7-7-断点菜单" class="headerlink" title="7.7 断点菜单"></a>7.7 <strong>断点菜单</strong></h2><p>在C++中，可能会重复出现同一个名字的函数若干次（函数重载），在这种情况下，break 不能告诉GDB要停在哪个函数的入口。当然，你可以使用break 也就是把函数的参数类型告诉GDB，以指定一个函数。否则的话，GDB会给你列出一个断点菜单供你选择你所需要的断点。你只要输入你菜单列表中的编号就可以了。如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">(gdb) b String::after</span><br><span class="line">[<span class="number">0</span>] cancel</span><br><span class="line">[<span class="number">1</span>] all</span><br><span class="line">[<span class="number">2</span>] file:String.cc; line number:<span class="number">867</span></span><br><span class="line">[<span class="number">3</span>] file:String.cc; line number:<span class="number">860</span></span><br><span class="line">[<span class="number">4</span>] file:String.cc; line number:<span class="number">875</span></span><br><span class="line">[<span class="number">5</span>] file:String.cc; line number:<span class="number">853</span></span><br><span class="line">[<span class="number">6</span>] file:String.cc; line number:<span class="number">846</span></span><br><span class="line">[<span class="number">7</span>] file:String.cc; line number:<span class="number">735</span></span><br><span class="line">&gt; <span class="number">2</span> <span class="number">4</span> <span class="number">6</span></span><br><span class="line">Breakpoint <span class="number">1</span> at <span class="number">0xb26c</span>: file String.cc, line <span class="number">867.</span></span><br><span class="line">Breakpoint <span class="number">2</span> at <span class="number">0xb344</span>: file String.cc, line <span class="number">875.</span></span><br><span class="line">Breakpoint <span class="number">3</span> at <span class="number">0xafcc</span>: file String.cc, line <span class="number">846.</span></span><br><span class="line">Multiple breakpoints were set.</span><br><span class="line">Use the <span class="string">&quot;delete&quot;</span> command to <span class="keyword">delete</span> unwanted breakpoints.</span><br><span class="line">(gdb)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可见，GDB列出了所有after的重载函数，你可以选一下列表编号就行了。0表示放弃设置断点，1表示所有函数都设置断点。</p>
<h2 id="7-8-恢复程序运行和单步调试"><a href="#7-8-恢复程序运行和单步调试" class="headerlink" title="7.8 恢复程序运行和单步调试"></a>7.8 <strong>恢复程序运行和单步调试</strong></h2><p>当程序被停住了，你可以用continue命令恢复程序的运行直到程序结束，或下一个断点到来。也可以使用step或next命令单步跟踪程序。</p>
<ol>
<li><p><strong>continue <em>[ignore-count]</em></strong><br>c <em>[ignore-count]</em><br>fg <em>[ignore-count]</em><br>恢复程序运行，直到程序结束，或是下一个断点到来。ignore-count表示忽略其后的断点次数。continue，c，fg三个命令都是一样的意思。</p>
</li>
<li><p><strong>step <em>[count]</em></strong><br>单步跟踪，如果有函数调用，他会进入该函数。进入函数的前提是，此函数被编译有debug信息。很像VC等工具中的step in。后面可以加count也可以不加，不加表示一条条地执行，<strong>加表示执行后面的count条指令，然后再停住。</strong></p>
</li>
<li><p><strong>next <em>[count]</em></strong><br>同样单步跟踪，如果有函数调用，他不会进入该函数。很像VC等工具中的step over。后面可以加count也可以不加，不加表示一条条地执行，<strong>加表示执行后面的count条指令，然后再停住。</strong></p>
</li>
<li><p><strong>set step-mode on</strong><br><strong>打开step-mode模式</strong> ，于是，在进行单步跟踪时，程序会因为没有debug信息而停住。这个参数有很利于查看机器码。</p>
</li>
<li><p><strong>set step-mod off</strong><br><strong>关闭step-mode模式。</strong>This is the default.</p>
</li>
<li><p><strong>show step-mode</strong><br><strong>显示 gdb 是否会在没有源代码行调试信息的情况下停止或跳过函数。</strong></p>
</li>
<li><p><strong>finish</strong><br><strong>运行程序，直到当前函数完成返回。</strong>并打印函数返回时的堆栈地址和返回值及参数值等信息。</p>
</li>
<li><p><strong>until 或 u</strong><br><strong>当你厌倦了在一个循环体内单步跟踪时，这个命令可以运行程序直到退出循环体。</strong></p>
</li>
<li><p><strong>until <em>location /</em> u <em>location</em></strong><br><strong>继续运行程序，直到到达指定位置或返回当前堆栈帧。</strong> location 是 break 可以接受的任何参数形式。这种形式的命令使用断点，因此比不带参数的 until 更快。只有当指定的位置位于当前堆栈帧中时，才会实际到达该位置。这意味着 until 可以用来跳过递归函数的调用。<br>例如，在下面的代码中，如果当前位置是第 96 行，那么执行直到第 99 行的命令将在同一次调用阶乘的过程中执行程序到第 99 行，即在内部调用返回之后。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">factorial</span> <span class="params">(<span class="type">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (value &gt; <span class="number">1</span>) &#123;</span><br><span class="line">		value *= <span class="built_in">factorial</span> (value - <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> (value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>stepi 或 si 或 stepi repeatCount</strong><br><strong>单步跟踪一条机器指令！</strong>一条程序代码有可能由数条机器指令完成，stepi可以单步执行机器指令。在执行机器指令时，使用 “display/i $pc “通常很有用。这样，每次程序停止时，gdb 都会自动显示下一条要执行的指令。</p>
</li>
</ol>
<h2 id="7-9-信号（Signals）"><a href="#7-9-信号（Signals）" class="headerlink" title="7.9 信号（Signals）"></a>7.9 <strong>信号（Signals）</strong></h2><p><strong>信号是一种软中断，是一种处理异步事件的方法。</strong>一般来说，操作系统都支持许多信号。尤其是UNIX，比较重要应用程序一般都会处理信号。UNIX定义了许多信号，比如SIGINT表示中断字符信号，也就是Ctrl+C的信号，SIGBUS表示硬件故障的信号；SIGCHLD表示子进程状态改变信号；SIGKILL表示终止程序运行的信号，等等。信号量编程是UNIX下非常重要的一种技术。</p>
<p>GDB有能力在你调试程序的时候处理任何一种信号，你可以告诉GDB需要处理哪一种信号。你可以要求GDB收到你所指定的信号时，马上停住正在运行的程序，以供你进行调试。你可以用GDB的handle命令来完成这一功能。</p>
<ol>
<li><strong>handle signal <em>[keywords…]</em></strong><br><strong>在GDB中定义一个信号处理。</strong>信号可以以SIG开头或不以SIG开头，可以用定义一个要处理信号的范围（如：SIGIO-SIGKILL，表示处理从 SIGIO信号到SIGKILL的信号，其中包括SIGIO，SIGIOT，SIGKILL三个信号），也可以使用关键字all来标明要处理所有的信号。一旦被调试的程序接收到信号，运行程序马上会被GDB停住，以供调试。可选参数关键字（如下所述）说明了要进行的更改。<ol>
<li>nostop<br>当被调试的程序收到信号时，GDB不会停住程序的运行，但会打出消息告诉你收到这种信号。</li>
<li>stop<br>当被调试的程序收到信号时，GDB会停住你的程序。这也暗示了 nostop 关键字。</li>
<li>print<br>当被调试的程序收到信号时，GDB会显示出一条信息。</li>
<li>noprint<br>当被调试的程序收到信号时，GDB不会告诉你收到信号的信息。这也暗示了 nostop 关键字。</li>
<li>pass<br>noignore<br>当被调试的程序收到信号时，GDB不处理信号。这表示，GDB会把这个信号交给被调试程序处理，否则，如果信号是致命的，且未得到处理，则可能会终止运行。</li>
<li>nopass<br>ignore<br>当被调试的程序收到信号时，GDB不会让被调试程序来处理这个信号。</li>
<li>info signals<br>info handle<br>查看有哪些信号在被GDB检测中。</li>
</ol>
</li>
</ol>
<h2 id="7-10-线程（Thread-Stops）"><a href="#7-10-线程（Thread-Stops）" class="headerlink" title="7.10 线程（Thread Stops）"></a>7.10 <strong>线程（Thread Stops）</strong></h2><p>如果你程序是多线程的话，你可以定义你的断点是否在所有的线程上，或是在某个特定的线程。GDB很容易帮你完成这一工作。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">break</span> *linespec* thread *threadno*</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span> *linespec* thread *threadno* <span class="keyword">if</span> ...</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p> <strong>linespec指定了断点设置在的源程序的行号。threadno指定了线程的ID</strong> ，注意，这个ID是GDB分配的，你可以通过“info threads”命令来查看正在运行程序中的线程信息。如果你不指定‘thread <em>threadno</em> ’则表示你的断点设在所有线程上面。你还可以为某线程指定断点条件。如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">(gdb) <span class="keyword">break</span> frik.c:<span class="number">13</span> thread <span class="number">28</span> <span class="keyword">if</span> bartab &gt; lim</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>当你的程序被GDB停住时，所有的运行线程都会被停住。这方便你你查看运行程序的总体情况。而在你恢复程序运行时，所有的线程也会被恢复运行。那怕是主进程在被单步调试时。</p>
<h1 id="8-查看栈信息"><a href="#8-查看栈信息" class="headerlink" title="8 查看栈信息"></a>8 查看栈信息</h1>]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>GDB调试</tag>
      </tags>
  </entry>
</search>
